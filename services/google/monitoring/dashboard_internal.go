// Copyright 2021 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package monitoring

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"reflect"
	"strings"
	"time"

	"github.com/mohae/deepcopy"
	"github.com/GoogleCloudPlatform/declarative-resource-client-library/dcl"
)

func (r *Dashboard) validate() error {

	if err := dcl.RequiredParameter(r.Project, "Project"); err != nil {
		return err
	}
	if !dcl.IsEmptyValueIndirect(r.ColumnLayout) {
		if err := r.ColumnLayout.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.GridLayout) {
		if err := r.GridLayout.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.MosaicLayout) {
		if err := r.MosaicLayout.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.RowLayout) {
		if err := r.RowLayout.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.TabbedLayout) {
		if err := r.TabbedLayout.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardColumnLayout) validate() error {
	return nil
}
func (r *DashboardColumnLayoutColumns) validate() error {
	return nil
}
func (r *DashboardWidget) validate() error {
	if !dcl.IsEmptyValueIndirect(r.XyChart) {
		if err := r.XyChart.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.Scorecard) {
		if err := r.Scorecard.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.Text) {
		if err := r.Text.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.Blank) {
		if err := r.Blank.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChart) validate() error {
	if !dcl.IsEmptyValueIndirect(r.SourceDrilldown) {
		if err := r.SourceDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.MetricDrilldown) {
		if err := r.MetricDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.XAxis) {
		if err := r.XAxis.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.YAxis) {
		if err := r.YAxis.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ChartOptions) {
		if err := r.ChartOptions.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSets) validate() error {
	if !dcl.IsEmptyValueIndirect(r.TimeSeriesQuery) {
		if err := r.TimeSeriesQuery.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQuery) validate() error {
	if !dcl.IsEmptyValueIndirect(r.TimeSeriesFilter) {
		if err := r.TimeSeriesFilter.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.TimeSeriesFilterRatio) {
		if err := r.TimeSeriesFilterRatio.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter) validate() error {
	if !dcl.IsEmptyValueIndirect(r.Aggregation) {
		if err := r.Aggregation.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.SecondaryAggregation) {
		if err := r.SecondaryAggregation.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.PickTimeSeriesFilter) {
		if err := r.PickTimeSeriesFilter.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ReduceFractionLessThanParams) {
		if err := r.ReduceFractionLessThanParams.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ReduceMakeDistributionParams) {
		if err := r.ReduceMakeDistributionParams.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) validate() error {
	if !dcl.IsEmptyValueIndirect(r.BucketOptions) {
		if err := r.BucketOptions.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExemplarSampling) {
		if err := r.ExemplarSampling.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) validate() error {
	if !dcl.IsEmptyValueIndirect(r.LinearBuckets) {
		if err := r.LinearBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExponentialBuckets) {
		if err := r.ExponentialBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExplicitBuckets) {
		if err := r.ExplicitBuckets.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ReduceFractionLessThanParams) {
		if err := r.ReduceFractionLessThanParams.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ReduceMakeDistributionParams) {
		if err := r.ReduceMakeDistributionParams.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) validate() error {
	if !dcl.IsEmptyValueIndirect(r.BucketOptions) {
		if err := r.BucketOptions.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExemplarSampling) {
		if err := r.ExemplarSampling.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) validate() error {
	if !dcl.IsEmptyValueIndirect(r.LinearBuckets) {
		if err := r.LinearBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExponentialBuckets) {
		if err := r.ExponentialBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExplicitBuckets) {
		if err := r.ExplicitBuckets.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio) validate() error {
	if !dcl.IsEmptyValueIndirect(r.Numerator) {
		if err := r.Numerator.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.Denominator) {
		if err := r.Denominator.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.SecondaryAggregation) {
		if err := r.SecondaryAggregation.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.PickTimeSeriesFilter) {
		if err := r.PickTimeSeriesFilter.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator) validate() error {
	if !dcl.IsEmptyValueIndirect(r.Aggregation) {
		if err := r.Aggregation.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ReduceFractionLessThanParams) {
		if err := r.ReduceFractionLessThanParams.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ReduceMakeDistributionParams) {
		if err := r.ReduceMakeDistributionParams.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) validate() error {
	if !dcl.IsEmptyValueIndirect(r.BucketOptions) {
		if err := r.BucketOptions.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExemplarSampling) {
		if err := r.ExemplarSampling.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) validate() error {
	if !dcl.IsEmptyValueIndirect(r.LinearBuckets) {
		if err := r.LinearBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExponentialBuckets) {
		if err := r.ExponentialBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExplicitBuckets) {
		if err := r.ExplicitBuckets.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator) validate() error {
	if !dcl.IsEmptyValueIndirect(r.Aggregation) {
		if err := r.Aggregation.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ReduceFractionLessThanParams) {
		if err := r.ReduceFractionLessThanParams.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ReduceMakeDistributionParams) {
		if err := r.ReduceMakeDistributionParams.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) validate() error {
	if !dcl.IsEmptyValueIndirect(r.BucketOptions) {
		if err := r.BucketOptions.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExemplarSampling) {
		if err := r.ExemplarSampling.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) validate() error {
	if !dcl.IsEmptyValueIndirect(r.LinearBuckets) {
		if err := r.LinearBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExponentialBuckets) {
		if err := r.ExponentialBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExplicitBuckets) {
		if err := r.ExplicitBuckets.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ReduceFractionLessThanParams) {
		if err := r.ReduceFractionLessThanParams.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ReduceMakeDistributionParams) {
		if err := r.ReduceMakeDistributionParams.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) validate() error {
	if !dcl.IsEmptyValueIndirect(r.BucketOptions) {
		if err := r.BucketOptions.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExemplarSampling) {
		if err := r.ExemplarSampling.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) validate() error {
	if !dcl.IsEmptyValueIndirect(r.LinearBuckets) {
		if err := r.LinearBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExponentialBuckets) {
		if err := r.ExponentialBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExplicitBuckets) {
		if err := r.ExplicitBuckets.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartSourceDrilldown) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ResourceTypeDrilldown) {
		if err := r.ResourceTypeDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.GroupNameDrilldown) {
		if err := r.GroupNameDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ServiceNameDrilldown) {
		if err := r.ServiceNameDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ServiceTypeDrilldown) {
		if err := r.ServiceTypeDrilldown.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartMetricDrilldown) validate() error {
	if !dcl.IsEmptyValueIndirect(r.MetricTypeDrilldown) {
		if err := r.MetricTypeDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.MetricGroupByDrilldown) {
		if err := r.MetricGroupByDrilldown.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartThresholds) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartXAxis) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartYAxis) validate() error {
	return nil
}
func (r *DashboardWidgetXyChartChartOptions) validate() error {
	return nil
}
func (r *DashboardWidgetScorecard) validate() error {
	if !dcl.IsEmptyValueIndirect(r.TimeSeriesQuery) {
		if err := r.TimeSeriesQuery.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.SourceDrilldown) {
		if err := r.SourceDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.MetricDrilldown) {
		if err := r.MetricDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.GaugeView) {
		if err := r.GaugeView.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.SparkChartView) {
		if err := r.SparkChartView.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQuery) validate() error {
	if !dcl.IsEmptyValueIndirect(r.TimeSeriesFilter) {
		if err := r.TimeSeriesFilter.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.TimeSeriesFilterRatio) {
		if err := r.TimeSeriesFilterRatio.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter) validate() error {
	if !dcl.IsEmptyValueIndirect(r.Aggregation) {
		if err := r.Aggregation.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.SecondaryAggregation) {
		if err := r.SecondaryAggregation.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.PickTimeSeriesFilter) {
		if err := r.PickTimeSeriesFilter.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ReduceFractionLessThanParams) {
		if err := r.ReduceFractionLessThanParams.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ReduceMakeDistributionParams) {
		if err := r.ReduceMakeDistributionParams.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) validate() error {
	if !dcl.IsEmptyValueIndirect(r.BucketOptions) {
		if err := r.BucketOptions.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExemplarSampling) {
		if err := r.ExemplarSampling.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) validate() error {
	if !dcl.IsEmptyValueIndirect(r.LinearBuckets) {
		if err := r.LinearBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExponentialBuckets) {
		if err := r.ExponentialBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExplicitBuckets) {
		if err := r.ExplicitBuckets.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ReduceFractionLessThanParams) {
		if err := r.ReduceFractionLessThanParams.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ReduceMakeDistributionParams) {
		if err := r.ReduceMakeDistributionParams.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) validate() error {
	if !dcl.IsEmptyValueIndirect(r.BucketOptions) {
		if err := r.BucketOptions.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExemplarSampling) {
		if err := r.ExemplarSampling.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) validate() error {
	if !dcl.IsEmptyValueIndirect(r.LinearBuckets) {
		if err := r.LinearBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExponentialBuckets) {
		if err := r.ExponentialBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExplicitBuckets) {
		if err := r.ExplicitBuckets.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio) validate() error {
	if !dcl.IsEmptyValueIndirect(r.Numerator) {
		if err := r.Numerator.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.Denominator) {
		if err := r.Denominator.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.SecondaryAggregation) {
		if err := r.SecondaryAggregation.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.PickTimeSeriesFilter) {
		if err := r.PickTimeSeriesFilter.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator) validate() error {
	if !dcl.IsEmptyValueIndirect(r.Aggregation) {
		if err := r.Aggregation.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ReduceFractionLessThanParams) {
		if err := r.ReduceFractionLessThanParams.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ReduceMakeDistributionParams) {
		if err := r.ReduceMakeDistributionParams.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) validate() error {
	if !dcl.IsEmptyValueIndirect(r.BucketOptions) {
		if err := r.BucketOptions.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExemplarSampling) {
		if err := r.ExemplarSampling.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) validate() error {
	if !dcl.IsEmptyValueIndirect(r.LinearBuckets) {
		if err := r.LinearBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExponentialBuckets) {
		if err := r.ExponentialBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExplicitBuckets) {
		if err := r.ExplicitBuckets.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator) validate() error {
	if !dcl.IsEmptyValueIndirect(r.Aggregation) {
		if err := r.Aggregation.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ReduceFractionLessThanParams) {
		if err := r.ReduceFractionLessThanParams.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ReduceMakeDistributionParams) {
		if err := r.ReduceMakeDistributionParams.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) validate() error {
	if !dcl.IsEmptyValueIndirect(r.BucketOptions) {
		if err := r.BucketOptions.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExemplarSampling) {
		if err := r.ExemplarSampling.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) validate() error {
	if !dcl.IsEmptyValueIndirect(r.LinearBuckets) {
		if err := r.LinearBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExponentialBuckets) {
		if err := r.ExponentialBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExplicitBuckets) {
		if err := r.ExplicitBuckets.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ReduceFractionLessThanParams) {
		if err := r.ReduceFractionLessThanParams.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ReduceMakeDistributionParams) {
		if err := r.ReduceMakeDistributionParams.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) validate() error {
	if !dcl.IsEmptyValueIndirect(r.BucketOptions) {
		if err := r.BucketOptions.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExemplarSampling) {
		if err := r.ExemplarSampling.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) validate() error {
	if !dcl.IsEmptyValueIndirect(r.LinearBuckets) {
		if err := r.LinearBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExponentialBuckets) {
		if err := r.ExponentialBuckets.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ExplicitBuckets) {
		if err := r.ExplicitBuckets.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardSourceDrilldown) validate() error {
	if !dcl.IsEmptyValueIndirect(r.ResourceTypeDrilldown) {
		if err := r.ResourceTypeDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.GroupNameDrilldown) {
		if err := r.GroupNameDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ServiceNameDrilldown) {
		if err := r.ServiceNameDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ServiceTypeDrilldown) {
		if err := r.ServiceTypeDrilldown.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardMetricDrilldown) validate() error {
	if !dcl.IsEmptyValueIndirect(r.MetricTypeDrilldown) {
		if err := r.MetricTypeDrilldown.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.MetricGroupByDrilldown) {
		if err := r.MetricGroupByDrilldown.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardGaugeView) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardSparkChartView) validate() error {
	return nil
}
func (r *DashboardWidgetScorecardThresholds) validate() error {
	return nil
}
func (r *DashboardWidgetText) validate() error {
	return nil
}
func (r *DashboardWidgetBlank) validate() error {
	return nil
}
func (r *DashboardGridLayout) validate() error {
	return nil
}
func (r *DashboardMosaicLayout) validate() error {
	return nil
}
func (r *DashboardMosaicLayoutTiles) validate() error {
	if !dcl.IsEmptyValueIndirect(r.Widget) {
		if err := r.Widget.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardRowLayout) validate() error {
	return nil
}
func (r *DashboardRowLayoutRows) validate() error {
	return nil
}
func (r *DashboardTabbedLayout) validate() error {
	if !dcl.IsEmptyValueIndirect(r.FeaturedMosaicLayout) {
		if err := r.FeaturedMosaicLayout.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardTabbedLayoutTabs) validate() error {
	if !dcl.IsEmptyValueIndirect(r.GridLayout) {
		if err := r.GridLayout.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.MosaicLayout) {
		if err := r.MosaicLayout.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.RowLayout) {
		if err := r.RowLayout.validate(); err != nil {
			return err
		}
	}
	if !dcl.IsEmptyValueIndirect(r.ColumnLayout) {
		if err := r.ColumnLayout.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardTabbedLayoutTabsGridLayout) validate() error {
	return nil
}
func (r *DashboardTabbedLayoutTabsMosaicLayout) validate() error {
	return nil
}
func (r *DashboardTabbedLayoutTabsMosaicLayoutTiles) validate() error {
	if !dcl.IsEmptyValueIndirect(r.Widget) {
		if err := r.Widget.validate(); err != nil {
			return err
		}
	}
	return nil
}
func (r *DashboardTabbedLayoutTabsRowLayout) validate() error {
	return nil
}
func (r *DashboardTabbedLayoutTabsRowLayoutRows) validate() error {
	return nil
}
func (r *DashboardTabbedLayoutTabsColumnLayout) validate() error {
	return nil
}
func (r *DashboardTabbedLayoutTabsColumnLayoutColumns) validate() error {
	return nil
}
func (r *DashboardTabbedLayoutFeaturedMosaicLayout) validate() error {
	return nil
}
func (r *DashboardTabbedLayoutFeaturedMosaicLayoutTiles) validate() error {
	if !dcl.IsEmptyValueIndirect(r.Widget) {
		if err := r.Widget.validate(); err != nil {
			return err
		}
	}
	return nil
}

func dashboardGetURL(userBasePath string, r *Dashboard) (string, error) {
	params := map[string]interface{}{
		"project": dcl.ValueOrEmptyString(r.Project),
		"name":    dcl.ValueOrEmptyString(r.Name),
	}
	return dcl.URL("v1/projects/{{project}}/dashboards/{{name}}", "https://monitoring.googleapis.com/", userBasePath, params), nil
}

func dashboardListURL(userBasePath, project string) (string, error) {
	params := map[string]interface{}{
		"project": project,
	}
	return dcl.URL("v1/projects/{{project}}/dashboards", "https://monitoring.googleapis.com/", userBasePath, params), nil

}

func dashboardCreateURL(userBasePath, project string) (string, error) {
	params := map[string]interface{}{
		"project": project,
	}
	return dcl.URL("v1/projects/{{project}}/dashboards", "https://monitoring.googleapis.com/", userBasePath, params), nil

}

func dashboardDeleteURL(userBasePath string, r *Dashboard) (string, error) {
	params := map[string]interface{}{
		"project": dcl.ValueOrEmptyString(r.Project),
		"name":    dcl.ValueOrEmptyString(r.Name),
	}
	return dcl.URL("v1/projects/{{project}}/dashboards/{{name}}", "https://monitoring.googleapis.com/", userBasePath, params), nil
}

// dashboardApiOperation represents a mutable operation in the underlying REST
// API such as Create, Update, or Delete.
type dashboardApiOperation interface {
	do(context.Context, *Dashboard, *Client) error
}

// newUpdateDashboardUpdateRequest creates a request for an
// Dashboard resource's update update type by filling in the update
// fields based on the intended state of the resource.
func newUpdateDashboardUpdateRequest(ctx context.Context, f *Dashboard, c *Client) (map[string]interface{}, error) {
	req := map[string]interface{}{}

	if v, err := expandDashboardColumnLayout(c, f.ColumnLayout); err != nil {
		return nil, fmt.Errorf("error expanding ColumnLayout into columnLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		req["columnLayout"] = v
	}
	if v := f.DisplayName; !dcl.IsEmptyValueIndirect(v) {
		req["displayName"] = v
	}
	if v, err := expandDashboardGridLayout(c, f.GridLayout); err != nil {
		return nil, fmt.Errorf("error expanding GridLayout into gridLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		req["gridLayout"] = v
	}
	if v, err := expandDashboardMosaicLayout(c, f.MosaicLayout); err != nil {
		return nil, fmt.Errorf("error expanding MosaicLayout into mosaicLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		req["mosaicLayout"] = v
	}
	b, err := c.getDashboardRaw(ctx, f.urlNormalized())
	if err != nil {
		return nil, err
	}
	var m map[string]interface{}
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	rawEtag, err := dcl.GetMapEntry(
		m,
		[]string{"etag"},
	)
	if err != nil {
		c.Config.Logger.Warningf("Failed to fetch from JSON Path: %v", err)
	} else {
		req["etag"] = rawEtag.(string)
	}
	req["name"] = fmt.Sprintf("projects/%s/dashboards/%s", *f.Project, *f.Name)

	return req, nil
}

// marshalUpdateDashboardUpdateRequest converts the update into
// the final JSON request body.
func marshalUpdateDashboardUpdateRequest(c *Client, m map[string]interface{}) ([]byte, error) {

	return json.Marshal(m)
}

type updateDashboardUpdateOperation struct {
	// If the update operation has the REQUIRES_APPLY_OPTIONS trait, this will be populated.
	// Usually it will be nil - this is to prevent us from accidentally depending on apply
	// options, which should usually be unnecessary.
	ApplyOptions []dcl.ApplyOption
}

// do creates a request and sends it to the appropriate URL. In most operations,
// do will transcribe a subset of the resource into a request object and send a
// PUT request to a single URL.

func (op *updateDashboardUpdateOperation) do(ctx context.Context, r *Dashboard, c *Client) error {
	_, err := c.GetDashboard(ctx, r.urlNormalized())
	if err != nil {
		return err
	}

	u, err := r.updateURL(c.Config.BasePath, "update")
	if err != nil {
		return err
	}

	req, err := newUpdateDashboardUpdateRequest(ctx, r, c)
	if err != nil {
		return err
	}

	c.Config.Logger.Infof("Created update: %#v", req)
	body, err := marshalUpdateDashboardUpdateRequest(c, req)
	if err != nil {
		return err
	}
	_, err = dcl.SendRequest(ctx, c.Config, "PATCH", u, bytes.NewBuffer(body), c.Config.RetryProvider)
	if err != nil {
		return err
	}

	return nil
}

func (c *Client) listDashboardRaw(ctx context.Context, project, pageToken string, pageSize int32) ([]byte, error) {
	u, err := dashboardListURL(c.Config.BasePath, project)
	if err != nil {
		return nil, err
	}

	m := make(map[string]string)
	if pageToken != "" {
		m["pageToken"] = pageToken
	}

	if pageSize != DashboardMaxPage {
		m["pageSize"] = fmt.Sprintf("%v", pageSize)
	}

	u, err = dcl.AddQueryParams(u, m)
	if err != nil {
		return nil, err
	}
	resp, err := dcl.SendRequest(ctx, c.Config, "GET", u, &bytes.Buffer{}, c.Config.RetryProvider)
	if err != nil {
		return nil, err
	}
	defer resp.Response.Body.Close()
	return ioutil.ReadAll(resp.Response.Body)
}

type listDashboardOperation struct {
	Dashboards []map[string]interface{} `json:"dashboards"`
	Token      string                   `json:"nextPageToken"`
}

func (c *Client) listDashboard(ctx context.Context, project, pageToken string, pageSize int32) ([]*Dashboard, string, error) {
	b, err := c.listDashboardRaw(ctx, project, pageToken, pageSize)
	if err != nil {
		return nil, "", err
	}

	var m listDashboardOperation
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, "", err
	}

	var l []*Dashboard
	for _, v := range m.Dashboards {
		res := flattenDashboard(c, v)
		res.Project = &project
		l = append(l, res)
	}

	return l, m.Token, nil
}

func (c *Client) deleteAllDashboard(ctx context.Context, f func(*Dashboard) bool, resources []*Dashboard) error {
	var errors []string
	for _, res := range resources {
		if f(res) {
			// We do not want deleteAll to fail on a deletion or else it will stop deleting other resources.
			err := c.DeleteDashboard(ctx, res)
			if err != nil {
				errors = append(errors, err.Error())
			}
		}
	}
	if len(errors) > 0 {
		return fmt.Errorf("%v", strings.Join(errors, "\n"))
	} else {
		return nil
	}
}

type deleteDashboardOperation struct{}

func (op *deleteDashboardOperation) do(ctx context.Context, r *Dashboard, c *Client) error {

	_, err := c.GetDashboard(ctx, r.urlNormalized())

	if err != nil {
		if dcl.IsNotFound(err) {
			c.Config.Logger.Infof("Dashboard not found, returning. Original error: %v", err)
			return nil
		}
		c.Config.Logger.Warningf("GetDashboard checking for existence. error: %v", err)
		return err
	}

	u, err := dashboardDeleteURL(c.Config.BasePath, r.urlNormalized())
	if err != nil {
		return err
	}

	// Delete should never have a body
	body := &bytes.Buffer{}
	_, err = dcl.SendRequest(ctx, c.Config, "DELETE", u, body, c.Config.RetryProvider)
	if err != nil {
		return fmt.Errorf("failed to delete Dashboard: %w", err)
	}

	// we saw a race condition where for some successful delete operation, the Get calls returned resources for a short duration.
	// this is the reason we are adding retry to handle that case.
	maxRetry := 10
	for i := 1; i <= maxRetry; i++ {
		_, err = c.GetDashboard(ctx, r.urlNormalized())
		if !dcl.IsNotFound(err) {
			if i == maxRetry {
				return dcl.NotDeletedError{ExistingResource: r}
			}
			time.Sleep(1000 * time.Millisecond)
		} else {
			break
		}
	}
	return nil
}

// Create operations are similar to Update operations, although they do not have
// specific request objects. The Create request object is the json encoding of
// the resource, which is modified by res.marshal to form the base request body.
type createDashboardOperation struct {
	response map[string]interface{}
}

func (op *createDashboardOperation) FirstResponse() (map[string]interface{}, bool) {
	return op.response, len(op.response) > 0
}

func (op *createDashboardOperation) do(ctx context.Context, r *Dashboard, c *Client) error {
	c.Config.Logger.Infof("Attempting to create %v", r)

	project := r.createFields()
	u, err := dashboardCreateURL(c.Config.BasePath, project)

	if err != nil {
		return err
	}

	req, err := r.marshal(c)
	if err != nil {
		return err
	}
	var m map[string]interface{}
	if err := json.Unmarshal(req, &m); err != nil {
		return err
	}
	normalized := r.urlNormalized()
	m["name"] = fmt.Sprintf("projects/%s/dashboards/%s", *normalized.Project, *normalized.Name)

	req, err = json.Marshal(m)
	if err != nil {
		return err
	}
	resp, err := dcl.SendRequest(ctx, c.Config, "POST", u, bytes.NewBuffer(req), c.Config.RetryProvider)
	if err != nil {
		return err
	}

	o, err := dcl.ResponseBodyAsJSON(resp)
	if err != nil {
		return fmt.Errorf("error decoding response body into JSON: %w", err)
	}
	op.response = o

	if _, err := c.GetDashboard(ctx, r.urlNormalized()); err != nil {
		c.Config.Logger.Warningf("get returned error: %v", err)
		return err
	}

	return nil
}

func (c *Client) getDashboardRaw(ctx context.Context, r *Dashboard) ([]byte, error) {

	u, err := dashboardGetURL(c.Config.BasePath, r.urlNormalized())
	if err != nil {
		return nil, err
	}
	resp, err := dcl.SendRequest(ctx, c.Config, "GET", u, &bytes.Buffer{}, c.Config.RetryProvider)
	if err != nil {
		return nil, err
	}
	defer resp.Response.Body.Close()
	b, err := ioutil.ReadAll(resp.Response.Body)
	if err != nil {
		return nil, err
	}

	return b, nil
}

func (c *Client) dashboardDiffsForRawDesired(ctx context.Context, rawDesired *Dashboard, opts ...dcl.ApplyOption) (initial, desired *Dashboard, diffs []dashboardDiff, err error) {
	c.Config.Logger.Info("Fetching initial state...")
	// First, let us see if the user provided a state hint.  If they did, we will start fetching based on that.
	var fetchState *Dashboard
	if sh := dcl.FetchStateHint(opts); sh != nil {
		if r, ok := sh.(*Dashboard); !ok {
			c.Config.Logger.Warningf("Initial state hint was of the wrong type; expected Dashboard, got %T", sh)
		} else {
			fetchState = r
		}
	}
	if fetchState == nil {
		fetchState = rawDesired
	}

	// 1.2: Retrieval of raw initial state from API
	rawInitial, err := c.GetDashboard(ctx, fetchState.urlNormalized())
	if rawInitial == nil {
		if !dcl.IsNotFound(err) {
			c.Config.Logger.Warningf("Failed to retrieve whether a Dashboard resource already exists: %s", err)
			return nil, nil, nil, fmt.Errorf("failed to retrieve Dashboard resource: %v", err)
		}
		c.Config.Logger.Info("Found that Dashboard resource did not exist.")
		// Perform canonicalization to pick up defaults.
		desired, err = canonicalizeDashboardDesiredState(rawDesired, rawInitial)
		return nil, desired, nil, err
	}
	c.Config.Logger.Infof("Found initial state for Dashboard: %v", rawInitial)
	c.Config.Logger.Infof("Initial desired state for Dashboard: %v", rawDesired)

	// 1.3: Canonicalize raw initial state into initial state.
	initial, err = canonicalizeDashboardInitialState(rawInitial, rawDesired)
	if err != nil {
		return nil, nil, nil, err
	}
	c.Config.Logger.Infof("Canonicalized initial state for Dashboard: %v", initial)

	// 1.4: Canonicalize raw desired state into desired state.
	desired, err = canonicalizeDashboardDesiredState(rawDesired, rawInitial, opts...)
	if err != nil {
		return nil, nil, nil, err
	}
	c.Config.Logger.Infof("Canonicalized desired state for Dashboard: %v", desired)

	// 2.1: Comparison of initial and desired state.
	diffs, err = diffDashboard(c, desired, initial, opts...)
	return initial, desired, diffs, err
}

func canonicalizeDashboardInitialState(rawInitial, rawDesired *Dashboard) (*Dashboard, error) {
	// TODO(magic-modules-eng): write canonicalizer once relevant traits are added.
	return rawInitial, nil
}

/*
* Canonicalizers
*
* These are responsible for converting either a user-specified config or a
* GCP API response to a standard format that can be used for difference checking.
* */

func canonicalizeDashboardDesiredState(rawDesired, rawInitial *Dashboard, opts ...dcl.ApplyOption) (*Dashboard, error) {

	if rawInitial == nil {
		// Since the initial state is empty, the desired state is all we have.
		// We canonicalize the remaining nested objects with nil to pick up defaults.
		rawDesired.ColumnLayout = canonicalizeDashboardColumnLayout(rawDesired.ColumnLayout, nil, opts...)
		rawDesired.GridLayout = canonicalizeDashboardGridLayout(rawDesired.GridLayout, nil, opts...)
		rawDesired.MosaicLayout = canonicalizeDashboardMosaicLayout(rawDesired.MosaicLayout, nil, opts...)
		rawDesired.RowLayout = canonicalizeDashboardRowLayout(rawDesired.RowLayout, nil, opts...)
		rawDesired.TabbedLayout = canonicalizeDashboardTabbedLayout(rawDesired.TabbedLayout, nil, opts...)

		return rawDesired, nil
	}
	if dcl.IsZeroValue(rawDesired.Category) {
		rawDesired.Category = rawInitial.Category
	}
	rawDesired.ColumnLayout = canonicalizeDashboardColumnLayout(rawDesired.ColumnLayout, rawInitial.ColumnLayout, opts...)
	if dcl.StringCanonicalize(rawDesired.DisplayName, rawInitial.DisplayName) {
		rawDesired.DisplayName = rawInitial.DisplayName
	}
	rawDesired.GridLayout = canonicalizeDashboardGridLayout(rawDesired.GridLayout, rawInitial.GridLayout, opts...)
	rawDesired.MosaicLayout = canonicalizeDashboardMosaicLayout(rawDesired.MosaicLayout, rawInitial.MosaicLayout, opts...)
	if dcl.NameToSelfLink(rawDesired.Name, rawInitial.Name) {
		rawDesired.Name = rawInitial.Name
	}
	rawDesired.RowLayout = canonicalizeDashboardRowLayout(rawDesired.RowLayout, rawInitial.RowLayout, opts...)
	rawDesired.TabbedLayout = canonicalizeDashboardTabbedLayout(rawDesired.TabbedLayout, rawInitial.TabbedLayout, opts...)
	if dcl.NameToSelfLink(rawDesired.Project, rawInitial.Project) {
		rawDesired.Project = rawInitial.Project
	}

	return rawDesired, nil
}

func canonicalizeDashboardNewState(c *Client, rawNew, rawDesired *Dashboard) (*Dashboard, error) {

	if dcl.IsEmptyValueIndirect(rawNew.Category) && dcl.IsEmptyValueIndirect(rawDesired.Category) {
		rawNew.Category = rawDesired.Category
	} else {
	}

	if dcl.IsEmptyValueIndirect(rawNew.ColumnLayout) && dcl.IsEmptyValueIndirect(rawDesired.ColumnLayout) {
		rawNew.ColumnLayout = rawDesired.ColumnLayout
	} else {
		rawNew.ColumnLayout = canonicalizeNewDashboardColumnLayout(c, rawDesired.ColumnLayout, rawNew.ColumnLayout)
	}

	if dcl.IsEmptyValueIndirect(rawNew.DisplayName) && dcl.IsEmptyValueIndirect(rawDesired.DisplayName) {
		rawNew.DisplayName = rawDesired.DisplayName
	} else {
		if dcl.StringCanonicalize(rawDesired.DisplayName, rawNew.DisplayName) {
			rawNew.DisplayName = rawDesired.DisplayName
		}
	}

	if dcl.IsEmptyValueIndirect(rawNew.GridLayout) && dcl.IsEmptyValueIndirect(rawDesired.GridLayout) {
		rawNew.GridLayout = rawDesired.GridLayout
	} else {
		rawNew.GridLayout = canonicalizeNewDashboardGridLayout(c, rawDesired.GridLayout, rawNew.GridLayout)
	}

	if dcl.IsEmptyValueIndirect(rawNew.MosaicLayout) && dcl.IsEmptyValueIndirect(rawDesired.MosaicLayout) {
		rawNew.MosaicLayout = rawDesired.MosaicLayout
	} else {
		rawNew.MosaicLayout = canonicalizeNewDashboardMosaicLayout(c, rawDesired.MosaicLayout, rawNew.MosaicLayout)
	}

	rawNew.Name = rawDesired.Name

	if dcl.IsEmptyValueIndirect(rawNew.RowLayout) && dcl.IsEmptyValueIndirect(rawDesired.RowLayout) {
		rawNew.RowLayout = rawDesired.RowLayout
	} else {
		rawNew.RowLayout = canonicalizeNewDashboardRowLayout(c, rawDesired.RowLayout, rawNew.RowLayout)
	}

	if dcl.IsEmptyValueIndirect(rawNew.TabbedLayout) && dcl.IsEmptyValueIndirect(rawDesired.TabbedLayout) {
		rawNew.TabbedLayout = rawDesired.TabbedLayout
	} else {
		rawNew.TabbedLayout = canonicalizeNewDashboardTabbedLayout(c, rawDesired.TabbedLayout, rawNew.TabbedLayout)
	}

	rawNew.Project = rawDesired.Project

	return rawNew, nil
}

func canonicalizeDashboardColumnLayout(des, initial *DashboardColumnLayout, opts ...dcl.ApplyOption) *DashboardColumnLayout {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Columns) {
		des.Columns = initial.Columns
	}

	return des
}

func canonicalizeNewDashboardColumnLayout(c *Client, des, nw *DashboardColumnLayout) *DashboardColumnLayout {
	if des == nil || nw == nil {
		return nw
	}

	nw.Columns = canonicalizeNewDashboardColumnLayoutColumnsSlice(c, des.Columns, nw.Columns)

	return nw
}

func canonicalizeNewDashboardColumnLayoutSet(c *Client, des, nw []DashboardColumnLayout) []DashboardColumnLayout {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardColumnLayout
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardColumnLayout(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardColumnLayoutSlice(c *Client, des, nw []DashboardColumnLayout) []DashboardColumnLayout {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardColumnLayout
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardColumnLayout(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardColumnLayoutColumns(des, initial *DashboardColumnLayoutColumns, opts ...dcl.ApplyOption) *DashboardColumnLayoutColumns {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Weight) {
		des.Weight = initial.Weight
	}
	if dcl.IsZeroValue(des.Widgets) {
		des.Widgets = initial.Widgets
	}

	return des
}

func canonicalizeNewDashboardColumnLayoutColumns(c *Client, des, nw *DashboardColumnLayoutColumns) *DashboardColumnLayoutColumns {
	if des == nil || nw == nil {
		return nw
	}

	nw.Widgets = canonicalizeNewDashboardWidgetSlice(c, des.Widgets, nw.Widgets)

	return nw
}

func canonicalizeNewDashboardColumnLayoutColumnsSet(c *Client, des, nw []DashboardColumnLayoutColumns) []DashboardColumnLayoutColumns {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardColumnLayoutColumns
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardColumnLayoutColumns(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardColumnLayoutColumnsSlice(c *Client, des, nw []DashboardColumnLayoutColumns) []DashboardColumnLayoutColumns {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardColumnLayoutColumns
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardColumnLayoutColumns(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidget(des, initial *DashboardWidget, opts ...dcl.ApplyOption) *DashboardWidget {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Title, initial.Title) || dcl.IsZeroValue(des.Title) {
		des.Title = initial.Title
	}
	des.XyChart = canonicalizeDashboardWidgetXyChart(des.XyChart, initial.XyChart, opts...)
	des.Scorecard = canonicalizeDashboardWidgetScorecard(des.Scorecard, initial.Scorecard, opts...)
	des.Text = canonicalizeDashboardWidgetText(des.Text, initial.Text, opts...)
	des.Blank = canonicalizeDashboardWidgetBlank(des.Blank, initial.Blank, opts...)

	return des
}

func canonicalizeNewDashboardWidget(c *Client, des, nw *DashboardWidget) *DashboardWidget {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Title, nw.Title) || dcl.IsZeroValue(des.Title) {
		nw.Title = des.Title
	}
	nw.XyChart = canonicalizeNewDashboardWidgetXyChart(c, des.XyChart, nw.XyChart)
	nw.Scorecard = canonicalizeNewDashboardWidgetScorecard(c, des.Scorecard, nw.Scorecard)
	nw.Text = canonicalizeNewDashboardWidgetText(c, des.Text, nw.Text)
	nw.Blank = canonicalizeNewDashboardWidgetBlank(c, des.Blank, nw.Blank)

	return nw
}

func canonicalizeNewDashboardWidgetSet(c *Client, des, nw []DashboardWidget) []DashboardWidget {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidget
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidget(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetSlice(c *Client, des, nw []DashboardWidget) []DashboardWidget {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidget
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidget(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChart(des, initial *DashboardWidgetXyChart, opts ...dcl.ApplyOption) *DashboardWidgetXyChart {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.DataSets) {
		des.DataSets = initial.DataSets
	}
	des.SourceDrilldown = canonicalizeDashboardWidgetXyChartSourceDrilldown(des.SourceDrilldown, initial.SourceDrilldown, opts...)
	des.MetricDrilldown = canonicalizeDashboardWidgetXyChartMetricDrilldown(des.MetricDrilldown, initial.MetricDrilldown, opts...)
	if dcl.StringCanonicalize(des.TimeshiftDuration, initial.TimeshiftDuration) || dcl.IsZeroValue(des.TimeshiftDuration) {
		des.TimeshiftDuration = initial.TimeshiftDuration
	}
	if dcl.IsZeroValue(des.Thresholds) {
		des.Thresholds = initial.Thresholds
	}
	des.XAxis = canonicalizeDashboardWidgetXyChartXAxis(des.XAxis, initial.XAxis, opts...)
	des.YAxis = canonicalizeDashboardWidgetXyChartYAxis(des.YAxis, initial.YAxis, opts...)
	des.ChartOptions = canonicalizeDashboardWidgetXyChartChartOptions(des.ChartOptions, initial.ChartOptions, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChart(c *Client, des, nw *DashboardWidgetXyChart) *DashboardWidgetXyChart {
	if des == nil || nw == nil {
		return nw
	}

	nw.DataSets = canonicalizeNewDashboardWidgetXyChartDataSetsSlice(c, des.DataSets, nw.DataSets)
	nw.SourceDrilldown = canonicalizeNewDashboardWidgetXyChartSourceDrilldown(c, des.SourceDrilldown, nw.SourceDrilldown)
	nw.MetricDrilldown = canonicalizeNewDashboardWidgetXyChartMetricDrilldown(c, des.MetricDrilldown, nw.MetricDrilldown)
	if dcl.StringCanonicalize(des.TimeshiftDuration, nw.TimeshiftDuration) || dcl.IsZeroValue(des.TimeshiftDuration) {
		nw.TimeshiftDuration = des.TimeshiftDuration
	}
	nw.Thresholds = canonicalizeNewDashboardWidgetXyChartThresholdsSlice(c, des.Thresholds, nw.Thresholds)
	nw.XAxis = canonicalizeNewDashboardWidgetXyChartXAxis(c, des.XAxis, nw.XAxis)
	nw.YAxis = canonicalizeNewDashboardWidgetXyChartYAxis(c, des.YAxis, nw.YAxis)
	nw.ChartOptions = canonicalizeNewDashboardWidgetXyChartChartOptions(c, des.ChartOptions, nw.ChartOptions)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSet(c *Client, des, nw []DashboardWidgetXyChart) []DashboardWidgetXyChart {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChart
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChart(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSlice(c *Client, des, nw []DashboardWidgetXyChart) []DashboardWidgetXyChart {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChart
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChart(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSets(des, initial *DashboardWidgetXyChartDataSets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.TimeSeriesQuery = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQuery(des.TimeSeriesQuery, initial.TimeSeriesQuery, opts...)
	if dcl.IsZeroValue(des.PlotType) {
		des.PlotType = initial.PlotType
	}
	if dcl.StringCanonicalize(des.LegendTemplate, initial.LegendTemplate) || dcl.IsZeroValue(des.LegendTemplate) {
		des.LegendTemplate = initial.LegendTemplate
	}
	if dcl.StringCanonicalize(des.MinAlignmentPeriod, initial.MinAlignmentPeriod) || dcl.IsZeroValue(des.MinAlignmentPeriod) {
		des.MinAlignmentPeriod = initial.MinAlignmentPeriod
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSets(c *Client, des, nw *DashboardWidgetXyChartDataSets) *DashboardWidgetXyChartDataSets {
	if des == nil || nw == nil {
		return nw
	}

	nw.TimeSeriesQuery = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, des.TimeSeriesQuery, nw.TimeSeriesQuery)
	if dcl.StringCanonicalize(des.LegendTemplate, nw.LegendTemplate) || dcl.IsZeroValue(des.LegendTemplate) {
		nw.LegendTemplate = des.LegendTemplate
	}
	if dcl.StringCanonicalize(des.MinAlignmentPeriod, nw.MinAlignmentPeriod) || dcl.IsZeroValue(des.MinAlignmentPeriod) {
		nw.MinAlignmentPeriod = des.MinAlignmentPeriod
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsSet(c *Client, des, nw []DashboardWidgetXyChartDataSets) []DashboardWidgetXyChartDataSets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSets) []DashboardWidgetXyChartDataSets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQuery(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQuery, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQuery {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.TimeSeriesFilter = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(des.TimeSeriesFilter, initial.TimeSeriesFilter, opts...)
	des.TimeSeriesFilterRatio = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(des.TimeSeriesFilterRatio, initial.TimeSeriesFilterRatio, opts...)
	if dcl.StringCanonicalize(des.TimeSeriesQueryLanguage, initial.TimeSeriesQueryLanguage) || dcl.IsZeroValue(des.TimeSeriesQueryLanguage) {
		des.TimeSeriesQueryLanguage = initial.TimeSeriesQueryLanguage
	}
	if dcl.IsZeroValue(des.ApiSource) {
		des.ApiSource = initial.ApiSource
	}
	if dcl.StringCanonicalize(des.UnitOverride, initial.UnitOverride) || dcl.IsZeroValue(des.UnitOverride) {
		des.UnitOverride = initial.UnitOverride
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQuery(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQuery) *DashboardWidgetXyChartDataSetsTimeSeriesQuery {
	if des == nil || nw == nil {
		return nw
	}

	nw.TimeSeriesFilter = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, des.TimeSeriesFilter, nw.TimeSeriesFilter)
	nw.TimeSeriesFilterRatio = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, des.TimeSeriesFilterRatio, nw.TimeSeriesFilterRatio)
	if dcl.StringCanonicalize(des.TimeSeriesQueryLanguage, nw.TimeSeriesQueryLanguage) || dcl.IsZeroValue(des.TimeSeriesQueryLanguage) {
		nw.TimeSeriesQueryLanguage = des.TimeSeriesQueryLanguage
	}
	if dcl.StringCanonicalize(des.UnitOverride, nw.UnitOverride) || dcl.IsZeroValue(des.UnitOverride) {
		nw.UnitOverride = des.UnitOverride
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQuerySet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQuery) []DashboardWidgetXyChartDataSetsTimeSeriesQuery {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQuery
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQuerySlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQuery) []DashboardWidgetXyChartDataSetsTimeSeriesQuery {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQuery
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Filter, initial.Filter) || dcl.IsZeroValue(des.Filter) {
		des.Filter = initial.Filter
	}
	des.Aggregation = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(des.Aggregation, initial.Aggregation, opts...)
	des.SecondaryAggregation = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(des.SecondaryAggregation, initial.SecondaryAggregation, opts...)
	des.PickTimeSeriesFilter = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(des.PickTimeSeriesFilter, initial.PickTimeSeriesFilter, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Filter, nw.Filter) || dcl.IsZeroValue(des.Filter) {
		nw.Filter = des.Filter
	}
	nw.Aggregation = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, des.Aggregation, nw.Aggregation)
	nw.SecondaryAggregation = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, des.SecondaryAggregation, nw.SecondaryAggregation)
	nw.PickTimeSeriesFilter = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, des.PickTimeSeriesFilter, nw.PickTimeSeriesFilter)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, initial.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		des.AlignmentPeriod = initial.AlignmentPeriod
	}
	if dcl.IsZeroValue(des.PerSeriesAligner) {
		des.PerSeriesAligner = initial.PerSeriesAligner
	}
	if dcl.IsZeroValue(des.CrossSeriesReducer) {
		des.CrossSeriesReducer = initial.CrossSeriesReducer
	}
	if dcl.IsZeroValue(des.GroupByFields) {
		des.GroupByFields = initial.GroupByFields
	}
	des.ReduceFractionLessThanParams = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(des.ReduceFractionLessThanParams, initial.ReduceFractionLessThanParams, opts...)
	des.ReduceMakeDistributionParams = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(des.ReduceMakeDistributionParams, initial.ReduceMakeDistributionParams, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, nw.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		nw.AlignmentPeriod = des.AlignmentPeriod
	}
	nw.ReduceFractionLessThanParams = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, des.ReduceFractionLessThanParams, nw.ReduceFractionLessThanParams)
	nw.ReduceMakeDistributionParams = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, des.ReduceMakeDistributionParams, nw.ReduceMakeDistributionParams)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Threshold) {
		des.Threshold = initial.Threshold
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.BucketOptions = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(des.BucketOptions, initial.BucketOptions, opts...)
	des.ExemplarSampling = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(des.ExemplarSampling, initial.ExemplarSampling, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	if des == nil || nw == nil {
		return nw
	}

	nw.BucketOptions = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, des.BucketOptions, nw.BucketOptions)
	nw.ExemplarSampling = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, des.ExemplarSampling, nw.ExemplarSampling)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.LinearBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des.LinearBuckets, initial.LinearBuckets, opts...)
	des.ExponentialBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des.ExponentialBuckets, initial.ExponentialBuckets, opts...)
	des.ExplicitBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des.ExplicitBuckets, initial.ExplicitBuckets, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil || nw == nil {
		return nw
	}

	nw.LinearBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, des.LinearBuckets, nw.LinearBuckets)
	nw.ExponentialBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, des.ExponentialBuckets, nw.ExponentialBuckets)
	nw.ExplicitBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, des.ExplicitBuckets, nw.ExplicitBuckets)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Offset) {
		des.Offset = initial.Offset
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.GrowthFactor) {
		des.GrowthFactor = initial.GrowthFactor
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Bounds) {
		des.Bounds = initial.Bounds
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.MinimumValue) {
		des.MinimumValue = initial.MinimumValue
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, initial.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		des.AlignmentPeriod = initial.AlignmentPeriod
	}
	if dcl.IsZeroValue(des.PerSeriesAligner) {
		des.PerSeriesAligner = initial.PerSeriesAligner
	}
	if dcl.IsZeroValue(des.CrossSeriesReducer) {
		des.CrossSeriesReducer = initial.CrossSeriesReducer
	}
	if dcl.IsZeroValue(des.GroupByFields) {
		des.GroupByFields = initial.GroupByFields
	}
	des.ReduceFractionLessThanParams = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(des.ReduceFractionLessThanParams, initial.ReduceFractionLessThanParams, opts...)
	des.ReduceMakeDistributionParams = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(des.ReduceMakeDistributionParams, initial.ReduceMakeDistributionParams, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, nw.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		nw.AlignmentPeriod = des.AlignmentPeriod
	}
	nw.ReduceFractionLessThanParams = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, des.ReduceFractionLessThanParams, nw.ReduceFractionLessThanParams)
	nw.ReduceMakeDistributionParams = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, des.ReduceMakeDistributionParams, nw.ReduceMakeDistributionParams)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Threshold) {
		des.Threshold = initial.Threshold
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.BucketOptions = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(des.BucketOptions, initial.BucketOptions, opts...)
	des.ExemplarSampling = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(des.ExemplarSampling, initial.ExemplarSampling, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	if des == nil || nw == nil {
		return nw
	}

	nw.BucketOptions = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, des.BucketOptions, nw.BucketOptions)
	nw.ExemplarSampling = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, des.ExemplarSampling, nw.ExemplarSampling)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.LinearBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des.LinearBuckets, initial.LinearBuckets, opts...)
	des.ExponentialBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des.ExponentialBuckets, initial.ExponentialBuckets, opts...)
	des.ExplicitBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des.ExplicitBuckets, initial.ExplicitBuckets, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil || nw == nil {
		return nw
	}

	nw.LinearBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, des.LinearBuckets, nw.LinearBuckets)
	nw.ExponentialBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, des.ExponentialBuckets, nw.ExponentialBuckets)
	nw.ExplicitBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, des.ExplicitBuckets, nw.ExplicitBuckets)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Offset) {
		des.Offset = initial.Offset
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.GrowthFactor) {
		des.GrowthFactor = initial.GrowthFactor
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Bounds) {
		des.Bounds = initial.Bounds
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.MinimumValue) {
		des.MinimumValue = initial.MinimumValue
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.RankingMethod) {
		des.RankingMethod = initial.RankingMethod
	}
	if dcl.IsZeroValue(des.NumTimeSeries) {
		des.NumTimeSeries = initial.NumTimeSeries
	}
	if dcl.IsZeroValue(des.Direction) {
		des.Direction = initial.Direction
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.Numerator = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(des.Numerator, initial.Numerator, opts...)
	des.Denominator = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(des.Denominator, initial.Denominator, opts...)
	des.SecondaryAggregation = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(des.SecondaryAggregation, initial.SecondaryAggregation, opts...)
	des.PickTimeSeriesFilter = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(des.PickTimeSeriesFilter, initial.PickTimeSeriesFilter, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio {
	if des == nil || nw == nil {
		return nw
	}

	nw.Numerator = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, des.Numerator, nw.Numerator)
	nw.Denominator = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, des.Denominator, nw.Denominator)
	nw.SecondaryAggregation = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, des.SecondaryAggregation, nw.SecondaryAggregation)
	nw.PickTimeSeriesFilter = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, des.PickTimeSeriesFilter, nw.PickTimeSeriesFilter)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Filter, initial.Filter) || dcl.IsZeroValue(des.Filter) {
		des.Filter = initial.Filter
	}
	des.Aggregation = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(des.Aggregation, initial.Aggregation, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Filter, nw.Filter) || dcl.IsZeroValue(des.Filter) {
		nw.Filter = des.Filter
	}
	nw.Aggregation = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, des.Aggregation, nw.Aggregation)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, initial.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		des.AlignmentPeriod = initial.AlignmentPeriod
	}
	if dcl.IsZeroValue(des.PerSeriesAligner) {
		des.PerSeriesAligner = initial.PerSeriesAligner
	}
	if dcl.IsZeroValue(des.CrossSeriesReducer) {
		des.CrossSeriesReducer = initial.CrossSeriesReducer
	}
	if dcl.IsZeroValue(des.GroupByFields) {
		des.GroupByFields = initial.GroupByFields
	}
	des.ReduceFractionLessThanParams = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(des.ReduceFractionLessThanParams, initial.ReduceFractionLessThanParams, opts...)
	des.ReduceMakeDistributionParams = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(des.ReduceMakeDistributionParams, initial.ReduceMakeDistributionParams, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, nw.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		nw.AlignmentPeriod = des.AlignmentPeriod
	}
	nw.ReduceFractionLessThanParams = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, des.ReduceFractionLessThanParams, nw.ReduceFractionLessThanParams)
	nw.ReduceMakeDistributionParams = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, des.ReduceMakeDistributionParams, nw.ReduceMakeDistributionParams)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Threshold) {
		des.Threshold = initial.Threshold
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.BucketOptions = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(des.BucketOptions, initial.BucketOptions, opts...)
	des.ExemplarSampling = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(des.ExemplarSampling, initial.ExemplarSampling, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	if des == nil || nw == nil {
		return nw
	}

	nw.BucketOptions = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, des.BucketOptions, nw.BucketOptions)
	nw.ExemplarSampling = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, des.ExemplarSampling, nw.ExemplarSampling)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.LinearBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des.LinearBuckets, initial.LinearBuckets, opts...)
	des.ExponentialBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des.ExponentialBuckets, initial.ExponentialBuckets, opts...)
	des.ExplicitBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des.ExplicitBuckets, initial.ExplicitBuckets, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil || nw == nil {
		return nw
	}

	nw.LinearBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, des.LinearBuckets, nw.LinearBuckets)
	nw.ExponentialBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, des.ExponentialBuckets, nw.ExponentialBuckets)
	nw.ExplicitBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, des.ExplicitBuckets, nw.ExplicitBuckets)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Offset) {
		des.Offset = initial.Offset
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.GrowthFactor) {
		des.GrowthFactor = initial.GrowthFactor
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Bounds) {
		des.Bounds = initial.Bounds
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.MinimumValue) {
		des.MinimumValue = initial.MinimumValue
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Filter, initial.Filter) || dcl.IsZeroValue(des.Filter) {
		des.Filter = initial.Filter
	}
	des.Aggregation = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(des.Aggregation, initial.Aggregation, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Filter, nw.Filter) || dcl.IsZeroValue(des.Filter) {
		nw.Filter = des.Filter
	}
	nw.Aggregation = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, des.Aggregation, nw.Aggregation)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, initial.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		des.AlignmentPeriod = initial.AlignmentPeriod
	}
	if dcl.IsZeroValue(des.PerSeriesAligner) {
		des.PerSeriesAligner = initial.PerSeriesAligner
	}
	if dcl.IsZeroValue(des.CrossSeriesReducer) {
		des.CrossSeriesReducer = initial.CrossSeriesReducer
	}
	if dcl.IsZeroValue(des.GroupByFields) {
		des.GroupByFields = initial.GroupByFields
	}
	des.ReduceFractionLessThanParams = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(des.ReduceFractionLessThanParams, initial.ReduceFractionLessThanParams, opts...)
	des.ReduceMakeDistributionParams = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(des.ReduceMakeDistributionParams, initial.ReduceMakeDistributionParams, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, nw.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		nw.AlignmentPeriod = des.AlignmentPeriod
	}
	nw.ReduceFractionLessThanParams = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, des.ReduceFractionLessThanParams, nw.ReduceFractionLessThanParams)
	nw.ReduceMakeDistributionParams = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, des.ReduceMakeDistributionParams, nw.ReduceMakeDistributionParams)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Threshold) {
		des.Threshold = initial.Threshold
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.BucketOptions = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(des.BucketOptions, initial.BucketOptions, opts...)
	des.ExemplarSampling = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(des.ExemplarSampling, initial.ExemplarSampling, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	if des == nil || nw == nil {
		return nw
	}

	nw.BucketOptions = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, des.BucketOptions, nw.BucketOptions)
	nw.ExemplarSampling = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, des.ExemplarSampling, nw.ExemplarSampling)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.LinearBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des.LinearBuckets, initial.LinearBuckets, opts...)
	des.ExponentialBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des.ExponentialBuckets, initial.ExponentialBuckets, opts...)
	des.ExplicitBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des.ExplicitBuckets, initial.ExplicitBuckets, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil || nw == nil {
		return nw
	}

	nw.LinearBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, des.LinearBuckets, nw.LinearBuckets)
	nw.ExponentialBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, des.ExponentialBuckets, nw.ExponentialBuckets)
	nw.ExplicitBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, des.ExplicitBuckets, nw.ExplicitBuckets)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Offset) {
		des.Offset = initial.Offset
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.GrowthFactor) {
		des.GrowthFactor = initial.GrowthFactor
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Bounds) {
		des.Bounds = initial.Bounds
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.MinimumValue) {
		des.MinimumValue = initial.MinimumValue
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, initial.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		des.AlignmentPeriod = initial.AlignmentPeriod
	}
	if dcl.IsZeroValue(des.PerSeriesAligner) {
		des.PerSeriesAligner = initial.PerSeriesAligner
	}
	if dcl.IsZeroValue(des.CrossSeriesReducer) {
		des.CrossSeriesReducer = initial.CrossSeriesReducer
	}
	if dcl.IsZeroValue(des.GroupByFields) {
		des.GroupByFields = initial.GroupByFields
	}
	des.ReduceFractionLessThanParams = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(des.ReduceFractionLessThanParams, initial.ReduceFractionLessThanParams, opts...)
	des.ReduceMakeDistributionParams = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(des.ReduceMakeDistributionParams, initial.ReduceMakeDistributionParams, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, nw.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		nw.AlignmentPeriod = des.AlignmentPeriod
	}
	nw.ReduceFractionLessThanParams = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, des.ReduceFractionLessThanParams, nw.ReduceFractionLessThanParams)
	nw.ReduceMakeDistributionParams = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, des.ReduceMakeDistributionParams, nw.ReduceMakeDistributionParams)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Threshold) {
		des.Threshold = initial.Threshold
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.BucketOptions = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(des.BucketOptions, initial.BucketOptions, opts...)
	des.ExemplarSampling = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(des.ExemplarSampling, initial.ExemplarSampling, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	if des == nil || nw == nil {
		return nw
	}

	nw.BucketOptions = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, des.BucketOptions, nw.BucketOptions)
	nw.ExemplarSampling = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, des.ExemplarSampling, nw.ExemplarSampling)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.LinearBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des.LinearBuckets, initial.LinearBuckets, opts...)
	des.ExponentialBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des.ExponentialBuckets, initial.ExponentialBuckets, opts...)
	des.ExplicitBuckets = canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des.ExplicitBuckets, initial.ExplicitBuckets, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil || nw == nil {
		return nw
	}

	nw.LinearBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, des.LinearBuckets, nw.LinearBuckets)
	nw.ExponentialBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, des.ExponentialBuckets, nw.ExponentialBuckets)
	nw.ExplicitBuckets = canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, des.ExplicitBuckets, nw.ExplicitBuckets)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Offset) {
		des.Offset = initial.Offset
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.GrowthFactor) {
		des.GrowthFactor = initial.GrowthFactor
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Bounds) {
		des.Bounds = initial.Bounds
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.MinimumValue) {
		des.MinimumValue = initial.MinimumValue
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(des, initial *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, opts ...dcl.ApplyOption) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.RankingMethod) {
		des.RankingMethod = initial.RankingMethod
	}
	if dcl.IsZeroValue(des.NumTimeSeries) {
		des.NumTimeSeries = initial.NumTimeSeries
	}
	if dcl.IsZeroValue(des.Direction) {
		des.Direction = initial.Direction
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c *Client, des, nw *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSet(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice(c *Client, des, nw []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartSourceDrilldown(des, initial *DashboardWidgetXyChartSourceDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetXyChartSourceDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.ResourceTypeDrilldown = canonicalizeDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(des.ResourceTypeDrilldown, initial.ResourceTypeDrilldown, opts...)
	if dcl.IsZeroValue(des.ResourceLabelDrilldowns) {
		des.ResourceLabelDrilldowns = initial.ResourceLabelDrilldowns
	}
	if dcl.IsZeroValue(des.MetadataSystemLabelDrilldowns) {
		des.MetadataSystemLabelDrilldowns = initial.MetadataSystemLabelDrilldowns
	}
	if dcl.IsZeroValue(des.MetadataUserLabelDrilldowns) {
		des.MetadataUserLabelDrilldowns = initial.MetadataUserLabelDrilldowns
	}
	des.GroupNameDrilldown = canonicalizeDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(des.GroupNameDrilldown, initial.GroupNameDrilldown, opts...)
	des.ServiceNameDrilldown = canonicalizeDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(des.ServiceNameDrilldown, initial.ServiceNameDrilldown, opts...)
	des.ServiceTypeDrilldown = canonicalizeDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(des.ServiceTypeDrilldown, initial.ServiceTypeDrilldown, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldown(c *Client, des, nw *DashboardWidgetXyChartSourceDrilldown) *DashboardWidgetXyChartSourceDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	nw.ResourceTypeDrilldown = canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, des.ResourceTypeDrilldown, nw.ResourceTypeDrilldown)
	nw.ResourceLabelDrilldowns = canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsSlice(c, des.ResourceLabelDrilldowns, nw.ResourceLabelDrilldowns)
	nw.MetadataSystemLabelDrilldowns = canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsSlice(c, des.MetadataSystemLabelDrilldowns, nw.MetadataSystemLabelDrilldowns)
	nw.MetadataUserLabelDrilldowns = canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsSlice(c, des.MetadataUserLabelDrilldowns, nw.MetadataUserLabelDrilldowns)
	nw.GroupNameDrilldown = canonicalizeNewDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, des.GroupNameDrilldown, nw.GroupNameDrilldown)
	nw.ServiceNameDrilldown = canonicalizeNewDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, des.ServiceNameDrilldown, nw.ServiceNameDrilldown)
	nw.ServiceTypeDrilldown = canonicalizeNewDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, des.ServiceTypeDrilldown, nw.ServiceTypeDrilldown)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownSet(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldown) []DashboardWidgetXyChartSourceDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartSourceDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartSourceDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownSlice(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldown) []DashboardWidgetXyChartSourceDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartSourceDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartSourceDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(des, initial *DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.TargetValues) {
		des.TargetValues = initial.TargetValues
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c *Client, des, nw *DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown) *DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownSet(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown) []DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownSlice(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown) []DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(des, initial *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns, opts ...dcl.ApplyOption) *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.LogicalOperator) {
		des.LogicalOperator = initial.LogicalOperator
	}
	if dcl.IsZeroValue(des.ValueRestrictions) {
		des.ValueRestrictions = initial.ValueRestrictions
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c *Client, des, nw *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns) *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}
	nw.ValueRestrictions = canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c, des.ValueRestrictions, nw.ValueRestrictions)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsSet(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns) []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsSlice(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns) []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(des, initial *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions, opts ...dcl.ApplyOption) *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.TargetValue, initial.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		des.TargetValue = initial.TargetValue
	}
	if dcl.IsZeroValue(des.Comparator) {
		des.Comparator = initial.Comparator
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c *Client, des, nw *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions) *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.TargetValue, nw.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		nw.TargetValue = des.TargetValue
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsSet(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions) []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions) []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(des, initial *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns, opts ...dcl.ApplyOption) *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.LogicalOperator) {
		des.LogicalOperator = initial.LogicalOperator
	}
	if dcl.IsZeroValue(des.ValueRestrictions) {
		des.ValueRestrictions = initial.ValueRestrictions
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c *Client, des, nw *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns) *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}
	nw.ValueRestrictions = canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c, des.ValueRestrictions, nw.ValueRestrictions)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsSet(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns) []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsSlice(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns) []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(des, initial *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, opts ...dcl.ApplyOption) *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.TargetValue, initial.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		des.TargetValue = initial.TargetValue
	}
	if dcl.IsZeroValue(des.Comparator) {
		des.Comparator = initial.Comparator
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c *Client, des, nw *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.TargetValue, nw.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		nw.TargetValue = des.TargetValue
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSet(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(des, initial *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns, opts ...dcl.ApplyOption) *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.LogicalOperator) {
		des.LogicalOperator = initial.LogicalOperator
	}
	if dcl.IsZeroValue(des.ValueRestrictions) {
		des.ValueRestrictions = initial.ValueRestrictions
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c *Client, des, nw *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns) *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}
	nw.ValueRestrictions = canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c, des.ValueRestrictions, nw.ValueRestrictions)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsSet(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns) []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsSlice(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns) []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(des, initial *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, opts ...dcl.ApplyOption) *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.TargetValue, initial.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		des.TargetValue = initial.TargetValue
	}
	if dcl.IsZeroValue(des.Comparator) {
		des.Comparator = initial.Comparator
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c *Client, des, nw *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.TargetValue, nw.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		nw.TargetValue = des.TargetValue
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSet(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(des, initial *DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.TargetValues) {
		des.TargetValues = initial.TargetValues
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c *Client, des, nw *DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown) *DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownSet(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown) []DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownSlice(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown) []DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(des, initial *DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.TargetValues) {
		des.TargetValues = initial.TargetValues
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c *Client, des, nw *DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown) *DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownSet(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown) []DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownSlice(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown) []DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(des, initial *DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Types) {
		des.Types = initial.Types
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c *Client, des, nw *DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown) *DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownSet(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown) []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownSlice(c *Client, des, nw []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown) []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartMetricDrilldown(des, initial *DashboardWidgetXyChartMetricDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetXyChartMetricDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.MetricTypeDrilldown = canonicalizeDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(des.MetricTypeDrilldown, initial.MetricTypeDrilldown, opts...)
	if dcl.IsZeroValue(des.MetricLabelDrilldowns) {
		des.MetricLabelDrilldowns = initial.MetricLabelDrilldowns
	}
	des.MetricGroupByDrilldown = canonicalizeDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(des.MetricGroupByDrilldown, initial.MetricGroupByDrilldown, opts...)

	return des
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldown(c *Client, des, nw *DashboardWidgetXyChartMetricDrilldown) *DashboardWidgetXyChartMetricDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	nw.MetricTypeDrilldown = canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, des.MetricTypeDrilldown, nw.MetricTypeDrilldown)
	nw.MetricLabelDrilldowns = canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsSlice(c, des.MetricLabelDrilldowns, nw.MetricLabelDrilldowns)
	nw.MetricGroupByDrilldown = canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, des.MetricGroupByDrilldown, nw.MetricGroupByDrilldown)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownSet(c *Client, des, nw []DashboardWidgetXyChartMetricDrilldown) []DashboardWidgetXyChartMetricDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartMetricDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartMetricDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownSlice(c *Client, des, nw []DashboardWidgetXyChartMetricDrilldown) []DashboardWidgetXyChartMetricDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartMetricDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartMetricDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(des, initial *DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.TargetValue, initial.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		des.TargetValue = initial.TargetValue
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c *Client, des, nw *DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown) *DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.TargetValue, nw.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		nw.TargetValue = des.TargetValue
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownSet(c *Client, des, nw []DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown) []DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownSlice(c *Client, des, nw []DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown) []DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(des, initial *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns, opts ...dcl.ApplyOption) *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.LogicalOperator) {
		des.LogicalOperator = initial.LogicalOperator
	}
	if dcl.IsZeroValue(des.ValueRestrictions) {
		des.ValueRestrictions = initial.ValueRestrictions
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c *Client, des, nw *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns) *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}
	nw.ValueRestrictions = canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c, des.ValueRestrictions, nw.ValueRestrictions)

	return nw
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsSet(c *Client, des, nw []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns) []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsSlice(c *Client, des, nw []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns) []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(des, initial *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions, opts ...dcl.ApplyOption) *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.TargetValue, initial.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		des.TargetValue = initial.TargetValue
	}
	if dcl.IsZeroValue(des.Comparator) {
		des.Comparator = initial.Comparator
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c *Client, des, nw *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions) *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.TargetValue, nw.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		nw.TargetValue = des.TargetValue
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsSet(c *Client, des, nw []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions) []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c *Client, des, nw []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions) []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(des, initial *DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.ResourceLabels) {
		des.ResourceLabels = initial.ResourceLabels
	}
	if dcl.IsZeroValue(des.MetricLabels) {
		des.MetricLabels = initial.MetricLabels
	}
	if dcl.IsZeroValue(des.MetadataSystemLabels) {
		des.MetadataSystemLabels = initial.MetadataSystemLabels
	}
	if dcl.IsZeroValue(des.MetadataUserLabels) {
		des.MetadataUserLabels = initial.MetadataUserLabels
	}
	if dcl.IsZeroValue(des.Reducer) {
		des.Reducer = initial.Reducer
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c *Client, des, nw *DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown) *DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownSet(c *Client, des, nw []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown) []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownSlice(c *Client, des, nw []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown) []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartThresholds(des, initial *DashboardWidgetXyChartThresholds, opts ...dcl.ApplyOption) *DashboardWidgetXyChartThresholds {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.Value) {
		des.Value = initial.Value
	}
	if dcl.IsZeroValue(des.Color) {
		des.Color = initial.Color
	}
	if dcl.IsZeroValue(des.Direction) {
		des.Direction = initial.Direction
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartThresholds(c *Client, des, nw *DashboardWidgetXyChartThresholds) *DashboardWidgetXyChartThresholds {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartThresholdsSet(c *Client, des, nw []DashboardWidgetXyChartThresholds) []DashboardWidgetXyChartThresholds {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartThresholds
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartThresholds(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartThresholdsSlice(c *Client, des, nw []DashboardWidgetXyChartThresholds) []DashboardWidgetXyChartThresholds {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartThresholds
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartThresholds(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartXAxis(des, initial *DashboardWidgetXyChartXAxis, opts ...dcl.ApplyOption) *DashboardWidgetXyChartXAxis {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartXAxis(c *Client, des, nw *DashboardWidgetXyChartXAxis) *DashboardWidgetXyChartXAxis {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartXAxisSet(c *Client, des, nw []DashboardWidgetXyChartXAxis) []DashboardWidgetXyChartXAxis {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartXAxis
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartXAxis(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartXAxisSlice(c *Client, des, nw []DashboardWidgetXyChartXAxis) []DashboardWidgetXyChartXAxis {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartXAxis
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartXAxis(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartYAxis(des, initial *DashboardWidgetXyChartYAxis, opts ...dcl.ApplyOption) *DashboardWidgetXyChartYAxis {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartYAxis(c *Client, des, nw *DashboardWidgetXyChartYAxis) *DashboardWidgetXyChartYAxis {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartYAxisSet(c *Client, des, nw []DashboardWidgetXyChartYAxis) []DashboardWidgetXyChartYAxis {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartYAxis
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartYAxis(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartYAxisSlice(c *Client, des, nw []DashboardWidgetXyChartYAxis) []DashboardWidgetXyChartYAxis {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartYAxis
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartYAxis(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetXyChartChartOptions(des, initial *DashboardWidgetXyChartChartOptions, opts ...dcl.ApplyOption) *DashboardWidgetXyChartChartOptions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Mode) {
		des.Mode = initial.Mode
	}
	if dcl.BoolCanonicalize(des.ShowLegend, initial.ShowLegend) || dcl.IsZeroValue(des.ShowLegend) {
		des.ShowLegend = initial.ShowLegend
	}

	return des
}

func canonicalizeNewDashboardWidgetXyChartChartOptions(c *Client, des, nw *DashboardWidgetXyChartChartOptions) *DashboardWidgetXyChartChartOptions {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.BoolCanonicalize(des.ShowLegend, nw.ShowLegend) || dcl.IsZeroValue(des.ShowLegend) {
		nw.ShowLegend = des.ShowLegend
	}

	return nw
}

func canonicalizeNewDashboardWidgetXyChartChartOptionsSet(c *Client, des, nw []DashboardWidgetXyChartChartOptions) []DashboardWidgetXyChartChartOptions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetXyChartChartOptions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetXyChartChartOptions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetXyChartChartOptionsSlice(c *Client, des, nw []DashboardWidgetXyChartChartOptions) []DashboardWidgetXyChartChartOptions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetXyChartChartOptions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetXyChartChartOptions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecard(des, initial *DashboardWidgetScorecard, opts ...dcl.ApplyOption) *DashboardWidgetScorecard {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.TimeSeriesQuery = canonicalizeDashboardWidgetScorecardTimeSeriesQuery(des.TimeSeriesQuery, initial.TimeSeriesQuery, opts...)
	des.SourceDrilldown = canonicalizeDashboardWidgetScorecardSourceDrilldown(des.SourceDrilldown, initial.SourceDrilldown, opts...)
	des.MetricDrilldown = canonicalizeDashboardWidgetScorecardMetricDrilldown(des.MetricDrilldown, initial.MetricDrilldown, opts...)
	des.GaugeView = canonicalizeDashboardWidgetScorecardGaugeView(des.GaugeView, initial.GaugeView, opts...)
	des.SparkChartView = canonicalizeDashboardWidgetScorecardSparkChartView(des.SparkChartView, initial.SparkChartView, opts...)
	if dcl.IsZeroValue(des.Thresholds) {
		des.Thresholds = initial.Thresholds
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecard(c *Client, des, nw *DashboardWidgetScorecard) *DashboardWidgetScorecard {
	if des == nil || nw == nil {
		return nw
	}

	nw.TimeSeriesQuery = canonicalizeNewDashboardWidgetScorecardTimeSeriesQuery(c, des.TimeSeriesQuery, nw.TimeSeriesQuery)
	nw.SourceDrilldown = canonicalizeNewDashboardWidgetScorecardSourceDrilldown(c, des.SourceDrilldown, nw.SourceDrilldown)
	nw.MetricDrilldown = canonicalizeNewDashboardWidgetScorecardMetricDrilldown(c, des.MetricDrilldown, nw.MetricDrilldown)
	nw.GaugeView = canonicalizeNewDashboardWidgetScorecardGaugeView(c, des.GaugeView, nw.GaugeView)
	nw.SparkChartView = canonicalizeNewDashboardWidgetScorecardSparkChartView(c, des.SparkChartView, nw.SparkChartView)
	nw.Thresholds = canonicalizeNewDashboardWidgetScorecardThresholdsSlice(c, des.Thresholds, nw.Thresholds)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSet(c *Client, des, nw []DashboardWidgetScorecard) []DashboardWidgetScorecard {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecard
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecard(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSlice(c *Client, des, nw []DashboardWidgetScorecard) []DashboardWidgetScorecard {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecard
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecard(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQuery(des, initial *DashboardWidgetScorecardTimeSeriesQuery, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQuery {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.TimeSeriesFilter = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(des.TimeSeriesFilter, initial.TimeSeriesFilter, opts...)
	des.TimeSeriesFilterRatio = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(des.TimeSeriesFilterRatio, initial.TimeSeriesFilterRatio, opts...)
	if dcl.StringCanonicalize(des.TimeSeriesQueryLanguage, initial.TimeSeriesQueryLanguage) || dcl.IsZeroValue(des.TimeSeriesQueryLanguage) {
		des.TimeSeriesQueryLanguage = initial.TimeSeriesQueryLanguage
	}
	if dcl.IsZeroValue(des.ApiSource) {
		des.ApiSource = initial.ApiSource
	}
	if dcl.StringCanonicalize(des.UnitOverride, initial.UnitOverride) || dcl.IsZeroValue(des.UnitOverride) {
		des.UnitOverride = initial.UnitOverride
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQuery(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQuery) *DashboardWidgetScorecardTimeSeriesQuery {
	if des == nil || nw == nil {
		return nw
	}

	nw.TimeSeriesFilter = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, des.TimeSeriesFilter, nw.TimeSeriesFilter)
	nw.TimeSeriesFilterRatio = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, des.TimeSeriesFilterRatio, nw.TimeSeriesFilterRatio)
	if dcl.StringCanonicalize(des.TimeSeriesQueryLanguage, nw.TimeSeriesQueryLanguage) || dcl.IsZeroValue(des.TimeSeriesQueryLanguage) {
		nw.TimeSeriesQueryLanguage = des.TimeSeriesQueryLanguage
	}
	if dcl.StringCanonicalize(des.UnitOverride, nw.UnitOverride) || dcl.IsZeroValue(des.UnitOverride) {
		nw.UnitOverride = des.UnitOverride
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQuerySet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQuery) []DashboardWidgetScorecardTimeSeriesQuery {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQuery
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQuery(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQuerySlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQuery) []DashboardWidgetScorecardTimeSeriesQuery {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQuery
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQuery(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Filter, initial.Filter) || dcl.IsZeroValue(des.Filter) {
		des.Filter = initial.Filter
	}
	des.Aggregation = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(des.Aggregation, initial.Aggregation, opts...)
	des.SecondaryAggregation = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(des.SecondaryAggregation, initial.SecondaryAggregation, opts...)
	des.PickTimeSeriesFilter = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(des.PickTimeSeriesFilter, initial.PickTimeSeriesFilter, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Filter, nw.Filter) || dcl.IsZeroValue(des.Filter) {
		nw.Filter = des.Filter
	}
	nw.Aggregation = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, des.Aggregation, nw.Aggregation)
	nw.SecondaryAggregation = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, des.SecondaryAggregation, nw.SecondaryAggregation)
	nw.PickTimeSeriesFilter = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, des.PickTimeSeriesFilter, nw.PickTimeSeriesFilter)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, initial.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		des.AlignmentPeriod = initial.AlignmentPeriod
	}
	if dcl.IsZeroValue(des.PerSeriesAligner) {
		des.PerSeriesAligner = initial.PerSeriesAligner
	}
	if dcl.IsZeroValue(des.CrossSeriesReducer) {
		des.CrossSeriesReducer = initial.CrossSeriesReducer
	}
	if dcl.IsZeroValue(des.GroupByFields) {
		des.GroupByFields = initial.GroupByFields
	}
	des.ReduceFractionLessThanParams = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(des.ReduceFractionLessThanParams, initial.ReduceFractionLessThanParams, opts...)
	des.ReduceMakeDistributionParams = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(des.ReduceMakeDistributionParams, initial.ReduceMakeDistributionParams, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, nw.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		nw.AlignmentPeriod = des.AlignmentPeriod
	}
	nw.ReduceFractionLessThanParams = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, des.ReduceFractionLessThanParams, nw.ReduceFractionLessThanParams)
	nw.ReduceMakeDistributionParams = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, des.ReduceMakeDistributionParams, nw.ReduceMakeDistributionParams)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Threshold) {
		des.Threshold = initial.Threshold
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.BucketOptions = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(des.BucketOptions, initial.BucketOptions, opts...)
	des.ExemplarSampling = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(des.ExemplarSampling, initial.ExemplarSampling, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	if des == nil || nw == nil {
		return nw
	}

	nw.BucketOptions = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, des.BucketOptions, nw.BucketOptions)
	nw.ExemplarSampling = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, des.ExemplarSampling, nw.ExemplarSampling)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.LinearBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des.LinearBuckets, initial.LinearBuckets, opts...)
	des.ExponentialBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des.ExponentialBuckets, initial.ExponentialBuckets, opts...)
	des.ExplicitBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des.ExplicitBuckets, initial.ExplicitBuckets, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil || nw == nil {
		return nw
	}

	nw.LinearBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, des.LinearBuckets, nw.LinearBuckets)
	nw.ExponentialBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, des.ExponentialBuckets, nw.ExponentialBuckets)
	nw.ExplicitBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, des.ExplicitBuckets, nw.ExplicitBuckets)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Offset) {
		des.Offset = initial.Offset
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.GrowthFactor) {
		des.GrowthFactor = initial.GrowthFactor
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Bounds) {
		des.Bounds = initial.Bounds
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.MinimumValue) {
		des.MinimumValue = initial.MinimumValue
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, initial.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		des.AlignmentPeriod = initial.AlignmentPeriod
	}
	if dcl.IsZeroValue(des.PerSeriesAligner) {
		des.PerSeriesAligner = initial.PerSeriesAligner
	}
	if dcl.IsZeroValue(des.CrossSeriesReducer) {
		des.CrossSeriesReducer = initial.CrossSeriesReducer
	}
	if dcl.IsZeroValue(des.GroupByFields) {
		des.GroupByFields = initial.GroupByFields
	}
	des.ReduceFractionLessThanParams = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(des.ReduceFractionLessThanParams, initial.ReduceFractionLessThanParams, opts...)
	des.ReduceMakeDistributionParams = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(des.ReduceMakeDistributionParams, initial.ReduceMakeDistributionParams, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, nw.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		nw.AlignmentPeriod = des.AlignmentPeriod
	}
	nw.ReduceFractionLessThanParams = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, des.ReduceFractionLessThanParams, nw.ReduceFractionLessThanParams)
	nw.ReduceMakeDistributionParams = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, des.ReduceMakeDistributionParams, nw.ReduceMakeDistributionParams)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Threshold) {
		des.Threshold = initial.Threshold
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.BucketOptions = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(des.BucketOptions, initial.BucketOptions, opts...)
	des.ExemplarSampling = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(des.ExemplarSampling, initial.ExemplarSampling, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	if des == nil || nw == nil {
		return nw
	}

	nw.BucketOptions = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, des.BucketOptions, nw.BucketOptions)
	nw.ExemplarSampling = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, des.ExemplarSampling, nw.ExemplarSampling)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.LinearBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des.LinearBuckets, initial.LinearBuckets, opts...)
	des.ExponentialBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des.ExponentialBuckets, initial.ExponentialBuckets, opts...)
	des.ExplicitBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des.ExplicitBuckets, initial.ExplicitBuckets, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil || nw == nil {
		return nw
	}

	nw.LinearBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, des.LinearBuckets, nw.LinearBuckets)
	nw.ExponentialBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, des.ExponentialBuckets, nw.ExponentialBuckets)
	nw.ExplicitBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, des.ExplicitBuckets, nw.ExplicitBuckets)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Offset) {
		des.Offset = initial.Offset
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.GrowthFactor) {
		des.GrowthFactor = initial.GrowthFactor
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Bounds) {
		des.Bounds = initial.Bounds
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.MinimumValue) {
		des.MinimumValue = initial.MinimumValue
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.RankingMethod) {
		des.RankingMethod = initial.RankingMethod
	}
	if dcl.IsZeroValue(des.NumTimeSeries) {
		des.NumTimeSeries = initial.NumTimeSeries
	}
	if dcl.IsZeroValue(des.Direction) {
		des.Direction = initial.Direction
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.Numerator = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(des.Numerator, initial.Numerator, opts...)
	des.Denominator = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(des.Denominator, initial.Denominator, opts...)
	des.SecondaryAggregation = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(des.SecondaryAggregation, initial.SecondaryAggregation, opts...)
	des.PickTimeSeriesFilter = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(des.PickTimeSeriesFilter, initial.PickTimeSeriesFilter, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio {
	if des == nil || nw == nil {
		return nw
	}

	nw.Numerator = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, des.Numerator, nw.Numerator)
	nw.Denominator = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, des.Denominator, nw.Denominator)
	nw.SecondaryAggregation = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, des.SecondaryAggregation, nw.SecondaryAggregation)
	nw.PickTimeSeriesFilter = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, des.PickTimeSeriesFilter, nw.PickTimeSeriesFilter)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Filter, initial.Filter) || dcl.IsZeroValue(des.Filter) {
		des.Filter = initial.Filter
	}
	des.Aggregation = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(des.Aggregation, initial.Aggregation, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Filter, nw.Filter) || dcl.IsZeroValue(des.Filter) {
		nw.Filter = des.Filter
	}
	nw.Aggregation = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, des.Aggregation, nw.Aggregation)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, initial.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		des.AlignmentPeriod = initial.AlignmentPeriod
	}
	if dcl.IsZeroValue(des.PerSeriesAligner) {
		des.PerSeriesAligner = initial.PerSeriesAligner
	}
	if dcl.IsZeroValue(des.CrossSeriesReducer) {
		des.CrossSeriesReducer = initial.CrossSeriesReducer
	}
	if dcl.IsZeroValue(des.GroupByFields) {
		des.GroupByFields = initial.GroupByFields
	}
	des.ReduceFractionLessThanParams = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(des.ReduceFractionLessThanParams, initial.ReduceFractionLessThanParams, opts...)
	des.ReduceMakeDistributionParams = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(des.ReduceMakeDistributionParams, initial.ReduceMakeDistributionParams, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, nw.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		nw.AlignmentPeriod = des.AlignmentPeriod
	}
	nw.ReduceFractionLessThanParams = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, des.ReduceFractionLessThanParams, nw.ReduceFractionLessThanParams)
	nw.ReduceMakeDistributionParams = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, des.ReduceMakeDistributionParams, nw.ReduceMakeDistributionParams)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Threshold) {
		des.Threshold = initial.Threshold
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.BucketOptions = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(des.BucketOptions, initial.BucketOptions, opts...)
	des.ExemplarSampling = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(des.ExemplarSampling, initial.ExemplarSampling, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	if des == nil || nw == nil {
		return nw
	}

	nw.BucketOptions = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, des.BucketOptions, nw.BucketOptions)
	nw.ExemplarSampling = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, des.ExemplarSampling, nw.ExemplarSampling)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.LinearBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des.LinearBuckets, initial.LinearBuckets, opts...)
	des.ExponentialBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des.ExponentialBuckets, initial.ExponentialBuckets, opts...)
	des.ExplicitBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des.ExplicitBuckets, initial.ExplicitBuckets, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil || nw == nil {
		return nw
	}

	nw.LinearBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, des.LinearBuckets, nw.LinearBuckets)
	nw.ExponentialBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, des.ExponentialBuckets, nw.ExponentialBuckets)
	nw.ExplicitBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, des.ExplicitBuckets, nw.ExplicitBuckets)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Offset) {
		des.Offset = initial.Offset
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.GrowthFactor) {
		des.GrowthFactor = initial.GrowthFactor
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Bounds) {
		des.Bounds = initial.Bounds
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.MinimumValue) {
		des.MinimumValue = initial.MinimumValue
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Filter, initial.Filter) || dcl.IsZeroValue(des.Filter) {
		des.Filter = initial.Filter
	}
	des.Aggregation = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(des.Aggregation, initial.Aggregation, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Filter, nw.Filter) || dcl.IsZeroValue(des.Filter) {
		nw.Filter = des.Filter
	}
	nw.Aggregation = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, des.Aggregation, nw.Aggregation)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, initial.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		des.AlignmentPeriod = initial.AlignmentPeriod
	}
	if dcl.IsZeroValue(des.PerSeriesAligner) {
		des.PerSeriesAligner = initial.PerSeriesAligner
	}
	if dcl.IsZeroValue(des.CrossSeriesReducer) {
		des.CrossSeriesReducer = initial.CrossSeriesReducer
	}
	if dcl.IsZeroValue(des.GroupByFields) {
		des.GroupByFields = initial.GroupByFields
	}
	des.ReduceFractionLessThanParams = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(des.ReduceFractionLessThanParams, initial.ReduceFractionLessThanParams, opts...)
	des.ReduceMakeDistributionParams = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(des.ReduceMakeDistributionParams, initial.ReduceMakeDistributionParams, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, nw.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		nw.AlignmentPeriod = des.AlignmentPeriod
	}
	nw.ReduceFractionLessThanParams = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, des.ReduceFractionLessThanParams, nw.ReduceFractionLessThanParams)
	nw.ReduceMakeDistributionParams = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, des.ReduceMakeDistributionParams, nw.ReduceMakeDistributionParams)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Threshold) {
		des.Threshold = initial.Threshold
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.BucketOptions = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(des.BucketOptions, initial.BucketOptions, opts...)
	des.ExemplarSampling = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(des.ExemplarSampling, initial.ExemplarSampling, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	if des == nil || nw == nil {
		return nw
	}

	nw.BucketOptions = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, des.BucketOptions, nw.BucketOptions)
	nw.ExemplarSampling = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, des.ExemplarSampling, nw.ExemplarSampling)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.LinearBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des.LinearBuckets, initial.LinearBuckets, opts...)
	des.ExponentialBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des.ExponentialBuckets, initial.ExponentialBuckets, opts...)
	des.ExplicitBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des.ExplicitBuckets, initial.ExplicitBuckets, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil || nw == nil {
		return nw
	}

	nw.LinearBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, des.LinearBuckets, nw.LinearBuckets)
	nw.ExponentialBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, des.ExponentialBuckets, nw.ExponentialBuckets)
	nw.ExplicitBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, des.ExplicitBuckets, nw.ExplicitBuckets)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Offset) {
		des.Offset = initial.Offset
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.GrowthFactor) {
		des.GrowthFactor = initial.GrowthFactor
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Bounds) {
		des.Bounds = initial.Bounds
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.MinimumValue) {
		des.MinimumValue = initial.MinimumValue
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, initial.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		des.AlignmentPeriod = initial.AlignmentPeriod
	}
	if dcl.IsZeroValue(des.PerSeriesAligner) {
		des.PerSeriesAligner = initial.PerSeriesAligner
	}
	if dcl.IsZeroValue(des.CrossSeriesReducer) {
		des.CrossSeriesReducer = initial.CrossSeriesReducer
	}
	if dcl.IsZeroValue(des.GroupByFields) {
		des.GroupByFields = initial.GroupByFields
	}
	des.ReduceFractionLessThanParams = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(des.ReduceFractionLessThanParams, initial.ReduceFractionLessThanParams, opts...)
	des.ReduceMakeDistributionParams = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(des.ReduceMakeDistributionParams, initial.ReduceMakeDistributionParams, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.AlignmentPeriod, nw.AlignmentPeriod) || dcl.IsZeroValue(des.AlignmentPeriod) {
		nw.AlignmentPeriod = des.AlignmentPeriod
	}
	nw.ReduceFractionLessThanParams = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, des.ReduceFractionLessThanParams, nw.ReduceFractionLessThanParams)
	nw.ReduceMakeDistributionParams = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, des.ReduceMakeDistributionParams, nw.ReduceMakeDistributionParams)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Threshold) {
		des.Threshold = initial.Threshold
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.BucketOptions = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(des.BucketOptions, initial.BucketOptions, opts...)
	des.ExemplarSampling = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(des.ExemplarSampling, initial.ExemplarSampling, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	if des == nil || nw == nil {
		return nw
	}

	nw.BucketOptions = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, des.BucketOptions, nw.BucketOptions)
	nw.ExemplarSampling = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, des.ExemplarSampling, nw.ExemplarSampling)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.LinearBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des.LinearBuckets, initial.LinearBuckets, opts...)
	des.ExponentialBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des.ExponentialBuckets, initial.ExponentialBuckets, opts...)
	des.ExplicitBuckets = canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des.ExplicitBuckets, initial.ExplicitBuckets, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil || nw == nil {
		return nw
	}

	nw.LinearBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, des.LinearBuckets, nw.LinearBuckets)
	nw.ExponentialBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, des.ExponentialBuckets, nw.ExponentialBuckets)
	nw.ExplicitBuckets = canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, des.ExplicitBuckets, nw.ExplicitBuckets)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Offset) {
		des.Offset = initial.Offset
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.NumFiniteBuckets) {
		des.NumFiniteBuckets = initial.NumFiniteBuckets
	}
	if dcl.IsZeroValue(des.GrowthFactor) {
		des.GrowthFactor = initial.GrowthFactor
	}
	if dcl.IsZeroValue(des.Scale) {
		des.Scale = initial.Scale
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Bounds) {
		des.Bounds = initial.Bounds
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.MinimumValue) {
		des.MinimumValue = initial.MinimumValue
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(des, initial *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, opts ...dcl.ApplyOption) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.RankingMethod) {
		des.RankingMethod = initial.RankingMethod
	}
	if dcl.IsZeroValue(des.NumTimeSeries) {
		des.NumTimeSeries = initial.NumTimeSeries
	}
	if dcl.IsZeroValue(des.Direction) {
		des.Direction = initial.Direction
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c *Client, des, nw *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSet(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice(c *Client, des, nw []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSourceDrilldown(des, initial *DashboardWidgetScorecardSourceDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSourceDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.ResourceTypeDrilldown = canonicalizeDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(des.ResourceTypeDrilldown, initial.ResourceTypeDrilldown, opts...)
	if dcl.IsZeroValue(des.ResourceLabelDrilldowns) {
		des.ResourceLabelDrilldowns = initial.ResourceLabelDrilldowns
	}
	if dcl.IsZeroValue(des.MetadataSystemLabelDrilldowns) {
		des.MetadataSystemLabelDrilldowns = initial.MetadataSystemLabelDrilldowns
	}
	if dcl.IsZeroValue(des.MetadataUserLabelDrilldowns) {
		des.MetadataUserLabelDrilldowns = initial.MetadataUserLabelDrilldowns
	}
	des.GroupNameDrilldown = canonicalizeDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(des.GroupNameDrilldown, initial.GroupNameDrilldown, opts...)
	des.ServiceNameDrilldown = canonicalizeDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(des.ServiceNameDrilldown, initial.ServiceNameDrilldown, opts...)
	des.ServiceTypeDrilldown = canonicalizeDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(des.ServiceTypeDrilldown, initial.ServiceTypeDrilldown, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldown(c *Client, des, nw *DashboardWidgetScorecardSourceDrilldown) *DashboardWidgetScorecardSourceDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	nw.ResourceTypeDrilldown = canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, des.ResourceTypeDrilldown, nw.ResourceTypeDrilldown)
	nw.ResourceLabelDrilldowns = canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsSlice(c, des.ResourceLabelDrilldowns, nw.ResourceLabelDrilldowns)
	nw.MetadataSystemLabelDrilldowns = canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsSlice(c, des.MetadataSystemLabelDrilldowns, nw.MetadataSystemLabelDrilldowns)
	nw.MetadataUserLabelDrilldowns = canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsSlice(c, des.MetadataUserLabelDrilldowns, nw.MetadataUserLabelDrilldowns)
	nw.GroupNameDrilldown = canonicalizeNewDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, des.GroupNameDrilldown, nw.GroupNameDrilldown)
	nw.ServiceNameDrilldown = canonicalizeNewDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, des.ServiceNameDrilldown, nw.ServiceNameDrilldown)
	nw.ServiceTypeDrilldown = canonicalizeNewDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, des.ServiceTypeDrilldown, nw.ServiceTypeDrilldown)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownSet(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldown) []DashboardWidgetScorecardSourceDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSourceDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSourceDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownSlice(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldown) []DashboardWidgetScorecardSourceDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSourceDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSourceDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(des, initial *DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.TargetValues) {
		des.TargetValues = initial.TargetValues
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c *Client, des, nw *DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown) *DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownSet(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown) []DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownSlice(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown) []DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(des, initial *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.LogicalOperator) {
		des.LogicalOperator = initial.LogicalOperator
	}
	if dcl.IsZeroValue(des.ValueRestrictions) {
		des.ValueRestrictions = initial.ValueRestrictions
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c *Client, des, nw *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns) *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}
	nw.ValueRestrictions = canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c, des.ValueRestrictions, nw.ValueRestrictions)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsSet(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns) []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsSlice(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns) []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(des, initial *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.TargetValue, initial.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		des.TargetValue = initial.TargetValue
	}
	if dcl.IsZeroValue(des.Comparator) {
		des.Comparator = initial.Comparator
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c *Client, des, nw *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions) *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.TargetValue, nw.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		nw.TargetValue = des.TargetValue
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsSet(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions) []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions) []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(des, initial *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.LogicalOperator) {
		des.LogicalOperator = initial.LogicalOperator
	}
	if dcl.IsZeroValue(des.ValueRestrictions) {
		des.ValueRestrictions = initial.ValueRestrictions
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c *Client, des, nw *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns) *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}
	nw.ValueRestrictions = canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c, des.ValueRestrictions, nw.ValueRestrictions)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsSet(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns) []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsSlice(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns) []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(des, initial *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.TargetValue, initial.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		des.TargetValue = initial.TargetValue
	}
	if dcl.IsZeroValue(des.Comparator) {
		des.Comparator = initial.Comparator
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c *Client, des, nw *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.TargetValue, nw.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		nw.TargetValue = des.TargetValue
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSet(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(des, initial *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.LogicalOperator) {
		des.LogicalOperator = initial.LogicalOperator
	}
	if dcl.IsZeroValue(des.ValueRestrictions) {
		des.ValueRestrictions = initial.ValueRestrictions
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c *Client, des, nw *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns) *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}
	nw.ValueRestrictions = canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c, des.ValueRestrictions, nw.ValueRestrictions)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsSet(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns) []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsSlice(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns) []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(des, initial *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.TargetValue, initial.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		des.TargetValue = initial.TargetValue
	}
	if dcl.IsZeroValue(des.Comparator) {
		des.Comparator = initial.Comparator
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c *Client, des, nw *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.TargetValue, nw.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		nw.TargetValue = des.TargetValue
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSet(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(des, initial *DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.TargetValues) {
		des.TargetValues = initial.TargetValues
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c *Client, des, nw *DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown) *DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownSet(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown) []DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownSlice(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown) []DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(des, initial *DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.TargetValues) {
		des.TargetValues = initial.TargetValues
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c *Client, des, nw *DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown) *DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownSet(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown) []DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownSlice(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown) []DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(des, initial *DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Types) {
		des.Types = initial.Types
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c *Client, des, nw *DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown) *DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownSet(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown) []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownSlice(c *Client, des, nw []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown) []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardMetricDrilldown(des, initial *DashboardWidgetScorecardMetricDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetScorecardMetricDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	des.MetricTypeDrilldown = canonicalizeDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(des.MetricTypeDrilldown, initial.MetricTypeDrilldown, opts...)
	if dcl.IsZeroValue(des.MetricLabelDrilldowns) {
		des.MetricLabelDrilldowns = initial.MetricLabelDrilldowns
	}
	des.MetricGroupByDrilldown = canonicalizeDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(des.MetricGroupByDrilldown, initial.MetricGroupByDrilldown, opts...)

	return des
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldown(c *Client, des, nw *DashboardWidgetScorecardMetricDrilldown) *DashboardWidgetScorecardMetricDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	nw.MetricTypeDrilldown = canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, des.MetricTypeDrilldown, nw.MetricTypeDrilldown)
	nw.MetricLabelDrilldowns = canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsSlice(c, des.MetricLabelDrilldowns, nw.MetricLabelDrilldowns)
	nw.MetricGroupByDrilldown = canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, des.MetricGroupByDrilldown, nw.MetricGroupByDrilldown)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownSet(c *Client, des, nw []DashboardWidgetScorecardMetricDrilldown) []DashboardWidgetScorecardMetricDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardMetricDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardMetricDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownSlice(c *Client, des, nw []DashboardWidgetScorecardMetricDrilldown) []DashboardWidgetScorecardMetricDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardMetricDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardMetricDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(des, initial *DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.TargetValue, initial.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		des.TargetValue = initial.TargetValue
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c *Client, des, nw *DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown) *DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.TargetValue, nw.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		nw.TargetValue = des.TargetValue
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownSet(c *Client, des, nw []DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown) []DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownSlice(c *Client, des, nw []DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown) []DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(des, initial *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns, opts ...dcl.ApplyOption) *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.LogicalOperator) {
		des.LogicalOperator = initial.LogicalOperator
	}
	if dcl.IsZeroValue(des.ValueRestrictions) {
		des.ValueRestrictions = initial.ValueRestrictions
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c *Client, des, nw *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns) *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}
	nw.ValueRestrictions = canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c, des.ValueRestrictions, nw.ValueRestrictions)

	return nw
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsSet(c *Client, des, nw []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns) []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsSlice(c *Client, des, nw []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns) []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(des, initial *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions, opts ...dcl.ApplyOption) *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.TargetValue, initial.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		des.TargetValue = initial.TargetValue
	}
	if dcl.IsZeroValue(des.Comparator) {
		des.Comparator = initial.Comparator
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c *Client, des, nw *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions) *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.TargetValue, nw.TargetValue) || dcl.IsZeroValue(des.TargetValue) {
		nw.TargetValue = des.TargetValue
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsSet(c *Client, des, nw []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions) []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c *Client, des, nw []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions) []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(des, initial *DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown, opts ...dcl.ApplyOption) *DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.ResourceLabels) {
		des.ResourceLabels = initial.ResourceLabels
	}
	if dcl.IsZeroValue(des.MetricLabels) {
		des.MetricLabels = initial.MetricLabels
	}
	if dcl.IsZeroValue(des.MetadataSystemLabels) {
		des.MetadataSystemLabels = initial.MetadataSystemLabels
	}
	if dcl.IsZeroValue(des.MetadataUserLabels) {
		des.MetadataUserLabels = initial.MetadataUserLabels
	}
	if dcl.IsZeroValue(des.Reducer) {
		des.Reducer = initial.Reducer
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c *Client, des, nw *DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown) *DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownSet(c *Client, des, nw []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown) []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownSlice(c *Client, des, nw []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown) []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardGaugeView(des, initial *DashboardWidgetScorecardGaugeView, opts ...dcl.ApplyOption) *DashboardWidgetScorecardGaugeView {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.LowerBound) {
		des.LowerBound = initial.LowerBound
	}
	if dcl.IsZeroValue(des.UpperBound) {
		des.UpperBound = initial.UpperBound
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardGaugeView(c *Client, des, nw *DashboardWidgetScorecardGaugeView) *DashboardWidgetScorecardGaugeView {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardGaugeViewSet(c *Client, des, nw []DashboardWidgetScorecardGaugeView) []DashboardWidgetScorecardGaugeView {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardGaugeView
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardGaugeView(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardGaugeViewSlice(c *Client, des, nw []DashboardWidgetScorecardGaugeView) []DashboardWidgetScorecardGaugeView {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardGaugeView
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardGaugeView(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardSparkChartView(des, initial *DashboardWidgetScorecardSparkChartView, opts ...dcl.ApplyOption) *DashboardWidgetScorecardSparkChartView {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.SparkChartType) {
		des.SparkChartType = initial.SparkChartType
	}
	if dcl.StringCanonicalize(des.MinAlignmentPeriod, initial.MinAlignmentPeriod) || dcl.IsZeroValue(des.MinAlignmentPeriod) {
		des.MinAlignmentPeriod = initial.MinAlignmentPeriod
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardSparkChartView(c *Client, des, nw *DashboardWidgetScorecardSparkChartView) *DashboardWidgetScorecardSparkChartView {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.MinAlignmentPeriod, nw.MinAlignmentPeriod) || dcl.IsZeroValue(des.MinAlignmentPeriod) {
		nw.MinAlignmentPeriod = des.MinAlignmentPeriod
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardSparkChartViewSet(c *Client, des, nw []DashboardWidgetScorecardSparkChartView) []DashboardWidgetScorecardSparkChartView {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardSparkChartView
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardSparkChartView(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardSparkChartViewSlice(c *Client, des, nw []DashboardWidgetScorecardSparkChartView) []DashboardWidgetScorecardSparkChartView {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardSparkChartView
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardSparkChartView(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetScorecardThresholds(des, initial *DashboardWidgetScorecardThresholds, opts ...dcl.ApplyOption) *DashboardWidgetScorecardThresholds {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.IsZeroValue(des.Value) {
		des.Value = initial.Value
	}
	if dcl.IsZeroValue(des.Color) {
		des.Color = initial.Color
	}
	if dcl.IsZeroValue(des.Direction) {
		des.Direction = initial.Direction
	}

	return des
}

func canonicalizeNewDashboardWidgetScorecardThresholds(c *Client, des, nw *DashboardWidgetScorecardThresholds) *DashboardWidgetScorecardThresholds {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}

	return nw
}

func canonicalizeNewDashboardWidgetScorecardThresholdsSet(c *Client, des, nw []DashboardWidgetScorecardThresholds) []DashboardWidgetScorecardThresholds {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetScorecardThresholds
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetScorecardThresholds(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetScorecardThresholdsSlice(c *Client, des, nw []DashboardWidgetScorecardThresholds) []DashboardWidgetScorecardThresholds {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetScorecardThresholds
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetScorecardThresholds(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetText(des, initial *DashboardWidgetText, opts ...dcl.ApplyOption) *DashboardWidgetText {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Content, initial.Content) || dcl.IsZeroValue(des.Content) {
		des.Content = initial.Content
	}
	if dcl.IsZeroValue(des.Format) {
		des.Format = initial.Format
	}

	return des
}

func canonicalizeNewDashboardWidgetText(c *Client, des, nw *DashboardWidgetText) *DashboardWidgetText {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Content, nw.Content) || dcl.IsZeroValue(des.Content) {
		nw.Content = des.Content
	}

	return nw
}

func canonicalizeNewDashboardWidgetTextSet(c *Client, des, nw []DashboardWidgetText) []DashboardWidgetText {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetText
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetText(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetTextSlice(c *Client, des, nw []DashboardWidgetText) []DashboardWidgetText {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetText
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetText(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardWidgetBlank(des, initial *DashboardWidgetBlank, opts ...dcl.ApplyOption) *DashboardWidgetBlank {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	return des
}

func canonicalizeNewDashboardWidgetBlank(c *Client, des, nw *DashboardWidgetBlank) *DashboardWidgetBlank {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardWidgetBlankSet(c *Client, des, nw []DashboardWidgetBlank) []DashboardWidgetBlank {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardWidgetBlank
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardWidgetBlank(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardWidgetBlankSlice(c *Client, des, nw []DashboardWidgetBlank) []DashboardWidgetBlank {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardWidgetBlank
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardWidgetBlank(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardGridLayout(des, initial *DashboardGridLayout, opts ...dcl.ApplyOption) *DashboardGridLayout {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Columns) {
		des.Columns = initial.Columns
	}
	if dcl.IsZeroValue(des.Widgets) {
		des.Widgets = initial.Widgets
	}

	return des
}

func canonicalizeNewDashboardGridLayout(c *Client, des, nw *DashboardGridLayout) *DashboardGridLayout {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardGridLayoutSet(c *Client, des, nw []DashboardGridLayout) []DashboardGridLayout {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardGridLayout
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardGridLayout(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardGridLayoutSlice(c *Client, des, nw []DashboardGridLayout) []DashboardGridLayout {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardGridLayout
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardGridLayout(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardMosaicLayout(des, initial *DashboardMosaicLayout, opts ...dcl.ApplyOption) *DashboardMosaicLayout {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Columns) {
		des.Columns = initial.Columns
	}
	if dcl.IsZeroValue(des.Tiles) {
		des.Tiles = initial.Tiles
	}

	return des
}

func canonicalizeNewDashboardMosaicLayout(c *Client, des, nw *DashboardMosaicLayout) *DashboardMosaicLayout {
	if des == nil || nw == nil {
		return nw
	}

	nw.Tiles = canonicalizeNewDashboardMosaicLayoutTilesSlice(c, des.Tiles, nw.Tiles)

	return nw
}

func canonicalizeNewDashboardMosaicLayoutSet(c *Client, des, nw []DashboardMosaicLayout) []DashboardMosaicLayout {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardMosaicLayout
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardMosaicLayout(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardMosaicLayoutSlice(c *Client, des, nw []DashboardMosaicLayout) []DashboardMosaicLayout {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardMosaicLayout
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardMosaicLayout(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardMosaicLayoutTiles(des, initial *DashboardMosaicLayoutTiles, opts ...dcl.ApplyOption) *DashboardMosaicLayoutTiles {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.XPos) {
		des.XPos = initial.XPos
	}
	if dcl.IsZeroValue(des.YPos) {
		des.YPos = initial.YPos
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Height) {
		des.Height = initial.Height
	}
	des.Widget = canonicalizeDashboardWidget(des.Widget, initial.Widget, opts...)

	return des
}

func canonicalizeNewDashboardMosaicLayoutTiles(c *Client, des, nw *DashboardMosaicLayoutTiles) *DashboardMosaicLayoutTiles {
	if des == nil || nw == nil {
		return nw
	}

	nw.Widget = canonicalizeNewDashboardWidget(c, des.Widget, nw.Widget)

	return nw
}

func canonicalizeNewDashboardMosaicLayoutTilesSet(c *Client, des, nw []DashboardMosaicLayoutTiles) []DashboardMosaicLayoutTiles {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardMosaicLayoutTiles
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardMosaicLayoutTiles(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardMosaicLayoutTilesSlice(c *Client, des, nw []DashboardMosaicLayoutTiles) []DashboardMosaicLayoutTiles {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardMosaicLayoutTiles
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardMosaicLayoutTiles(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardRowLayout(des, initial *DashboardRowLayout, opts ...dcl.ApplyOption) *DashboardRowLayout {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Rows) {
		des.Rows = initial.Rows
	}

	return des
}

func canonicalizeNewDashboardRowLayout(c *Client, des, nw *DashboardRowLayout) *DashboardRowLayout {
	if des == nil || nw == nil {
		return nw
	}

	nw.Rows = canonicalizeNewDashboardRowLayoutRowsSlice(c, des.Rows, nw.Rows)

	return nw
}

func canonicalizeNewDashboardRowLayoutSet(c *Client, des, nw []DashboardRowLayout) []DashboardRowLayout {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardRowLayout
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardRowLayout(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardRowLayoutSlice(c *Client, des, nw []DashboardRowLayout) []DashboardRowLayout {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardRowLayout
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardRowLayout(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardRowLayoutRows(des, initial *DashboardRowLayoutRows, opts ...dcl.ApplyOption) *DashboardRowLayoutRows {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Weight) {
		des.Weight = initial.Weight
	}
	if dcl.IsZeroValue(des.Widgets) {
		des.Widgets = initial.Widgets
	}

	return des
}

func canonicalizeNewDashboardRowLayoutRows(c *Client, des, nw *DashboardRowLayoutRows) *DashboardRowLayoutRows {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardRowLayoutRowsSet(c *Client, des, nw []DashboardRowLayoutRows) []DashboardRowLayoutRows {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardRowLayoutRows
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardRowLayoutRows(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardRowLayoutRowsSlice(c *Client, des, nw []DashboardRowLayoutRows) []DashboardRowLayoutRows {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardRowLayoutRows
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardRowLayoutRows(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardTabbedLayout(des, initial *DashboardTabbedLayout, opts ...dcl.ApplyOption) *DashboardTabbedLayout {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Tabs) {
		des.Tabs = initial.Tabs
	}
	des.FeaturedMosaicLayout = canonicalizeDashboardTabbedLayoutFeaturedMosaicLayout(des.FeaturedMosaicLayout, initial.FeaturedMosaicLayout, opts...)

	return des
}

func canonicalizeNewDashboardTabbedLayout(c *Client, des, nw *DashboardTabbedLayout) *DashboardTabbedLayout {
	if des == nil || nw == nil {
		return nw
	}

	nw.Tabs = canonicalizeNewDashboardTabbedLayoutTabsSlice(c, des.Tabs, nw.Tabs)
	nw.FeaturedMosaicLayout = canonicalizeNewDashboardTabbedLayoutFeaturedMosaicLayout(c, des.FeaturedMosaicLayout, nw.FeaturedMosaicLayout)

	return nw
}

func canonicalizeNewDashboardTabbedLayoutSet(c *Client, des, nw []DashboardTabbedLayout) []DashboardTabbedLayout {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardTabbedLayout
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardTabbedLayout(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardTabbedLayoutSlice(c *Client, des, nw []DashboardTabbedLayout) []DashboardTabbedLayout {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardTabbedLayout
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardTabbedLayout(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardTabbedLayoutTabs(des, initial *DashboardTabbedLayoutTabs, opts ...dcl.ApplyOption) *DashboardTabbedLayoutTabs {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.StringCanonicalize(des.Label, initial.Label) || dcl.IsZeroValue(des.Label) {
		des.Label = initial.Label
	}
	if dcl.StringCanonicalize(des.HintText, initial.HintText) || dcl.IsZeroValue(des.HintText) {
		des.HintText = initial.HintText
	}
	des.GridLayout = canonicalizeDashboardTabbedLayoutTabsGridLayout(des.GridLayout, initial.GridLayout, opts...)
	des.MosaicLayout = canonicalizeDashboardTabbedLayoutTabsMosaicLayout(des.MosaicLayout, initial.MosaicLayout, opts...)
	des.RowLayout = canonicalizeDashboardTabbedLayoutTabsRowLayout(des.RowLayout, initial.RowLayout, opts...)
	des.ColumnLayout = canonicalizeDashboardTabbedLayoutTabsColumnLayout(des.ColumnLayout, initial.ColumnLayout, opts...)

	return des
}

func canonicalizeNewDashboardTabbedLayoutTabs(c *Client, des, nw *DashboardTabbedLayoutTabs) *DashboardTabbedLayoutTabs {
	if des == nil || nw == nil {
		return nw
	}

	if dcl.StringCanonicalize(des.Label, nw.Label) || dcl.IsZeroValue(des.Label) {
		nw.Label = des.Label
	}
	if dcl.StringCanonicalize(des.HintText, nw.HintText) || dcl.IsZeroValue(des.HintText) {
		nw.HintText = des.HintText
	}
	nw.GridLayout = canonicalizeNewDashboardTabbedLayoutTabsGridLayout(c, des.GridLayout, nw.GridLayout)
	nw.MosaicLayout = canonicalizeNewDashboardTabbedLayoutTabsMosaicLayout(c, des.MosaicLayout, nw.MosaicLayout)
	nw.RowLayout = canonicalizeNewDashboardTabbedLayoutTabsRowLayout(c, des.RowLayout, nw.RowLayout)
	nw.ColumnLayout = canonicalizeNewDashboardTabbedLayoutTabsColumnLayout(c, des.ColumnLayout, nw.ColumnLayout)

	return nw
}

func canonicalizeNewDashboardTabbedLayoutTabsSet(c *Client, des, nw []DashboardTabbedLayoutTabs) []DashboardTabbedLayoutTabs {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardTabbedLayoutTabs
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardTabbedLayoutTabs(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardTabbedLayoutTabsSlice(c *Client, des, nw []DashboardTabbedLayoutTabs) []DashboardTabbedLayoutTabs {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardTabbedLayoutTabs
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardTabbedLayoutTabs(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardTabbedLayoutTabsGridLayout(des, initial *DashboardTabbedLayoutTabsGridLayout, opts ...dcl.ApplyOption) *DashboardTabbedLayoutTabsGridLayout {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Columns) {
		des.Columns = initial.Columns
	}
	if dcl.IsZeroValue(des.Widgets) {
		des.Widgets = initial.Widgets
	}

	return des
}

func canonicalizeNewDashboardTabbedLayoutTabsGridLayout(c *Client, des, nw *DashboardTabbedLayoutTabsGridLayout) *DashboardTabbedLayoutTabsGridLayout {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardTabbedLayoutTabsGridLayoutSet(c *Client, des, nw []DashboardTabbedLayoutTabsGridLayout) []DashboardTabbedLayoutTabsGridLayout {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardTabbedLayoutTabsGridLayout
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardTabbedLayoutTabsGridLayout(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardTabbedLayoutTabsGridLayoutSlice(c *Client, des, nw []DashboardTabbedLayoutTabsGridLayout) []DashboardTabbedLayoutTabsGridLayout {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardTabbedLayoutTabsGridLayout
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardTabbedLayoutTabsGridLayout(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardTabbedLayoutTabsMosaicLayout(des, initial *DashboardTabbedLayoutTabsMosaicLayout, opts ...dcl.ApplyOption) *DashboardTabbedLayoutTabsMosaicLayout {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Columns) {
		des.Columns = initial.Columns
	}
	if dcl.IsZeroValue(des.Tiles) {
		des.Tiles = initial.Tiles
	}

	return des
}

func canonicalizeNewDashboardTabbedLayoutTabsMosaicLayout(c *Client, des, nw *DashboardTabbedLayoutTabsMosaicLayout) *DashboardTabbedLayoutTabsMosaicLayout {
	if des == nil || nw == nil {
		return nw
	}

	nw.Tiles = canonicalizeNewDashboardTabbedLayoutTabsMosaicLayoutTilesSlice(c, des.Tiles, nw.Tiles)

	return nw
}

func canonicalizeNewDashboardTabbedLayoutTabsMosaicLayoutSet(c *Client, des, nw []DashboardTabbedLayoutTabsMosaicLayout) []DashboardTabbedLayoutTabsMosaicLayout {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardTabbedLayoutTabsMosaicLayout
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardTabbedLayoutTabsMosaicLayout(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardTabbedLayoutTabsMosaicLayoutSlice(c *Client, des, nw []DashboardTabbedLayoutTabsMosaicLayout) []DashboardTabbedLayoutTabsMosaicLayout {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardTabbedLayoutTabsMosaicLayout
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardTabbedLayoutTabsMosaicLayout(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardTabbedLayoutTabsMosaicLayoutTiles(des, initial *DashboardTabbedLayoutTabsMosaicLayoutTiles, opts ...dcl.ApplyOption) *DashboardTabbedLayoutTabsMosaicLayoutTiles {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.XPos) {
		des.XPos = initial.XPos
	}
	if dcl.IsZeroValue(des.YPos) {
		des.YPos = initial.YPos
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Height) {
		des.Height = initial.Height
	}
	des.Widget = canonicalizeDashboardWidget(des.Widget, initial.Widget, opts...)

	return des
}

func canonicalizeNewDashboardTabbedLayoutTabsMosaicLayoutTiles(c *Client, des, nw *DashboardTabbedLayoutTabsMosaicLayoutTiles) *DashboardTabbedLayoutTabsMosaicLayoutTiles {
	if des == nil || nw == nil {
		return nw
	}

	nw.Widget = canonicalizeNewDashboardWidget(c, des.Widget, nw.Widget)

	return nw
}

func canonicalizeNewDashboardTabbedLayoutTabsMosaicLayoutTilesSet(c *Client, des, nw []DashboardTabbedLayoutTabsMosaicLayoutTiles) []DashboardTabbedLayoutTabsMosaicLayoutTiles {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardTabbedLayoutTabsMosaicLayoutTiles
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardTabbedLayoutTabsMosaicLayoutTiles(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardTabbedLayoutTabsMosaicLayoutTilesSlice(c *Client, des, nw []DashboardTabbedLayoutTabsMosaicLayoutTiles) []DashboardTabbedLayoutTabsMosaicLayoutTiles {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardTabbedLayoutTabsMosaicLayoutTiles
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardTabbedLayoutTabsMosaicLayoutTiles(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardTabbedLayoutTabsRowLayout(des, initial *DashboardTabbedLayoutTabsRowLayout, opts ...dcl.ApplyOption) *DashboardTabbedLayoutTabsRowLayout {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Rows) {
		des.Rows = initial.Rows
	}

	return des
}

func canonicalizeNewDashboardTabbedLayoutTabsRowLayout(c *Client, des, nw *DashboardTabbedLayoutTabsRowLayout) *DashboardTabbedLayoutTabsRowLayout {
	if des == nil || nw == nil {
		return nw
	}

	nw.Rows = canonicalizeNewDashboardTabbedLayoutTabsRowLayoutRowsSlice(c, des.Rows, nw.Rows)

	return nw
}

func canonicalizeNewDashboardTabbedLayoutTabsRowLayoutSet(c *Client, des, nw []DashboardTabbedLayoutTabsRowLayout) []DashboardTabbedLayoutTabsRowLayout {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardTabbedLayoutTabsRowLayout
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardTabbedLayoutTabsRowLayout(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardTabbedLayoutTabsRowLayoutSlice(c *Client, des, nw []DashboardTabbedLayoutTabsRowLayout) []DashboardTabbedLayoutTabsRowLayout {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardTabbedLayoutTabsRowLayout
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardTabbedLayoutTabsRowLayout(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardTabbedLayoutTabsRowLayoutRows(des, initial *DashboardTabbedLayoutTabsRowLayoutRows, opts ...dcl.ApplyOption) *DashboardTabbedLayoutTabsRowLayoutRows {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Weight) {
		des.Weight = initial.Weight
	}
	if dcl.IsZeroValue(des.Widgets) {
		des.Widgets = initial.Widgets
	}

	return des
}

func canonicalizeNewDashboardTabbedLayoutTabsRowLayoutRows(c *Client, des, nw *DashboardTabbedLayoutTabsRowLayoutRows) *DashboardTabbedLayoutTabsRowLayoutRows {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardTabbedLayoutTabsRowLayoutRowsSet(c *Client, des, nw []DashboardTabbedLayoutTabsRowLayoutRows) []DashboardTabbedLayoutTabsRowLayoutRows {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardTabbedLayoutTabsRowLayoutRows
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardTabbedLayoutTabsRowLayoutRows(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardTabbedLayoutTabsRowLayoutRowsSlice(c *Client, des, nw []DashboardTabbedLayoutTabsRowLayoutRows) []DashboardTabbedLayoutTabsRowLayoutRows {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardTabbedLayoutTabsRowLayoutRows
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardTabbedLayoutTabsRowLayoutRows(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardTabbedLayoutTabsColumnLayout(des, initial *DashboardTabbedLayoutTabsColumnLayout, opts ...dcl.ApplyOption) *DashboardTabbedLayoutTabsColumnLayout {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Columns) {
		des.Columns = initial.Columns
	}

	return des
}

func canonicalizeNewDashboardTabbedLayoutTabsColumnLayout(c *Client, des, nw *DashboardTabbedLayoutTabsColumnLayout) *DashboardTabbedLayoutTabsColumnLayout {
	if des == nil || nw == nil {
		return nw
	}

	nw.Columns = canonicalizeNewDashboardTabbedLayoutTabsColumnLayoutColumnsSlice(c, des.Columns, nw.Columns)

	return nw
}

func canonicalizeNewDashboardTabbedLayoutTabsColumnLayoutSet(c *Client, des, nw []DashboardTabbedLayoutTabsColumnLayout) []DashboardTabbedLayoutTabsColumnLayout {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardTabbedLayoutTabsColumnLayout
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardTabbedLayoutTabsColumnLayout(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardTabbedLayoutTabsColumnLayoutSlice(c *Client, des, nw []DashboardTabbedLayoutTabsColumnLayout) []DashboardTabbedLayoutTabsColumnLayout {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardTabbedLayoutTabsColumnLayout
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardTabbedLayoutTabsColumnLayout(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardTabbedLayoutTabsColumnLayoutColumns(des, initial *DashboardTabbedLayoutTabsColumnLayoutColumns, opts ...dcl.ApplyOption) *DashboardTabbedLayoutTabsColumnLayoutColumns {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Weight) {
		des.Weight = initial.Weight
	}
	if dcl.IsZeroValue(des.Widgets) {
		des.Widgets = initial.Widgets
	}

	return des
}

func canonicalizeNewDashboardTabbedLayoutTabsColumnLayoutColumns(c *Client, des, nw *DashboardTabbedLayoutTabsColumnLayoutColumns) *DashboardTabbedLayoutTabsColumnLayoutColumns {
	if des == nil || nw == nil {
		return nw
	}

	return nw
}

func canonicalizeNewDashboardTabbedLayoutTabsColumnLayoutColumnsSet(c *Client, des, nw []DashboardTabbedLayoutTabsColumnLayoutColumns) []DashboardTabbedLayoutTabsColumnLayoutColumns {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardTabbedLayoutTabsColumnLayoutColumns
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardTabbedLayoutTabsColumnLayoutColumns(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardTabbedLayoutTabsColumnLayoutColumnsSlice(c *Client, des, nw []DashboardTabbedLayoutTabsColumnLayoutColumns) []DashboardTabbedLayoutTabsColumnLayoutColumns {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardTabbedLayoutTabsColumnLayoutColumns
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardTabbedLayoutTabsColumnLayoutColumns(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardTabbedLayoutFeaturedMosaicLayout(des, initial *DashboardTabbedLayoutFeaturedMosaicLayout, opts ...dcl.ApplyOption) *DashboardTabbedLayoutFeaturedMosaicLayout {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.Columns) {
		des.Columns = initial.Columns
	}
	if dcl.IsZeroValue(des.Tiles) {
		des.Tiles = initial.Tiles
	}

	return des
}

func canonicalizeNewDashboardTabbedLayoutFeaturedMosaicLayout(c *Client, des, nw *DashboardTabbedLayoutFeaturedMosaicLayout) *DashboardTabbedLayoutFeaturedMosaicLayout {
	if des == nil || nw == nil {
		return nw
	}

	nw.Tiles = canonicalizeNewDashboardTabbedLayoutFeaturedMosaicLayoutTilesSlice(c, des.Tiles, nw.Tiles)

	return nw
}

func canonicalizeNewDashboardTabbedLayoutFeaturedMosaicLayoutSet(c *Client, des, nw []DashboardTabbedLayoutFeaturedMosaicLayout) []DashboardTabbedLayoutFeaturedMosaicLayout {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardTabbedLayoutFeaturedMosaicLayout
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardTabbedLayoutFeaturedMosaicLayout(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardTabbedLayoutFeaturedMosaicLayoutSlice(c *Client, des, nw []DashboardTabbedLayoutFeaturedMosaicLayout) []DashboardTabbedLayoutFeaturedMosaicLayout {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardTabbedLayoutFeaturedMosaicLayout
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardTabbedLayoutFeaturedMosaicLayout(c, &d, &n))
	}

	return items
}

func canonicalizeDashboardTabbedLayoutFeaturedMosaicLayoutTiles(des, initial *DashboardTabbedLayoutFeaturedMosaicLayoutTiles, opts ...dcl.ApplyOption) *DashboardTabbedLayoutFeaturedMosaicLayoutTiles {
	if des == nil {
		return initial
	}
	if des.empty {
		return des
	}

	if initial == nil {
		return des
	}

	if dcl.IsZeroValue(des.XPos) {
		des.XPos = initial.XPos
	}
	if dcl.IsZeroValue(des.YPos) {
		des.YPos = initial.YPos
	}
	if dcl.IsZeroValue(des.Width) {
		des.Width = initial.Width
	}
	if dcl.IsZeroValue(des.Height) {
		des.Height = initial.Height
	}
	des.Widget = canonicalizeDashboardWidget(des.Widget, initial.Widget, opts...)

	return des
}

func canonicalizeNewDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c *Client, des, nw *DashboardTabbedLayoutFeaturedMosaicLayoutTiles) *DashboardTabbedLayoutFeaturedMosaicLayoutTiles {
	if des == nil || nw == nil {
		return nw
	}

	nw.Widget = canonicalizeNewDashboardWidget(c, des.Widget, nw.Widget)

	return nw
}

func canonicalizeNewDashboardTabbedLayoutFeaturedMosaicLayoutTilesSet(c *Client, des, nw []DashboardTabbedLayoutFeaturedMosaicLayoutTiles) []DashboardTabbedLayoutFeaturedMosaicLayoutTiles {
	if des == nil {
		return nw
	}
	var reorderedNew []DashboardTabbedLayoutFeaturedMosaicLayoutTiles
	for _, d := range des {
		matchedNew := -1
		for idx, n := range nw {
			if !compareDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c, &d, &n) {
				matchedNew = idx
				break
			}
		}
		if matchedNew != -1 {
			reorderedNew = append(reorderedNew, nw[matchedNew])
			nw = append(nw[:matchedNew], nw[matchedNew+1:]...)
		}
	}
	reorderedNew = append(reorderedNew, nw...)

	return reorderedNew
}

func canonicalizeNewDashboardTabbedLayoutFeaturedMosaicLayoutTilesSlice(c *Client, des, nw []DashboardTabbedLayoutFeaturedMosaicLayoutTiles) []DashboardTabbedLayoutFeaturedMosaicLayoutTiles {
	if des == nil {
		return nw
	}

	// Lengths are unequal. A diff will occur later, so we shouldn't canonicalize.
	// Return the original array.
	if len(des) != len(nw) {
		return des
	}

	var items []DashboardTabbedLayoutFeaturedMosaicLayoutTiles
	for i, d := range des {
		n := nw[i]
		items = append(items, *canonicalizeNewDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c, &d, &n))
	}

	return items
}

type dashboardDiff struct {
	// The diff should include one or the other of RequiresRecreate or UpdateOp.
	RequiresRecreate bool
	UpdateOp         dashboardApiOperation
	// This is for reporting only.
	FieldName string
}

// The differ returns a list of diffs, along with a list of operations that should be taken
// to remedy them. Right now, it does not attempt to consolidate operations - if several
// fields can be fixed with a patch update, it will perform the patch several times.
// Diffs on some fields will be ignored if the `desired` state has an empty (nil)
// value. This empty value indicates that the user does not care about the state for
// the field. Empty fields on the actual object will cause diffs.
// TODO(magic-modules-eng): for efficiency in some resources, add batching.
func diffDashboard(c *Client, desired, actual *Dashboard, opts ...dcl.ApplyOption) ([]dashboardDiff, error) {
	if desired == nil || actual == nil {
		return nil, fmt.Errorf("nil resource passed to diff - always a programming error: %#v, %#v", desired, actual)
	}

	var diffs []dashboardDiff
	if !reflect.DeepEqual(desired.Category, actual.Category) {
		c.Config.Logger.Infof("Detected diff in Category.\nDESIRED: %v\nACTUAL: %v", desired.Category, actual.Category)
		diffs = append(diffs, dashboardDiff{
			RequiresRecreate: true,
			FieldName:        "Category",
		})
	}
	if compareDashboardColumnLayout(c, desired.ColumnLayout, actual.ColumnLayout) {
		c.Config.Logger.Infof("Detected diff in ColumnLayout.\nDESIRED: %v\nACTUAL: %v", desired.ColumnLayout, actual.ColumnLayout)

		diffs = append(diffs, dashboardDiff{
			UpdateOp:  &updateDashboardUpdateOperation{},
			FieldName: "ColumnLayout",
		})

	}
	if !dcl.IsZeroValue(desired.DisplayName) && !dcl.StringCanonicalize(desired.DisplayName, actual.DisplayName) {
		c.Config.Logger.Infof("Detected diff in DisplayName.\nDESIRED: %v\nACTUAL: %v", desired.DisplayName, actual.DisplayName)

		diffs = append(diffs, dashboardDiff{
			UpdateOp:  &updateDashboardUpdateOperation{},
			FieldName: "DisplayName",
		})

	}
	if compareDashboardGridLayout(c, desired.GridLayout, actual.GridLayout) {
		c.Config.Logger.Infof("Detected diff in GridLayout.\nDESIRED: %v\nACTUAL: %v", desired.GridLayout, actual.GridLayout)

		diffs = append(diffs, dashboardDiff{
			UpdateOp:  &updateDashboardUpdateOperation{},
			FieldName: "GridLayout",
		})

	}
	if compareDashboardMosaicLayout(c, desired.MosaicLayout, actual.MosaicLayout) {
		c.Config.Logger.Infof("Detected diff in MosaicLayout.\nDESIRED: %v\nACTUAL: %v", desired.MosaicLayout, actual.MosaicLayout)

		diffs = append(diffs, dashboardDiff{
			UpdateOp:  &updateDashboardUpdateOperation{},
			FieldName: "MosaicLayout",
		})

	}
	if compareDashboardRowLayout(c, desired.RowLayout, actual.RowLayout) {
		c.Config.Logger.Infof("Detected diff in RowLayout.\nDESIRED: %v\nACTUAL: %v", desired.RowLayout, actual.RowLayout)
		diffs = append(diffs, dashboardDiff{
			RequiresRecreate: true,
			FieldName:        "RowLayout",
		})
	}
	if compareDashboardTabbedLayout(c, desired.TabbedLayout, actual.TabbedLayout) {
		c.Config.Logger.Infof("Detected diff in TabbedLayout.\nDESIRED: %v\nACTUAL: %v", desired.TabbedLayout, actual.TabbedLayout)
		diffs = append(diffs, dashboardDiff{
			RequiresRecreate: true,
			FieldName:        "TabbedLayout",
		})
	}
	// We need to ensure that this list does not contain identical operations *most of the time*.
	// There may be some cases where we will need multiple copies of the same operation - for instance,
	// if a resource has multiple prerequisite-containing fields.  For now, we don't know of any
	// such examples and so we deduplicate unconditionally.

	// The best way for us to do this is to iterate through the list
	// and remove any copies of operations which are identical to a previous operation.
	// This is O(n^2) in the number of operations, but n will always be very small,
	// even 10 would be an extremely high number.
	var opTypes []string
	var deduped []dashboardDiff
	for _, d := range diffs {
		// Two operations are considered identical if they have the same type.
		// The type of an operation is derived from the name of the update method.
		if !dcl.StringSliceContains(fmt.Sprintf("%T", d.UpdateOp), opTypes) {
			deduped = append(deduped, d)
			opTypes = append(opTypes, fmt.Sprintf("%T", d.UpdateOp))
		} else {
			c.Config.Logger.Infof("Omitting planned operation of type %T since once is already scheduled.", d.UpdateOp)
		}
	}

	return deduped, nil
}
func compareDashboardColumnLayout(c *Client, desired, actual *DashboardColumnLayout) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Columns == nil && desired.Columns != nil && !dcl.IsEmptyValueIndirect(desired.Columns) {
		c.Config.Logger.Infof("desired Columns %s - but actually nil", dcl.SprintResource(desired.Columns))
		return true
	}
	if compareDashboardColumnLayoutColumnsSlice(c, desired.Columns, actual.Columns) && !dcl.IsZeroValue(desired.Columns) {
		c.Config.Logger.Infof("Diff in Columns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Columns), dcl.SprintResource(actual.Columns))
		return true
	}
	return false
}

func compareDashboardColumnLayoutSlice(c *Client, desired, actual []DashboardColumnLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardColumnLayout, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardColumnLayout(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardColumnLayout, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardColumnLayoutMap(c *Client, desired, actual map[string]DashboardColumnLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardColumnLayout, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardColumnLayout, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardColumnLayout(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardColumnLayout, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardColumnLayoutColumns(c *Client, desired, actual *DashboardColumnLayoutColumns) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Weight == nil && desired.Weight != nil && !dcl.IsEmptyValueIndirect(desired.Weight) {
		c.Config.Logger.Infof("desired Weight %s - but actually nil", dcl.SprintResource(desired.Weight))
		return true
	}
	if !reflect.DeepEqual(desired.Weight, actual.Weight) && !dcl.IsZeroValue(desired.Weight) {
		c.Config.Logger.Infof("Diff in Weight. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Weight), dcl.SprintResource(actual.Weight))
		return true
	}
	if actual.Widgets == nil && desired.Widgets != nil && !dcl.IsEmptyValueIndirect(desired.Widgets) {
		c.Config.Logger.Infof("desired Widgets %s - but actually nil", dcl.SprintResource(desired.Widgets))
		return true
	}
	if compareDashboardWidgetSlice(c, desired.Widgets, actual.Widgets) && !dcl.IsZeroValue(desired.Widgets) {
		c.Config.Logger.Infof("Diff in Widgets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Widgets), dcl.SprintResource(actual.Widgets))
		return true
	}
	return false
}

func compareDashboardColumnLayoutColumnsSlice(c *Client, desired, actual []DashboardColumnLayoutColumns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardColumnLayoutColumns, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardColumnLayoutColumns(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardColumnLayoutColumns, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardColumnLayoutColumnsMap(c *Client, desired, actual map[string]DashboardColumnLayoutColumns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardColumnLayoutColumns, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardColumnLayoutColumns, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardColumnLayoutColumns(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardColumnLayoutColumns, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidget(c *Client, desired, actual *DashboardWidget) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Title == nil && desired.Title != nil && !dcl.IsEmptyValueIndirect(desired.Title) {
		c.Config.Logger.Infof("desired Title %s - but actually nil", dcl.SprintResource(desired.Title))
		return true
	}
	if !dcl.StringCanonicalize(desired.Title, actual.Title) && !dcl.IsZeroValue(desired.Title) {
		c.Config.Logger.Infof("Diff in Title. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Title), dcl.SprintResource(actual.Title))
		return true
	}
	if actual.XyChart == nil && desired.XyChart != nil && !dcl.IsEmptyValueIndirect(desired.XyChart) {
		c.Config.Logger.Infof("desired XyChart %s - but actually nil", dcl.SprintResource(desired.XyChart))
		return true
	}
	if compareDashboardWidgetXyChart(c, desired.XyChart, actual.XyChart) && !dcl.IsZeroValue(desired.XyChart) {
		c.Config.Logger.Infof("Diff in XyChart. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.XyChart), dcl.SprintResource(actual.XyChart))
		return true
	}
	if actual.Scorecard == nil && desired.Scorecard != nil && !dcl.IsEmptyValueIndirect(desired.Scorecard) {
		c.Config.Logger.Infof("desired Scorecard %s - but actually nil", dcl.SprintResource(desired.Scorecard))
		return true
	}
	if compareDashboardWidgetScorecard(c, desired.Scorecard, actual.Scorecard) && !dcl.IsZeroValue(desired.Scorecard) {
		c.Config.Logger.Infof("Diff in Scorecard. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scorecard), dcl.SprintResource(actual.Scorecard))
		return true
	}
	if actual.Text == nil && desired.Text != nil && !dcl.IsEmptyValueIndirect(desired.Text) {
		c.Config.Logger.Infof("desired Text %s - but actually nil", dcl.SprintResource(desired.Text))
		return true
	}
	if compareDashboardWidgetText(c, desired.Text, actual.Text) && !dcl.IsZeroValue(desired.Text) {
		c.Config.Logger.Infof("Diff in Text. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Text), dcl.SprintResource(actual.Text))
		return true
	}
	if actual.Blank == nil && desired.Blank != nil && !dcl.IsEmptyValueIndirect(desired.Blank) {
		c.Config.Logger.Infof("desired Blank %s - but actually nil", dcl.SprintResource(desired.Blank))
		return true
	}
	if compareDashboardWidgetBlank(c, desired.Blank, actual.Blank) && !dcl.IsZeroValue(desired.Blank) {
		c.Config.Logger.Infof("Diff in Blank. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Blank), dcl.SprintResource(actual.Blank))
		return true
	}
	return false
}

func compareDashboardWidgetSlice(c *Client, desired, actual []DashboardWidget) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidget, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidget(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidget, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetMap(c *Client, desired, actual map[string]DashboardWidget) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidget, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidget, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidget(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidget, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChart(c *Client, desired, actual *DashboardWidgetXyChart) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.DataSets == nil && desired.DataSets != nil && !dcl.IsEmptyValueIndirect(desired.DataSets) {
		c.Config.Logger.Infof("desired DataSets %s - but actually nil", dcl.SprintResource(desired.DataSets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsSlice(c, desired.DataSets, actual.DataSets) && !dcl.IsZeroValue(desired.DataSets) {
		c.Config.Logger.Infof("Diff in DataSets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.DataSets), dcl.SprintResource(actual.DataSets))
		return true
	}
	if actual.SourceDrilldown == nil && desired.SourceDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.SourceDrilldown) {
		c.Config.Logger.Infof("desired SourceDrilldown %s - but actually nil", dcl.SprintResource(desired.SourceDrilldown))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldown(c, desired.SourceDrilldown, actual.SourceDrilldown) && !dcl.IsZeroValue(desired.SourceDrilldown) {
		c.Config.Logger.Infof("Diff in SourceDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.SourceDrilldown), dcl.SprintResource(actual.SourceDrilldown))
		return true
	}
	if actual.MetricDrilldown == nil && desired.MetricDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.MetricDrilldown) {
		c.Config.Logger.Infof("desired MetricDrilldown %s - but actually nil", dcl.SprintResource(desired.MetricDrilldown))
		return true
	}
	if compareDashboardWidgetXyChartMetricDrilldown(c, desired.MetricDrilldown, actual.MetricDrilldown) && !dcl.IsZeroValue(desired.MetricDrilldown) {
		c.Config.Logger.Infof("Diff in MetricDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetricDrilldown), dcl.SprintResource(actual.MetricDrilldown))
		return true
	}
	if actual.TimeshiftDuration == nil && desired.TimeshiftDuration != nil && !dcl.IsEmptyValueIndirect(desired.TimeshiftDuration) {
		c.Config.Logger.Infof("desired TimeshiftDuration %s - but actually nil", dcl.SprintResource(desired.TimeshiftDuration))
		return true
	}
	if !dcl.StringCanonicalize(desired.TimeshiftDuration, actual.TimeshiftDuration) && !dcl.IsZeroValue(desired.TimeshiftDuration) {
		c.Config.Logger.Infof("Diff in TimeshiftDuration. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TimeshiftDuration), dcl.SprintResource(actual.TimeshiftDuration))
		return true
	}
	if actual.Thresholds == nil && desired.Thresholds != nil && !dcl.IsEmptyValueIndirect(desired.Thresholds) {
		c.Config.Logger.Infof("desired Thresholds %s - but actually nil", dcl.SprintResource(desired.Thresholds))
		return true
	}
	if compareDashboardWidgetXyChartThresholdsSlice(c, desired.Thresholds, actual.Thresholds) && !dcl.IsZeroValue(desired.Thresholds) {
		c.Config.Logger.Infof("Diff in Thresholds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Thresholds), dcl.SprintResource(actual.Thresholds))
		return true
	}
	if actual.XAxis == nil && desired.XAxis != nil && !dcl.IsEmptyValueIndirect(desired.XAxis) {
		c.Config.Logger.Infof("desired XAxis %s - but actually nil", dcl.SprintResource(desired.XAxis))
		return true
	}
	if compareDashboardWidgetXyChartXAxis(c, desired.XAxis, actual.XAxis) && !dcl.IsZeroValue(desired.XAxis) {
		c.Config.Logger.Infof("Diff in XAxis. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.XAxis), dcl.SprintResource(actual.XAxis))
		return true
	}
	if actual.YAxis == nil && desired.YAxis != nil && !dcl.IsEmptyValueIndirect(desired.YAxis) {
		c.Config.Logger.Infof("desired YAxis %s - but actually nil", dcl.SprintResource(desired.YAxis))
		return true
	}
	if compareDashboardWidgetXyChartYAxis(c, desired.YAxis, actual.YAxis) && !dcl.IsZeroValue(desired.YAxis) {
		c.Config.Logger.Infof("Diff in YAxis. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.YAxis), dcl.SprintResource(actual.YAxis))
		return true
	}
	if actual.ChartOptions == nil && desired.ChartOptions != nil && !dcl.IsEmptyValueIndirect(desired.ChartOptions) {
		c.Config.Logger.Infof("desired ChartOptions %s - but actually nil", dcl.SprintResource(desired.ChartOptions))
		return true
	}
	if compareDashboardWidgetXyChartChartOptions(c, desired.ChartOptions, actual.ChartOptions) && !dcl.IsZeroValue(desired.ChartOptions) {
		c.Config.Logger.Infof("Diff in ChartOptions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ChartOptions), dcl.SprintResource(actual.ChartOptions))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSlice(c *Client, desired, actual []DashboardWidgetXyChart) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChart, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChart(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChart, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMap(c *Client, desired, actual map[string]DashboardWidgetXyChart) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChart, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChart, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChart(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChart, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSets(c *Client, desired, actual *DashboardWidgetXyChartDataSets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TimeSeriesQuery == nil && desired.TimeSeriesQuery != nil && !dcl.IsEmptyValueIndirect(desired.TimeSeriesQuery) {
		c.Config.Logger.Infof("desired TimeSeriesQuery %s - but actually nil", dcl.SprintResource(desired.TimeSeriesQuery))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, desired.TimeSeriesQuery, actual.TimeSeriesQuery) && !dcl.IsZeroValue(desired.TimeSeriesQuery) {
		c.Config.Logger.Infof("Diff in TimeSeriesQuery. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TimeSeriesQuery), dcl.SprintResource(actual.TimeSeriesQuery))
		return true
	}
	if actual.PlotType == nil && desired.PlotType != nil && !dcl.IsEmptyValueIndirect(desired.PlotType) {
		c.Config.Logger.Infof("desired PlotType %s - but actually nil", dcl.SprintResource(desired.PlotType))
		return true
	}
	if !reflect.DeepEqual(desired.PlotType, actual.PlotType) && !dcl.IsZeroValue(desired.PlotType) {
		c.Config.Logger.Infof("Diff in PlotType. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PlotType), dcl.SprintResource(actual.PlotType))
		return true
	}
	if actual.LegendTemplate == nil && desired.LegendTemplate != nil && !dcl.IsEmptyValueIndirect(desired.LegendTemplate) {
		c.Config.Logger.Infof("desired LegendTemplate %s - but actually nil", dcl.SprintResource(desired.LegendTemplate))
		return true
	}
	if !dcl.StringCanonicalize(desired.LegendTemplate, actual.LegendTemplate) && !dcl.IsZeroValue(desired.LegendTemplate) {
		c.Config.Logger.Infof("Diff in LegendTemplate. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LegendTemplate), dcl.SprintResource(actual.LegendTemplate))
		return true
	}
	if actual.MinAlignmentPeriod == nil && desired.MinAlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.MinAlignmentPeriod) {
		c.Config.Logger.Infof("desired MinAlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.MinAlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.MinAlignmentPeriod, actual.MinAlignmentPeriod) && !dcl.IsZeroValue(desired.MinAlignmentPeriod) {
		c.Config.Logger.Infof("Diff in MinAlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinAlignmentPeriod), dcl.SprintResource(actual.MinAlignmentPeriod))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQuery(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQuery) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TimeSeriesFilter == nil && desired.TimeSeriesFilter != nil && !dcl.IsEmptyValueIndirect(desired.TimeSeriesFilter) {
		c.Config.Logger.Infof("desired TimeSeriesFilter %s - but actually nil", dcl.SprintResource(desired.TimeSeriesFilter))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, desired.TimeSeriesFilter, actual.TimeSeriesFilter) && !dcl.IsZeroValue(desired.TimeSeriesFilter) {
		c.Config.Logger.Infof("Diff in TimeSeriesFilter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TimeSeriesFilter), dcl.SprintResource(actual.TimeSeriesFilter))
		return true
	}
	if actual.TimeSeriesFilterRatio == nil && desired.TimeSeriesFilterRatio != nil && !dcl.IsEmptyValueIndirect(desired.TimeSeriesFilterRatio) {
		c.Config.Logger.Infof("desired TimeSeriesFilterRatio %s - but actually nil", dcl.SprintResource(desired.TimeSeriesFilterRatio))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, desired.TimeSeriesFilterRatio, actual.TimeSeriesFilterRatio) && !dcl.IsZeroValue(desired.TimeSeriesFilterRatio) {
		c.Config.Logger.Infof("Diff in TimeSeriesFilterRatio. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TimeSeriesFilterRatio), dcl.SprintResource(actual.TimeSeriesFilterRatio))
		return true
	}
	if actual.TimeSeriesQueryLanguage == nil && desired.TimeSeriesQueryLanguage != nil && !dcl.IsEmptyValueIndirect(desired.TimeSeriesQueryLanguage) {
		c.Config.Logger.Infof("desired TimeSeriesQueryLanguage %s - but actually nil", dcl.SprintResource(desired.TimeSeriesQueryLanguage))
		return true
	}
	if !dcl.StringCanonicalize(desired.TimeSeriesQueryLanguage, actual.TimeSeriesQueryLanguage) && !dcl.IsZeroValue(desired.TimeSeriesQueryLanguage) {
		c.Config.Logger.Infof("Diff in TimeSeriesQueryLanguage. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TimeSeriesQueryLanguage), dcl.SprintResource(actual.TimeSeriesQueryLanguage))
		return true
	}
	if actual.ApiSource == nil && desired.ApiSource != nil && !dcl.IsEmptyValueIndirect(desired.ApiSource) {
		c.Config.Logger.Infof("desired ApiSource %s - but actually nil", dcl.SprintResource(desired.ApiSource))
		return true
	}
	if !reflect.DeepEqual(desired.ApiSource, actual.ApiSource) && !dcl.IsZeroValue(desired.ApiSource) {
		c.Config.Logger.Infof("Diff in ApiSource. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ApiSource), dcl.SprintResource(actual.ApiSource))
		return true
	}
	if actual.UnitOverride == nil && desired.UnitOverride != nil && !dcl.IsEmptyValueIndirect(desired.UnitOverride) {
		c.Config.Logger.Infof("desired UnitOverride %s - but actually nil", dcl.SprintResource(desired.UnitOverride))
		return true
	}
	if !dcl.StringCanonicalize(desired.UnitOverride, actual.UnitOverride) && !dcl.IsZeroValue(desired.UnitOverride) {
		c.Config.Logger.Infof("Diff in UnitOverride. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.UnitOverride), dcl.SprintResource(actual.UnitOverride))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQuerySlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQuery) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQuery, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQuery, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQuery) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQuery, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQuery, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQuery, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Filter == nil && desired.Filter != nil && !dcl.IsEmptyValueIndirect(desired.Filter) {
		c.Config.Logger.Infof("desired Filter %s - but actually nil", dcl.SprintResource(desired.Filter))
		return true
	}
	if !dcl.StringCanonicalize(desired.Filter, actual.Filter) && !dcl.IsZeroValue(desired.Filter) {
		c.Config.Logger.Infof("Diff in Filter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Filter), dcl.SprintResource(actual.Filter))
		return true
	}
	if actual.Aggregation == nil && desired.Aggregation != nil && !dcl.IsEmptyValueIndirect(desired.Aggregation) {
		c.Config.Logger.Infof("desired Aggregation %s - but actually nil", dcl.SprintResource(desired.Aggregation))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, desired.Aggregation, actual.Aggregation) && !dcl.IsZeroValue(desired.Aggregation) {
		c.Config.Logger.Infof("Diff in Aggregation. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Aggregation), dcl.SprintResource(actual.Aggregation))
		return true
	}
	if actual.SecondaryAggregation == nil && desired.SecondaryAggregation != nil && !dcl.IsEmptyValueIndirect(desired.SecondaryAggregation) {
		c.Config.Logger.Infof("desired SecondaryAggregation %s - but actually nil", dcl.SprintResource(desired.SecondaryAggregation))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, desired.SecondaryAggregation, actual.SecondaryAggregation) && !dcl.IsZeroValue(desired.SecondaryAggregation) {
		c.Config.Logger.Infof("Diff in SecondaryAggregation. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.SecondaryAggregation), dcl.SprintResource(actual.SecondaryAggregation))
		return true
	}
	if actual.PickTimeSeriesFilter == nil && desired.PickTimeSeriesFilter != nil && !dcl.IsEmptyValueIndirect(desired.PickTimeSeriesFilter) {
		c.Config.Logger.Infof("desired PickTimeSeriesFilter %s - but actually nil", dcl.SprintResource(desired.PickTimeSeriesFilter))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, desired.PickTimeSeriesFilter, actual.PickTimeSeriesFilter) && !dcl.IsZeroValue(desired.PickTimeSeriesFilter) {
		c.Config.Logger.Infof("Diff in PickTimeSeriesFilter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PickTimeSeriesFilter), dcl.SprintResource(actual.PickTimeSeriesFilter))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.AlignmentPeriod == nil && desired.AlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("desired AlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.AlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.AlignmentPeriod, actual.AlignmentPeriod) && !dcl.IsZeroValue(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("Diff in AlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.AlignmentPeriod), dcl.SprintResource(actual.AlignmentPeriod))
		return true
	}
	if actual.PerSeriesAligner == nil && desired.PerSeriesAligner != nil && !dcl.IsEmptyValueIndirect(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("desired PerSeriesAligner %s - but actually nil", dcl.SprintResource(desired.PerSeriesAligner))
		return true
	}
	if !reflect.DeepEqual(desired.PerSeriesAligner, actual.PerSeriesAligner) && !dcl.IsZeroValue(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("Diff in PerSeriesAligner. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PerSeriesAligner), dcl.SprintResource(actual.PerSeriesAligner))
		return true
	}
	if actual.CrossSeriesReducer == nil && desired.CrossSeriesReducer != nil && !dcl.IsEmptyValueIndirect(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("desired CrossSeriesReducer %s - but actually nil", dcl.SprintResource(desired.CrossSeriesReducer))
		return true
	}
	if !reflect.DeepEqual(desired.CrossSeriesReducer, actual.CrossSeriesReducer) && !dcl.IsZeroValue(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("Diff in CrossSeriesReducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.CrossSeriesReducer), dcl.SprintResource(actual.CrossSeriesReducer))
		return true
	}
	if actual.GroupByFields == nil && desired.GroupByFields != nil && !dcl.IsEmptyValueIndirect(desired.GroupByFields) {
		c.Config.Logger.Infof("desired GroupByFields %s - but actually nil", dcl.SprintResource(desired.GroupByFields))
		return true
	}
	if !dcl.StringSliceEquals(desired.GroupByFields, actual.GroupByFields) && !dcl.IsZeroValue(desired.GroupByFields) {
		c.Config.Logger.Infof("Diff in GroupByFields. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupByFields), dcl.SprintResource(actual.GroupByFields))
		return true
	}
	if actual.ReduceFractionLessThanParams == nil && desired.ReduceFractionLessThanParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("desired ReduceFractionLessThanParams %s - but actually nil", dcl.SprintResource(desired.ReduceFractionLessThanParams))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, desired.ReduceFractionLessThanParams, actual.ReduceFractionLessThanParams) && !dcl.IsZeroValue(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("Diff in ReduceFractionLessThanParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceFractionLessThanParams), dcl.SprintResource(actual.ReduceFractionLessThanParams))
		return true
	}
	if actual.ReduceMakeDistributionParams == nil && desired.ReduceMakeDistributionParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("desired ReduceMakeDistributionParams %s - but actually nil", dcl.SprintResource(desired.ReduceMakeDistributionParams))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, desired.ReduceMakeDistributionParams, actual.ReduceMakeDistributionParams) && !dcl.IsZeroValue(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("Diff in ReduceMakeDistributionParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceMakeDistributionParams), dcl.SprintResource(actual.ReduceMakeDistributionParams))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Threshold == nil && desired.Threshold != nil && !dcl.IsEmptyValueIndirect(desired.Threshold) {
		c.Config.Logger.Infof("desired Threshold %s - but actually nil", dcl.SprintResource(desired.Threshold))
		return true
	}
	if !reflect.DeepEqual(desired.Threshold, actual.Threshold) && !dcl.IsZeroValue(desired.Threshold) {
		c.Config.Logger.Infof("Diff in Threshold. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Threshold), dcl.SprintResource(actual.Threshold))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.BucketOptions == nil && desired.BucketOptions != nil && !dcl.IsEmptyValueIndirect(desired.BucketOptions) {
		c.Config.Logger.Infof("desired BucketOptions %s - but actually nil", dcl.SprintResource(desired.BucketOptions))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, desired.BucketOptions, actual.BucketOptions) && !dcl.IsZeroValue(desired.BucketOptions) {
		c.Config.Logger.Infof("Diff in BucketOptions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.BucketOptions), dcl.SprintResource(actual.BucketOptions))
		return true
	}
	if actual.ExemplarSampling == nil && desired.ExemplarSampling != nil && !dcl.IsEmptyValueIndirect(desired.ExemplarSampling) {
		c.Config.Logger.Infof("desired ExemplarSampling %s - but actually nil", dcl.SprintResource(desired.ExemplarSampling))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, desired.ExemplarSampling, actual.ExemplarSampling) && !dcl.IsZeroValue(desired.ExemplarSampling) {
		c.Config.Logger.Infof("Diff in ExemplarSampling. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExemplarSampling), dcl.SprintResource(actual.ExemplarSampling))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.LinearBuckets == nil && desired.LinearBuckets != nil && !dcl.IsEmptyValueIndirect(desired.LinearBuckets) {
		c.Config.Logger.Infof("desired LinearBuckets %s - but actually nil", dcl.SprintResource(desired.LinearBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, desired.LinearBuckets, actual.LinearBuckets) && !dcl.IsZeroValue(desired.LinearBuckets) {
		c.Config.Logger.Infof("Diff in LinearBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LinearBuckets), dcl.SprintResource(actual.LinearBuckets))
		return true
	}
	if actual.ExponentialBuckets == nil && desired.ExponentialBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("desired ExponentialBuckets %s - but actually nil", dcl.SprintResource(desired.ExponentialBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, desired.ExponentialBuckets, actual.ExponentialBuckets) && !dcl.IsZeroValue(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("Diff in ExponentialBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExponentialBuckets), dcl.SprintResource(actual.ExponentialBuckets))
		return true
	}
	if actual.ExplicitBuckets == nil && desired.ExplicitBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("desired ExplicitBuckets %s - but actually nil", dcl.SprintResource(desired.ExplicitBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, desired.ExplicitBuckets, actual.ExplicitBuckets) && !dcl.IsZeroValue(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("Diff in ExplicitBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExplicitBuckets), dcl.SprintResource(actual.ExplicitBuckets))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Offset == nil && desired.Offset != nil && !dcl.IsEmptyValueIndirect(desired.Offset) {
		c.Config.Logger.Infof("desired Offset %s - but actually nil", dcl.SprintResource(desired.Offset))
		return true
	}
	if !reflect.DeepEqual(desired.Offset, actual.Offset) && !dcl.IsZeroValue(desired.Offset) {
		c.Config.Logger.Infof("Diff in Offset. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Offset), dcl.SprintResource(actual.Offset))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.GrowthFactor == nil && desired.GrowthFactor != nil && !dcl.IsEmptyValueIndirect(desired.GrowthFactor) {
		c.Config.Logger.Infof("desired GrowthFactor %s - but actually nil", dcl.SprintResource(desired.GrowthFactor))
		return true
	}
	if !reflect.DeepEqual(desired.GrowthFactor, actual.GrowthFactor) && !dcl.IsZeroValue(desired.GrowthFactor) {
		c.Config.Logger.Infof("Diff in GrowthFactor. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GrowthFactor), dcl.SprintResource(actual.GrowthFactor))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Bounds == nil && desired.Bounds != nil && !dcl.IsEmptyValueIndirect(desired.Bounds) {
		c.Config.Logger.Infof("desired Bounds %s - but actually nil", dcl.SprintResource(desired.Bounds))
		return true
	}
	if !dcl.FloatSliceEquals(desired.Bounds, actual.Bounds) && !dcl.IsZeroValue(desired.Bounds) {
		c.Config.Logger.Infof("Diff in Bounds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Bounds), dcl.SprintResource(actual.Bounds))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MinimumValue == nil && desired.MinimumValue != nil && !dcl.IsEmptyValueIndirect(desired.MinimumValue) {
		c.Config.Logger.Infof("desired MinimumValue %s - but actually nil", dcl.SprintResource(desired.MinimumValue))
		return true
	}
	if !reflect.DeepEqual(desired.MinimumValue, actual.MinimumValue) && !dcl.IsZeroValue(desired.MinimumValue) {
		c.Config.Logger.Infof("Diff in MinimumValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinimumValue), dcl.SprintResource(actual.MinimumValue))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.AlignmentPeriod == nil && desired.AlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("desired AlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.AlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.AlignmentPeriod, actual.AlignmentPeriod) && !dcl.IsZeroValue(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("Diff in AlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.AlignmentPeriod), dcl.SprintResource(actual.AlignmentPeriod))
		return true
	}
	if actual.PerSeriesAligner == nil && desired.PerSeriesAligner != nil && !dcl.IsEmptyValueIndirect(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("desired PerSeriesAligner %s - but actually nil", dcl.SprintResource(desired.PerSeriesAligner))
		return true
	}
	if !reflect.DeepEqual(desired.PerSeriesAligner, actual.PerSeriesAligner) && !dcl.IsZeroValue(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("Diff in PerSeriesAligner. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PerSeriesAligner), dcl.SprintResource(actual.PerSeriesAligner))
		return true
	}
	if actual.CrossSeriesReducer == nil && desired.CrossSeriesReducer != nil && !dcl.IsEmptyValueIndirect(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("desired CrossSeriesReducer %s - but actually nil", dcl.SprintResource(desired.CrossSeriesReducer))
		return true
	}
	if !reflect.DeepEqual(desired.CrossSeriesReducer, actual.CrossSeriesReducer) && !dcl.IsZeroValue(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("Diff in CrossSeriesReducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.CrossSeriesReducer), dcl.SprintResource(actual.CrossSeriesReducer))
		return true
	}
	if actual.GroupByFields == nil && desired.GroupByFields != nil && !dcl.IsEmptyValueIndirect(desired.GroupByFields) {
		c.Config.Logger.Infof("desired GroupByFields %s - but actually nil", dcl.SprintResource(desired.GroupByFields))
		return true
	}
	if !dcl.StringSliceEquals(desired.GroupByFields, actual.GroupByFields) && !dcl.IsZeroValue(desired.GroupByFields) {
		c.Config.Logger.Infof("Diff in GroupByFields. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupByFields), dcl.SprintResource(actual.GroupByFields))
		return true
	}
	if actual.ReduceFractionLessThanParams == nil && desired.ReduceFractionLessThanParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("desired ReduceFractionLessThanParams %s - but actually nil", dcl.SprintResource(desired.ReduceFractionLessThanParams))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, desired.ReduceFractionLessThanParams, actual.ReduceFractionLessThanParams) && !dcl.IsZeroValue(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("Diff in ReduceFractionLessThanParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceFractionLessThanParams), dcl.SprintResource(actual.ReduceFractionLessThanParams))
		return true
	}
	if actual.ReduceMakeDistributionParams == nil && desired.ReduceMakeDistributionParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("desired ReduceMakeDistributionParams %s - but actually nil", dcl.SprintResource(desired.ReduceMakeDistributionParams))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, desired.ReduceMakeDistributionParams, actual.ReduceMakeDistributionParams) && !dcl.IsZeroValue(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("Diff in ReduceMakeDistributionParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceMakeDistributionParams), dcl.SprintResource(actual.ReduceMakeDistributionParams))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Threshold == nil && desired.Threshold != nil && !dcl.IsEmptyValueIndirect(desired.Threshold) {
		c.Config.Logger.Infof("desired Threshold %s - but actually nil", dcl.SprintResource(desired.Threshold))
		return true
	}
	if !reflect.DeepEqual(desired.Threshold, actual.Threshold) && !dcl.IsZeroValue(desired.Threshold) {
		c.Config.Logger.Infof("Diff in Threshold. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Threshold), dcl.SprintResource(actual.Threshold))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.BucketOptions == nil && desired.BucketOptions != nil && !dcl.IsEmptyValueIndirect(desired.BucketOptions) {
		c.Config.Logger.Infof("desired BucketOptions %s - but actually nil", dcl.SprintResource(desired.BucketOptions))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, desired.BucketOptions, actual.BucketOptions) && !dcl.IsZeroValue(desired.BucketOptions) {
		c.Config.Logger.Infof("Diff in BucketOptions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.BucketOptions), dcl.SprintResource(actual.BucketOptions))
		return true
	}
	if actual.ExemplarSampling == nil && desired.ExemplarSampling != nil && !dcl.IsEmptyValueIndirect(desired.ExemplarSampling) {
		c.Config.Logger.Infof("desired ExemplarSampling %s - but actually nil", dcl.SprintResource(desired.ExemplarSampling))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, desired.ExemplarSampling, actual.ExemplarSampling) && !dcl.IsZeroValue(desired.ExemplarSampling) {
		c.Config.Logger.Infof("Diff in ExemplarSampling. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExemplarSampling), dcl.SprintResource(actual.ExemplarSampling))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.LinearBuckets == nil && desired.LinearBuckets != nil && !dcl.IsEmptyValueIndirect(desired.LinearBuckets) {
		c.Config.Logger.Infof("desired LinearBuckets %s - but actually nil", dcl.SprintResource(desired.LinearBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, desired.LinearBuckets, actual.LinearBuckets) && !dcl.IsZeroValue(desired.LinearBuckets) {
		c.Config.Logger.Infof("Diff in LinearBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LinearBuckets), dcl.SprintResource(actual.LinearBuckets))
		return true
	}
	if actual.ExponentialBuckets == nil && desired.ExponentialBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("desired ExponentialBuckets %s - but actually nil", dcl.SprintResource(desired.ExponentialBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, desired.ExponentialBuckets, actual.ExponentialBuckets) && !dcl.IsZeroValue(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("Diff in ExponentialBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExponentialBuckets), dcl.SprintResource(actual.ExponentialBuckets))
		return true
	}
	if actual.ExplicitBuckets == nil && desired.ExplicitBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("desired ExplicitBuckets %s - but actually nil", dcl.SprintResource(desired.ExplicitBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, desired.ExplicitBuckets, actual.ExplicitBuckets) && !dcl.IsZeroValue(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("Diff in ExplicitBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExplicitBuckets), dcl.SprintResource(actual.ExplicitBuckets))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Offset == nil && desired.Offset != nil && !dcl.IsEmptyValueIndirect(desired.Offset) {
		c.Config.Logger.Infof("desired Offset %s - but actually nil", dcl.SprintResource(desired.Offset))
		return true
	}
	if !reflect.DeepEqual(desired.Offset, actual.Offset) && !dcl.IsZeroValue(desired.Offset) {
		c.Config.Logger.Infof("Diff in Offset. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Offset), dcl.SprintResource(actual.Offset))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.GrowthFactor == nil && desired.GrowthFactor != nil && !dcl.IsEmptyValueIndirect(desired.GrowthFactor) {
		c.Config.Logger.Infof("desired GrowthFactor %s - but actually nil", dcl.SprintResource(desired.GrowthFactor))
		return true
	}
	if !reflect.DeepEqual(desired.GrowthFactor, actual.GrowthFactor) && !dcl.IsZeroValue(desired.GrowthFactor) {
		c.Config.Logger.Infof("Diff in GrowthFactor. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GrowthFactor), dcl.SprintResource(actual.GrowthFactor))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Bounds == nil && desired.Bounds != nil && !dcl.IsEmptyValueIndirect(desired.Bounds) {
		c.Config.Logger.Infof("desired Bounds %s - but actually nil", dcl.SprintResource(desired.Bounds))
		return true
	}
	if !dcl.FloatSliceEquals(desired.Bounds, actual.Bounds) && !dcl.IsZeroValue(desired.Bounds) {
		c.Config.Logger.Infof("Diff in Bounds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Bounds), dcl.SprintResource(actual.Bounds))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MinimumValue == nil && desired.MinimumValue != nil && !dcl.IsEmptyValueIndirect(desired.MinimumValue) {
		c.Config.Logger.Infof("desired MinimumValue %s - but actually nil", dcl.SprintResource(desired.MinimumValue))
		return true
	}
	if !reflect.DeepEqual(desired.MinimumValue, actual.MinimumValue) && !dcl.IsZeroValue(desired.MinimumValue) {
		c.Config.Logger.Infof("Diff in MinimumValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinimumValue), dcl.SprintResource(actual.MinimumValue))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.RankingMethod == nil && desired.RankingMethod != nil && !dcl.IsEmptyValueIndirect(desired.RankingMethod) {
		c.Config.Logger.Infof("desired RankingMethod %s - but actually nil", dcl.SprintResource(desired.RankingMethod))
		return true
	}
	if !reflect.DeepEqual(desired.RankingMethod, actual.RankingMethod) && !dcl.IsZeroValue(desired.RankingMethod) {
		c.Config.Logger.Infof("Diff in RankingMethod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.RankingMethod), dcl.SprintResource(actual.RankingMethod))
		return true
	}
	if actual.NumTimeSeries == nil && desired.NumTimeSeries != nil && !dcl.IsEmptyValueIndirect(desired.NumTimeSeries) {
		c.Config.Logger.Infof("desired NumTimeSeries %s - but actually nil", dcl.SprintResource(desired.NumTimeSeries))
		return true
	}
	if !reflect.DeepEqual(desired.NumTimeSeries, actual.NumTimeSeries) && !dcl.IsZeroValue(desired.NumTimeSeries) {
		c.Config.Logger.Infof("Diff in NumTimeSeries. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumTimeSeries), dcl.SprintResource(actual.NumTimeSeries))
		return true
	}
	if actual.Direction == nil && desired.Direction != nil && !dcl.IsEmptyValueIndirect(desired.Direction) {
		c.Config.Logger.Infof("desired Direction %s - but actually nil", dcl.SprintResource(desired.Direction))
		return true
	}
	if !reflect.DeepEqual(desired.Direction, actual.Direction) && !dcl.IsZeroValue(desired.Direction) {
		c.Config.Logger.Infof("Diff in Direction. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Direction), dcl.SprintResource(actual.Direction))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Numerator == nil && desired.Numerator != nil && !dcl.IsEmptyValueIndirect(desired.Numerator) {
		c.Config.Logger.Infof("desired Numerator %s - but actually nil", dcl.SprintResource(desired.Numerator))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, desired.Numerator, actual.Numerator) && !dcl.IsZeroValue(desired.Numerator) {
		c.Config.Logger.Infof("Diff in Numerator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Numerator), dcl.SprintResource(actual.Numerator))
		return true
	}
	if actual.Denominator == nil && desired.Denominator != nil && !dcl.IsEmptyValueIndirect(desired.Denominator) {
		c.Config.Logger.Infof("desired Denominator %s - but actually nil", dcl.SprintResource(desired.Denominator))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, desired.Denominator, actual.Denominator) && !dcl.IsZeroValue(desired.Denominator) {
		c.Config.Logger.Infof("Diff in Denominator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Denominator), dcl.SprintResource(actual.Denominator))
		return true
	}
	if actual.SecondaryAggregation == nil && desired.SecondaryAggregation != nil && !dcl.IsEmptyValueIndirect(desired.SecondaryAggregation) {
		c.Config.Logger.Infof("desired SecondaryAggregation %s - but actually nil", dcl.SprintResource(desired.SecondaryAggregation))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, desired.SecondaryAggregation, actual.SecondaryAggregation) && !dcl.IsZeroValue(desired.SecondaryAggregation) {
		c.Config.Logger.Infof("Diff in SecondaryAggregation. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.SecondaryAggregation), dcl.SprintResource(actual.SecondaryAggregation))
		return true
	}
	if actual.PickTimeSeriesFilter == nil && desired.PickTimeSeriesFilter != nil && !dcl.IsEmptyValueIndirect(desired.PickTimeSeriesFilter) {
		c.Config.Logger.Infof("desired PickTimeSeriesFilter %s - but actually nil", dcl.SprintResource(desired.PickTimeSeriesFilter))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, desired.PickTimeSeriesFilter, actual.PickTimeSeriesFilter) && !dcl.IsZeroValue(desired.PickTimeSeriesFilter) {
		c.Config.Logger.Infof("Diff in PickTimeSeriesFilter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PickTimeSeriesFilter), dcl.SprintResource(actual.PickTimeSeriesFilter))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Filter == nil && desired.Filter != nil && !dcl.IsEmptyValueIndirect(desired.Filter) {
		c.Config.Logger.Infof("desired Filter %s - but actually nil", dcl.SprintResource(desired.Filter))
		return true
	}
	if !dcl.StringCanonicalize(desired.Filter, actual.Filter) && !dcl.IsZeroValue(desired.Filter) {
		c.Config.Logger.Infof("Diff in Filter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Filter), dcl.SprintResource(actual.Filter))
		return true
	}
	if actual.Aggregation == nil && desired.Aggregation != nil && !dcl.IsEmptyValueIndirect(desired.Aggregation) {
		c.Config.Logger.Infof("desired Aggregation %s - but actually nil", dcl.SprintResource(desired.Aggregation))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, desired.Aggregation, actual.Aggregation) && !dcl.IsZeroValue(desired.Aggregation) {
		c.Config.Logger.Infof("Diff in Aggregation. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Aggregation), dcl.SprintResource(actual.Aggregation))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.AlignmentPeriod == nil && desired.AlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("desired AlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.AlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.AlignmentPeriod, actual.AlignmentPeriod) && !dcl.IsZeroValue(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("Diff in AlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.AlignmentPeriod), dcl.SprintResource(actual.AlignmentPeriod))
		return true
	}
	if actual.PerSeriesAligner == nil && desired.PerSeriesAligner != nil && !dcl.IsEmptyValueIndirect(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("desired PerSeriesAligner %s - but actually nil", dcl.SprintResource(desired.PerSeriesAligner))
		return true
	}
	if !reflect.DeepEqual(desired.PerSeriesAligner, actual.PerSeriesAligner) && !dcl.IsZeroValue(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("Diff in PerSeriesAligner. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PerSeriesAligner), dcl.SprintResource(actual.PerSeriesAligner))
		return true
	}
	if actual.CrossSeriesReducer == nil && desired.CrossSeriesReducer != nil && !dcl.IsEmptyValueIndirect(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("desired CrossSeriesReducer %s - but actually nil", dcl.SprintResource(desired.CrossSeriesReducer))
		return true
	}
	if !reflect.DeepEqual(desired.CrossSeriesReducer, actual.CrossSeriesReducer) && !dcl.IsZeroValue(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("Diff in CrossSeriesReducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.CrossSeriesReducer), dcl.SprintResource(actual.CrossSeriesReducer))
		return true
	}
	if actual.GroupByFields == nil && desired.GroupByFields != nil && !dcl.IsEmptyValueIndirect(desired.GroupByFields) {
		c.Config.Logger.Infof("desired GroupByFields %s - but actually nil", dcl.SprintResource(desired.GroupByFields))
		return true
	}
	if !dcl.StringSliceEquals(desired.GroupByFields, actual.GroupByFields) && !dcl.IsZeroValue(desired.GroupByFields) {
		c.Config.Logger.Infof("Diff in GroupByFields. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupByFields), dcl.SprintResource(actual.GroupByFields))
		return true
	}
	if actual.ReduceFractionLessThanParams == nil && desired.ReduceFractionLessThanParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("desired ReduceFractionLessThanParams %s - but actually nil", dcl.SprintResource(desired.ReduceFractionLessThanParams))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, desired.ReduceFractionLessThanParams, actual.ReduceFractionLessThanParams) && !dcl.IsZeroValue(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("Diff in ReduceFractionLessThanParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceFractionLessThanParams), dcl.SprintResource(actual.ReduceFractionLessThanParams))
		return true
	}
	if actual.ReduceMakeDistributionParams == nil && desired.ReduceMakeDistributionParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("desired ReduceMakeDistributionParams %s - but actually nil", dcl.SprintResource(desired.ReduceMakeDistributionParams))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, desired.ReduceMakeDistributionParams, actual.ReduceMakeDistributionParams) && !dcl.IsZeroValue(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("Diff in ReduceMakeDistributionParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceMakeDistributionParams), dcl.SprintResource(actual.ReduceMakeDistributionParams))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Threshold == nil && desired.Threshold != nil && !dcl.IsEmptyValueIndirect(desired.Threshold) {
		c.Config.Logger.Infof("desired Threshold %s - but actually nil", dcl.SprintResource(desired.Threshold))
		return true
	}
	if !reflect.DeepEqual(desired.Threshold, actual.Threshold) && !dcl.IsZeroValue(desired.Threshold) {
		c.Config.Logger.Infof("Diff in Threshold. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Threshold), dcl.SprintResource(actual.Threshold))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.BucketOptions == nil && desired.BucketOptions != nil && !dcl.IsEmptyValueIndirect(desired.BucketOptions) {
		c.Config.Logger.Infof("desired BucketOptions %s - but actually nil", dcl.SprintResource(desired.BucketOptions))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, desired.BucketOptions, actual.BucketOptions) && !dcl.IsZeroValue(desired.BucketOptions) {
		c.Config.Logger.Infof("Diff in BucketOptions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.BucketOptions), dcl.SprintResource(actual.BucketOptions))
		return true
	}
	if actual.ExemplarSampling == nil && desired.ExemplarSampling != nil && !dcl.IsEmptyValueIndirect(desired.ExemplarSampling) {
		c.Config.Logger.Infof("desired ExemplarSampling %s - but actually nil", dcl.SprintResource(desired.ExemplarSampling))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, desired.ExemplarSampling, actual.ExemplarSampling) && !dcl.IsZeroValue(desired.ExemplarSampling) {
		c.Config.Logger.Infof("Diff in ExemplarSampling. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExemplarSampling), dcl.SprintResource(actual.ExemplarSampling))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.LinearBuckets == nil && desired.LinearBuckets != nil && !dcl.IsEmptyValueIndirect(desired.LinearBuckets) {
		c.Config.Logger.Infof("desired LinearBuckets %s - but actually nil", dcl.SprintResource(desired.LinearBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, desired.LinearBuckets, actual.LinearBuckets) && !dcl.IsZeroValue(desired.LinearBuckets) {
		c.Config.Logger.Infof("Diff in LinearBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LinearBuckets), dcl.SprintResource(actual.LinearBuckets))
		return true
	}
	if actual.ExponentialBuckets == nil && desired.ExponentialBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("desired ExponentialBuckets %s - but actually nil", dcl.SprintResource(desired.ExponentialBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, desired.ExponentialBuckets, actual.ExponentialBuckets) && !dcl.IsZeroValue(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("Diff in ExponentialBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExponentialBuckets), dcl.SprintResource(actual.ExponentialBuckets))
		return true
	}
	if actual.ExplicitBuckets == nil && desired.ExplicitBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("desired ExplicitBuckets %s - but actually nil", dcl.SprintResource(desired.ExplicitBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, desired.ExplicitBuckets, actual.ExplicitBuckets) && !dcl.IsZeroValue(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("Diff in ExplicitBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExplicitBuckets), dcl.SprintResource(actual.ExplicitBuckets))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Offset == nil && desired.Offset != nil && !dcl.IsEmptyValueIndirect(desired.Offset) {
		c.Config.Logger.Infof("desired Offset %s - but actually nil", dcl.SprintResource(desired.Offset))
		return true
	}
	if !reflect.DeepEqual(desired.Offset, actual.Offset) && !dcl.IsZeroValue(desired.Offset) {
		c.Config.Logger.Infof("Diff in Offset. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Offset), dcl.SprintResource(actual.Offset))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.GrowthFactor == nil && desired.GrowthFactor != nil && !dcl.IsEmptyValueIndirect(desired.GrowthFactor) {
		c.Config.Logger.Infof("desired GrowthFactor %s - but actually nil", dcl.SprintResource(desired.GrowthFactor))
		return true
	}
	if !reflect.DeepEqual(desired.GrowthFactor, actual.GrowthFactor) && !dcl.IsZeroValue(desired.GrowthFactor) {
		c.Config.Logger.Infof("Diff in GrowthFactor. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GrowthFactor), dcl.SprintResource(actual.GrowthFactor))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Bounds == nil && desired.Bounds != nil && !dcl.IsEmptyValueIndirect(desired.Bounds) {
		c.Config.Logger.Infof("desired Bounds %s - but actually nil", dcl.SprintResource(desired.Bounds))
		return true
	}
	if !dcl.FloatSliceEquals(desired.Bounds, actual.Bounds) && !dcl.IsZeroValue(desired.Bounds) {
		c.Config.Logger.Infof("Diff in Bounds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Bounds), dcl.SprintResource(actual.Bounds))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MinimumValue == nil && desired.MinimumValue != nil && !dcl.IsEmptyValueIndirect(desired.MinimumValue) {
		c.Config.Logger.Infof("desired MinimumValue %s - but actually nil", dcl.SprintResource(desired.MinimumValue))
		return true
	}
	if !reflect.DeepEqual(desired.MinimumValue, actual.MinimumValue) && !dcl.IsZeroValue(desired.MinimumValue) {
		c.Config.Logger.Infof("Diff in MinimumValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinimumValue), dcl.SprintResource(actual.MinimumValue))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Filter == nil && desired.Filter != nil && !dcl.IsEmptyValueIndirect(desired.Filter) {
		c.Config.Logger.Infof("desired Filter %s - but actually nil", dcl.SprintResource(desired.Filter))
		return true
	}
	if !dcl.StringCanonicalize(desired.Filter, actual.Filter) && !dcl.IsZeroValue(desired.Filter) {
		c.Config.Logger.Infof("Diff in Filter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Filter), dcl.SprintResource(actual.Filter))
		return true
	}
	if actual.Aggregation == nil && desired.Aggregation != nil && !dcl.IsEmptyValueIndirect(desired.Aggregation) {
		c.Config.Logger.Infof("desired Aggregation %s - but actually nil", dcl.SprintResource(desired.Aggregation))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, desired.Aggregation, actual.Aggregation) && !dcl.IsZeroValue(desired.Aggregation) {
		c.Config.Logger.Infof("Diff in Aggregation. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Aggregation), dcl.SprintResource(actual.Aggregation))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.AlignmentPeriod == nil && desired.AlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("desired AlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.AlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.AlignmentPeriod, actual.AlignmentPeriod) && !dcl.IsZeroValue(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("Diff in AlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.AlignmentPeriod), dcl.SprintResource(actual.AlignmentPeriod))
		return true
	}
	if actual.PerSeriesAligner == nil && desired.PerSeriesAligner != nil && !dcl.IsEmptyValueIndirect(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("desired PerSeriesAligner %s - but actually nil", dcl.SprintResource(desired.PerSeriesAligner))
		return true
	}
	if !reflect.DeepEqual(desired.PerSeriesAligner, actual.PerSeriesAligner) && !dcl.IsZeroValue(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("Diff in PerSeriesAligner. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PerSeriesAligner), dcl.SprintResource(actual.PerSeriesAligner))
		return true
	}
	if actual.CrossSeriesReducer == nil && desired.CrossSeriesReducer != nil && !dcl.IsEmptyValueIndirect(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("desired CrossSeriesReducer %s - but actually nil", dcl.SprintResource(desired.CrossSeriesReducer))
		return true
	}
	if !reflect.DeepEqual(desired.CrossSeriesReducer, actual.CrossSeriesReducer) && !dcl.IsZeroValue(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("Diff in CrossSeriesReducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.CrossSeriesReducer), dcl.SprintResource(actual.CrossSeriesReducer))
		return true
	}
	if actual.GroupByFields == nil && desired.GroupByFields != nil && !dcl.IsEmptyValueIndirect(desired.GroupByFields) {
		c.Config.Logger.Infof("desired GroupByFields %s - but actually nil", dcl.SprintResource(desired.GroupByFields))
		return true
	}
	if !dcl.StringSliceEquals(desired.GroupByFields, actual.GroupByFields) && !dcl.IsZeroValue(desired.GroupByFields) {
		c.Config.Logger.Infof("Diff in GroupByFields. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupByFields), dcl.SprintResource(actual.GroupByFields))
		return true
	}
	if actual.ReduceFractionLessThanParams == nil && desired.ReduceFractionLessThanParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("desired ReduceFractionLessThanParams %s - but actually nil", dcl.SprintResource(desired.ReduceFractionLessThanParams))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, desired.ReduceFractionLessThanParams, actual.ReduceFractionLessThanParams) && !dcl.IsZeroValue(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("Diff in ReduceFractionLessThanParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceFractionLessThanParams), dcl.SprintResource(actual.ReduceFractionLessThanParams))
		return true
	}
	if actual.ReduceMakeDistributionParams == nil && desired.ReduceMakeDistributionParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("desired ReduceMakeDistributionParams %s - but actually nil", dcl.SprintResource(desired.ReduceMakeDistributionParams))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, desired.ReduceMakeDistributionParams, actual.ReduceMakeDistributionParams) && !dcl.IsZeroValue(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("Diff in ReduceMakeDistributionParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceMakeDistributionParams), dcl.SprintResource(actual.ReduceMakeDistributionParams))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Threshold == nil && desired.Threshold != nil && !dcl.IsEmptyValueIndirect(desired.Threshold) {
		c.Config.Logger.Infof("desired Threshold %s - but actually nil", dcl.SprintResource(desired.Threshold))
		return true
	}
	if !reflect.DeepEqual(desired.Threshold, actual.Threshold) && !dcl.IsZeroValue(desired.Threshold) {
		c.Config.Logger.Infof("Diff in Threshold. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Threshold), dcl.SprintResource(actual.Threshold))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.BucketOptions == nil && desired.BucketOptions != nil && !dcl.IsEmptyValueIndirect(desired.BucketOptions) {
		c.Config.Logger.Infof("desired BucketOptions %s - but actually nil", dcl.SprintResource(desired.BucketOptions))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, desired.BucketOptions, actual.BucketOptions) && !dcl.IsZeroValue(desired.BucketOptions) {
		c.Config.Logger.Infof("Diff in BucketOptions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.BucketOptions), dcl.SprintResource(actual.BucketOptions))
		return true
	}
	if actual.ExemplarSampling == nil && desired.ExemplarSampling != nil && !dcl.IsEmptyValueIndirect(desired.ExemplarSampling) {
		c.Config.Logger.Infof("desired ExemplarSampling %s - but actually nil", dcl.SprintResource(desired.ExemplarSampling))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, desired.ExemplarSampling, actual.ExemplarSampling) && !dcl.IsZeroValue(desired.ExemplarSampling) {
		c.Config.Logger.Infof("Diff in ExemplarSampling. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExemplarSampling), dcl.SprintResource(actual.ExemplarSampling))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.LinearBuckets == nil && desired.LinearBuckets != nil && !dcl.IsEmptyValueIndirect(desired.LinearBuckets) {
		c.Config.Logger.Infof("desired LinearBuckets %s - but actually nil", dcl.SprintResource(desired.LinearBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, desired.LinearBuckets, actual.LinearBuckets) && !dcl.IsZeroValue(desired.LinearBuckets) {
		c.Config.Logger.Infof("Diff in LinearBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LinearBuckets), dcl.SprintResource(actual.LinearBuckets))
		return true
	}
	if actual.ExponentialBuckets == nil && desired.ExponentialBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("desired ExponentialBuckets %s - but actually nil", dcl.SprintResource(desired.ExponentialBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, desired.ExponentialBuckets, actual.ExponentialBuckets) && !dcl.IsZeroValue(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("Diff in ExponentialBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExponentialBuckets), dcl.SprintResource(actual.ExponentialBuckets))
		return true
	}
	if actual.ExplicitBuckets == nil && desired.ExplicitBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("desired ExplicitBuckets %s - but actually nil", dcl.SprintResource(desired.ExplicitBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, desired.ExplicitBuckets, actual.ExplicitBuckets) && !dcl.IsZeroValue(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("Diff in ExplicitBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExplicitBuckets), dcl.SprintResource(actual.ExplicitBuckets))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Offset == nil && desired.Offset != nil && !dcl.IsEmptyValueIndirect(desired.Offset) {
		c.Config.Logger.Infof("desired Offset %s - but actually nil", dcl.SprintResource(desired.Offset))
		return true
	}
	if !reflect.DeepEqual(desired.Offset, actual.Offset) && !dcl.IsZeroValue(desired.Offset) {
		c.Config.Logger.Infof("Diff in Offset. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Offset), dcl.SprintResource(actual.Offset))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.GrowthFactor == nil && desired.GrowthFactor != nil && !dcl.IsEmptyValueIndirect(desired.GrowthFactor) {
		c.Config.Logger.Infof("desired GrowthFactor %s - but actually nil", dcl.SprintResource(desired.GrowthFactor))
		return true
	}
	if !reflect.DeepEqual(desired.GrowthFactor, actual.GrowthFactor) && !dcl.IsZeroValue(desired.GrowthFactor) {
		c.Config.Logger.Infof("Diff in GrowthFactor. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GrowthFactor), dcl.SprintResource(actual.GrowthFactor))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Bounds == nil && desired.Bounds != nil && !dcl.IsEmptyValueIndirect(desired.Bounds) {
		c.Config.Logger.Infof("desired Bounds %s - but actually nil", dcl.SprintResource(desired.Bounds))
		return true
	}
	if !dcl.FloatSliceEquals(desired.Bounds, actual.Bounds) && !dcl.IsZeroValue(desired.Bounds) {
		c.Config.Logger.Infof("Diff in Bounds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Bounds), dcl.SprintResource(actual.Bounds))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MinimumValue == nil && desired.MinimumValue != nil && !dcl.IsEmptyValueIndirect(desired.MinimumValue) {
		c.Config.Logger.Infof("desired MinimumValue %s - but actually nil", dcl.SprintResource(desired.MinimumValue))
		return true
	}
	if !reflect.DeepEqual(desired.MinimumValue, actual.MinimumValue) && !dcl.IsZeroValue(desired.MinimumValue) {
		c.Config.Logger.Infof("Diff in MinimumValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinimumValue), dcl.SprintResource(actual.MinimumValue))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.AlignmentPeriod == nil && desired.AlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("desired AlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.AlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.AlignmentPeriod, actual.AlignmentPeriod) && !dcl.IsZeroValue(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("Diff in AlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.AlignmentPeriod), dcl.SprintResource(actual.AlignmentPeriod))
		return true
	}
	if actual.PerSeriesAligner == nil && desired.PerSeriesAligner != nil && !dcl.IsEmptyValueIndirect(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("desired PerSeriesAligner %s - but actually nil", dcl.SprintResource(desired.PerSeriesAligner))
		return true
	}
	if !reflect.DeepEqual(desired.PerSeriesAligner, actual.PerSeriesAligner) && !dcl.IsZeroValue(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("Diff in PerSeriesAligner. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PerSeriesAligner), dcl.SprintResource(actual.PerSeriesAligner))
		return true
	}
	if actual.CrossSeriesReducer == nil && desired.CrossSeriesReducer != nil && !dcl.IsEmptyValueIndirect(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("desired CrossSeriesReducer %s - but actually nil", dcl.SprintResource(desired.CrossSeriesReducer))
		return true
	}
	if !reflect.DeepEqual(desired.CrossSeriesReducer, actual.CrossSeriesReducer) && !dcl.IsZeroValue(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("Diff in CrossSeriesReducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.CrossSeriesReducer), dcl.SprintResource(actual.CrossSeriesReducer))
		return true
	}
	if actual.GroupByFields == nil && desired.GroupByFields != nil && !dcl.IsEmptyValueIndirect(desired.GroupByFields) {
		c.Config.Logger.Infof("desired GroupByFields %s - but actually nil", dcl.SprintResource(desired.GroupByFields))
		return true
	}
	if !dcl.StringSliceEquals(desired.GroupByFields, actual.GroupByFields) && !dcl.IsZeroValue(desired.GroupByFields) {
		c.Config.Logger.Infof("Diff in GroupByFields. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupByFields), dcl.SprintResource(actual.GroupByFields))
		return true
	}
	if actual.ReduceFractionLessThanParams == nil && desired.ReduceFractionLessThanParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("desired ReduceFractionLessThanParams %s - but actually nil", dcl.SprintResource(desired.ReduceFractionLessThanParams))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, desired.ReduceFractionLessThanParams, actual.ReduceFractionLessThanParams) && !dcl.IsZeroValue(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("Diff in ReduceFractionLessThanParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceFractionLessThanParams), dcl.SprintResource(actual.ReduceFractionLessThanParams))
		return true
	}
	if actual.ReduceMakeDistributionParams == nil && desired.ReduceMakeDistributionParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("desired ReduceMakeDistributionParams %s - but actually nil", dcl.SprintResource(desired.ReduceMakeDistributionParams))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, desired.ReduceMakeDistributionParams, actual.ReduceMakeDistributionParams) && !dcl.IsZeroValue(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("Diff in ReduceMakeDistributionParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceMakeDistributionParams), dcl.SprintResource(actual.ReduceMakeDistributionParams))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Threshold == nil && desired.Threshold != nil && !dcl.IsEmptyValueIndirect(desired.Threshold) {
		c.Config.Logger.Infof("desired Threshold %s - but actually nil", dcl.SprintResource(desired.Threshold))
		return true
	}
	if !reflect.DeepEqual(desired.Threshold, actual.Threshold) && !dcl.IsZeroValue(desired.Threshold) {
		c.Config.Logger.Infof("Diff in Threshold. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Threshold), dcl.SprintResource(actual.Threshold))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.BucketOptions == nil && desired.BucketOptions != nil && !dcl.IsEmptyValueIndirect(desired.BucketOptions) {
		c.Config.Logger.Infof("desired BucketOptions %s - but actually nil", dcl.SprintResource(desired.BucketOptions))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, desired.BucketOptions, actual.BucketOptions) && !dcl.IsZeroValue(desired.BucketOptions) {
		c.Config.Logger.Infof("Diff in BucketOptions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.BucketOptions), dcl.SprintResource(actual.BucketOptions))
		return true
	}
	if actual.ExemplarSampling == nil && desired.ExemplarSampling != nil && !dcl.IsEmptyValueIndirect(desired.ExemplarSampling) {
		c.Config.Logger.Infof("desired ExemplarSampling %s - but actually nil", dcl.SprintResource(desired.ExemplarSampling))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, desired.ExemplarSampling, actual.ExemplarSampling) && !dcl.IsZeroValue(desired.ExemplarSampling) {
		c.Config.Logger.Infof("Diff in ExemplarSampling. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExemplarSampling), dcl.SprintResource(actual.ExemplarSampling))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.LinearBuckets == nil && desired.LinearBuckets != nil && !dcl.IsEmptyValueIndirect(desired.LinearBuckets) {
		c.Config.Logger.Infof("desired LinearBuckets %s - but actually nil", dcl.SprintResource(desired.LinearBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, desired.LinearBuckets, actual.LinearBuckets) && !dcl.IsZeroValue(desired.LinearBuckets) {
		c.Config.Logger.Infof("Diff in LinearBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LinearBuckets), dcl.SprintResource(actual.LinearBuckets))
		return true
	}
	if actual.ExponentialBuckets == nil && desired.ExponentialBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("desired ExponentialBuckets %s - but actually nil", dcl.SprintResource(desired.ExponentialBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, desired.ExponentialBuckets, actual.ExponentialBuckets) && !dcl.IsZeroValue(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("Diff in ExponentialBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExponentialBuckets), dcl.SprintResource(actual.ExponentialBuckets))
		return true
	}
	if actual.ExplicitBuckets == nil && desired.ExplicitBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("desired ExplicitBuckets %s - but actually nil", dcl.SprintResource(desired.ExplicitBuckets))
		return true
	}
	if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, desired.ExplicitBuckets, actual.ExplicitBuckets) && !dcl.IsZeroValue(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("Diff in ExplicitBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExplicitBuckets), dcl.SprintResource(actual.ExplicitBuckets))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Offset == nil && desired.Offset != nil && !dcl.IsEmptyValueIndirect(desired.Offset) {
		c.Config.Logger.Infof("desired Offset %s - but actually nil", dcl.SprintResource(desired.Offset))
		return true
	}
	if !reflect.DeepEqual(desired.Offset, actual.Offset) && !dcl.IsZeroValue(desired.Offset) {
		c.Config.Logger.Infof("Diff in Offset. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Offset), dcl.SprintResource(actual.Offset))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.GrowthFactor == nil && desired.GrowthFactor != nil && !dcl.IsEmptyValueIndirect(desired.GrowthFactor) {
		c.Config.Logger.Infof("desired GrowthFactor %s - but actually nil", dcl.SprintResource(desired.GrowthFactor))
		return true
	}
	if !reflect.DeepEqual(desired.GrowthFactor, actual.GrowthFactor) && !dcl.IsZeroValue(desired.GrowthFactor) {
		c.Config.Logger.Infof("Diff in GrowthFactor. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GrowthFactor), dcl.SprintResource(actual.GrowthFactor))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Bounds == nil && desired.Bounds != nil && !dcl.IsEmptyValueIndirect(desired.Bounds) {
		c.Config.Logger.Infof("desired Bounds %s - but actually nil", dcl.SprintResource(desired.Bounds))
		return true
	}
	if !dcl.FloatSliceEquals(desired.Bounds, actual.Bounds) && !dcl.IsZeroValue(desired.Bounds) {
		c.Config.Logger.Infof("Diff in Bounds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Bounds), dcl.SprintResource(actual.Bounds))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MinimumValue == nil && desired.MinimumValue != nil && !dcl.IsEmptyValueIndirect(desired.MinimumValue) {
		c.Config.Logger.Infof("desired MinimumValue %s - but actually nil", dcl.SprintResource(desired.MinimumValue))
		return true
	}
	if !reflect.DeepEqual(desired.MinimumValue, actual.MinimumValue) && !dcl.IsZeroValue(desired.MinimumValue) {
		c.Config.Logger.Infof("Diff in MinimumValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinimumValue), dcl.SprintResource(actual.MinimumValue))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.RankingMethod == nil && desired.RankingMethod != nil && !dcl.IsEmptyValueIndirect(desired.RankingMethod) {
		c.Config.Logger.Infof("desired RankingMethod %s - but actually nil", dcl.SprintResource(desired.RankingMethod))
		return true
	}
	if !reflect.DeepEqual(desired.RankingMethod, actual.RankingMethod) && !dcl.IsZeroValue(desired.RankingMethod) {
		c.Config.Logger.Infof("Diff in RankingMethod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.RankingMethod), dcl.SprintResource(actual.RankingMethod))
		return true
	}
	if actual.NumTimeSeries == nil && desired.NumTimeSeries != nil && !dcl.IsEmptyValueIndirect(desired.NumTimeSeries) {
		c.Config.Logger.Infof("desired NumTimeSeries %s - but actually nil", dcl.SprintResource(desired.NumTimeSeries))
		return true
	}
	if !reflect.DeepEqual(desired.NumTimeSeries, actual.NumTimeSeries) && !dcl.IsZeroValue(desired.NumTimeSeries) {
		c.Config.Logger.Infof("Diff in NumTimeSeries. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumTimeSeries), dcl.SprintResource(actual.NumTimeSeries))
		return true
	}
	if actual.Direction == nil && desired.Direction != nil && !dcl.IsEmptyValueIndirect(desired.Direction) {
		c.Config.Logger.Infof("desired Direction %s - but actually nil", dcl.SprintResource(desired.Direction))
		return true
	}
	if !reflect.DeepEqual(desired.Direction, actual.Direction) && !dcl.IsZeroValue(desired.Direction) {
		c.Config.Logger.Infof("Diff in Direction. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Direction), dcl.SprintResource(actual.Direction))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterMap(c *Client, desired, actual map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldown(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.ResourceTypeDrilldown == nil && desired.ResourceTypeDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.ResourceTypeDrilldown) {
		c.Config.Logger.Infof("desired ResourceTypeDrilldown %s - but actually nil", dcl.SprintResource(desired.ResourceTypeDrilldown))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, desired.ResourceTypeDrilldown, actual.ResourceTypeDrilldown) && !dcl.IsZeroValue(desired.ResourceTypeDrilldown) {
		c.Config.Logger.Infof("Diff in ResourceTypeDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ResourceTypeDrilldown), dcl.SprintResource(actual.ResourceTypeDrilldown))
		return true
	}
	if actual.ResourceLabelDrilldowns == nil && desired.ResourceLabelDrilldowns != nil && !dcl.IsEmptyValueIndirect(desired.ResourceLabelDrilldowns) {
		c.Config.Logger.Infof("desired ResourceLabelDrilldowns %s - but actually nil", dcl.SprintResource(desired.ResourceLabelDrilldowns))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsSlice(c, desired.ResourceLabelDrilldowns, actual.ResourceLabelDrilldowns) && !dcl.IsZeroValue(desired.ResourceLabelDrilldowns) {
		c.Config.Logger.Infof("Diff in ResourceLabelDrilldowns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ResourceLabelDrilldowns), dcl.SprintResource(actual.ResourceLabelDrilldowns))
		return true
	}
	if actual.MetadataSystemLabelDrilldowns == nil && desired.MetadataSystemLabelDrilldowns != nil && !dcl.IsEmptyValueIndirect(desired.MetadataSystemLabelDrilldowns) {
		c.Config.Logger.Infof("desired MetadataSystemLabelDrilldowns %s - but actually nil", dcl.SprintResource(desired.MetadataSystemLabelDrilldowns))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsSlice(c, desired.MetadataSystemLabelDrilldowns, actual.MetadataSystemLabelDrilldowns) && !dcl.IsZeroValue(desired.MetadataSystemLabelDrilldowns) {
		c.Config.Logger.Infof("Diff in MetadataSystemLabelDrilldowns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetadataSystemLabelDrilldowns), dcl.SprintResource(actual.MetadataSystemLabelDrilldowns))
		return true
	}
	if actual.MetadataUserLabelDrilldowns == nil && desired.MetadataUserLabelDrilldowns != nil && !dcl.IsEmptyValueIndirect(desired.MetadataUserLabelDrilldowns) {
		c.Config.Logger.Infof("desired MetadataUserLabelDrilldowns %s - but actually nil", dcl.SprintResource(desired.MetadataUserLabelDrilldowns))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsSlice(c, desired.MetadataUserLabelDrilldowns, actual.MetadataUserLabelDrilldowns) && !dcl.IsZeroValue(desired.MetadataUserLabelDrilldowns) {
		c.Config.Logger.Infof("Diff in MetadataUserLabelDrilldowns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetadataUserLabelDrilldowns), dcl.SprintResource(actual.MetadataUserLabelDrilldowns))
		return true
	}
	if actual.GroupNameDrilldown == nil && desired.GroupNameDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.GroupNameDrilldown) {
		c.Config.Logger.Infof("desired GroupNameDrilldown %s - but actually nil", dcl.SprintResource(desired.GroupNameDrilldown))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, desired.GroupNameDrilldown, actual.GroupNameDrilldown) && !dcl.IsZeroValue(desired.GroupNameDrilldown) {
		c.Config.Logger.Infof("Diff in GroupNameDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupNameDrilldown), dcl.SprintResource(actual.GroupNameDrilldown))
		return true
	}
	if actual.ServiceNameDrilldown == nil && desired.ServiceNameDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.ServiceNameDrilldown) {
		c.Config.Logger.Infof("desired ServiceNameDrilldown %s - but actually nil", dcl.SprintResource(desired.ServiceNameDrilldown))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, desired.ServiceNameDrilldown, actual.ServiceNameDrilldown) && !dcl.IsZeroValue(desired.ServiceNameDrilldown) {
		c.Config.Logger.Infof("Diff in ServiceNameDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ServiceNameDrilldown), dcl.SprintResource(actual.ServiceNameDrilldown))
		return true
	}
	if actual.ServiceTypeDrilldown == nil && desired.ServiceTypeDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.ServiceTypeDrilldown) {
		c.Config.Logger.Infof("desired ServiceTypeDrilldown %s - but actually nil", dcl.SprintResource(desired.ServiceTypeDrilldown))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, desired.ServiceTypeDrilldown, actual.ServiceTypeDrilldown) && !dcl.IsZeroValue(desired.ServiceTypeDrilldown) {
		c.Config.Logger.Infof("Diff in ServiceTypeDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ServiceTypeDrilldown), dcl.SprintResource(actual.ServiceTypeDrilldown))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetXyChartSourceDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartSourceDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValues == nil && desired.TargetValues != nil && !dcl.IsEmptyValueIndirect(desired.TargetValues) {
		c.Config.Logger.Infof("desired TargetValues %s - but actually nil", dcl.SprintResource(desired.TargetValues))
		return true
	}
	if !dcl.StringSliceEquals(desired.TargetValues, actual.TargetValues) && !dcl.IsZeroValue(desired.TargetValues) {
		c.Config.Logger.Infof("Diff in TargetValues. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValues), dcl.SprintResource(actual.TargetValues))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.LogicalOperator == nil && desired.LogicalOperator != nil && !dcl.IsEmptyValueIndirect(desired.LogicalOperator) {
		c.Config.Logger.Infof("desired LogicalOperator %s - but actually nil", dcl.SprintResource(desired.LogicalOperator))
		return true
	}
	if !reflect.DeepEqual(desired.LogicalOperator, actual.LogicalOperator) && !dcl.IsZeroValue(desired.LogicalOperator) {
		c.Config.Logger.Infof("Diff in LogicalOperator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LogicalOperator), dcl.SprintResource(actual.LogicalOperator))
		return true
	}
	if actual.ValueRestrictions == nil && desired.ValueRestrictions != nil && !dcl.IsEmptyValueIndirect(desired.ValueRestrictions) {
		c.Config.Logger.Infof("desired ValueRestrictions %s - but actually nil", dcl.SprintResource(desired.ValueRestrictions))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c, desired.ValueRestrictions, actual.ValueRestrictions) && !dcl.IsZeroValue(desired.ValueRestrictions) {
		c.Config.Logger.Infof("Diff in ValueRestrictions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ValueRestrictions), dcl.SprintResource(actual.ValueRestrictions))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValue == nil && desired.TargetValue != nil && !dcl.IsEmptyValueIndirect(desired.TargetValue) {
		c.Config.Logger.Infof("desired TargetValue %s - but actually nil", dcl.SprintResource(desired.TargetValue))
		return true
	}
	if !dcl.StringCanonicalize(desired.TargetValue, actual.TargetValue) && !dcl.IsZeroValue(desired.TargetValue) {
		c.Config.Logger.Infof("Diff in TargetValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValue), dcl.SprintResource(actual.TargetValue))
		return true
	}
	if actual.Comparator == nil && desired.Comparator != nil && !dcl.IsEmptyValueIndirect(desired.Comparator) {
		c.Config.Logger.Infof("desired Comparator %s - but actually nil", dcl.SprintResource(desired.Comparator))
		return true
	}
	if !reflect.DeepEqual(desired.Comparator, actual.Comparator) && !dcl.IsZeroValue(desired.Comparator) {
		c.Config.Logger.Infof("Diff in Comparator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Comparator), dcl.SprintResource(actual.Comparator))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.LogicalOperator == nil && desired.LogicalOperator != nil && !dcl.IsEmptyValueIndirect(desired.LogicalOperator) {
		c.Config.Logger.Infof("desired LogicalOperator %s - but actually nil", dcl.SprintResource(desired.LogicalOperator))
		return true
	}
	if !reflect.DeepEqual(desired.LogicalOperator, actual.LogicalOperator) && !dcl.IsZeroValue(desired.LogicalOperator) {
		c.Config.Logger.Infof("Diff in LogicalOperator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LogicalOperator), dcl.SprintResource(actual.LogicalOperator))
		return true
	}
	if actual.ValueRestrictions == nil && desired.ValueRestrictions != nil && !dcl.IsEmptyValueIndirect(desired.ValueRestrictions) {
		c.Config.Logger.Infof("desired ValueRestrictions %s - but actually nil", dcl.SprintResource(desired.ValueRestrictions))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c, desired.ValueRestrictions, actual.ValueRestrictions) && !dcl.IsZeroValue(desired.ValueRestrictions) {
		c.Config.Logger.Infof("Diff in ValueRestrictions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ValueRestrictions), dcl.SprintResource(actual.ValueRestrictions))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValue == nil && desired.TargetValue != nil && !dcl.IsEmptyValueIndirect(desired.TargetValue) {
		c.Config.Logger.Infof("desired TargetValue %s - but actually nil", dcl.SprintResource(desired.TargetValue))
		return true
	}
	if !dcl.StringCanonicalize(desired.TargetValue, actual.TargetValue) && !dcl.IsZeroValue(desired.TargetValue) {
		c.Config.Logger.Infof("Diff in TargetValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValue), dcl.SprintResource(actual.TargetValue))
		return true
	}
	if actual.Comparator == nil && desired.Comparator != nil && !dcl.IsEmptyValueIndirect(desired.Comparator) {
		c.Config.Logger.Infof("desired Comparator %s - but actually nil", dcl.SprintResource(desired.Comparator))
		return true
	}
	if !reflect.DeepEqual(desired.Comparator, actual.Comparator) && !dcl.IsZeroValue(desired.Comparator) {
		c.Config.Logger.Infof("Diff in Comparator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Comparator), dcl.SprintResource(actual.Comparator))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.LogicalOperator == nil && desired.LogicalOperator != nil && !dcl.IsEmptyValueIndirect(desired.LogicalOperator) {
		c.Config.Logger.Infof("desired LogicalOperator %s - but actually nil", dcl.SprintResource(desired.LogicalOperator))
		return true
	}
	if !reflect.DeepEqual(desired.LogicalOperator, actual.LogicalOperator) && !dcl.IsZeroValue(desired.LogicalOperator) {
		c.Config.Logger.Infof("Diff in LogicalOperator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LogicalOperator), dcl.SprintResource(actual.LogicalOperator))
		return true
	}
	if actual.ValueRestrictions == nil && desired.ValueRestrictions != nil && !dcl.IsEmptyValueIndirect(desired.ValueRestrictions) {
		c.Config.Logger.Infof("desired ValueRestrictions %s - but actually nil", dcl.SprintResource(desired.ValueRestrictions))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c, desired.ValueRestrictions, actual.ValueRestrictions) && !dcl.IsZeroValue(desired.ValueRestrictions) {
		c.Config.Logger.Infof("Diff in ValueRestrictions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ValueRestrictions), dcl.SprintResource(actual.ValueRestrictions))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValue == nil && desired.TargetValue != nil && !dcl.IsEmptyValueIndirect(desired.TargetValue) {
		c.Config.Logger.Infof("desired TargetValue %s - but actually nil", dcl.SprintResource(desired.TargetValue))
		return true
	}
	if !dcl.StringCanonicalize(desired.TargetValue, actual.TargetValue) && !dcl.IsZeroValue(desired.TargetValue) {
		c.Config.Logger.Infof("Diff in TargetValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValue), dcl.SprintResource(actual.TargetValue))
		return true
	}
	if actual.Comparator == nil && desired.Comparator != nil && !dcl.IsEmptyValueIndirect(desired.Comparator) {
		c.Config.Logger.Infof("desired Comparator %s - but actually nil", dcl.SprintResource(desired.Comparator))
		return true
	}
	if !reflect.DeepEqual(desired.Comparator, actual.Comparator) && !dcl.IsZeroValue(desired.Comparator) {
		c.Config.Logger.Infof("Diff in Comparator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Comparator), dcl.SprintResource(actual.Comparator))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValues == nil && desired.TargetValues != nil && !dcl.IsEmptyValueIndirect(desired.TargetValues) {
		c.Config.Logger.Infof("desired TargetValues %s - but actually nil", dcl.SprintResource(desired.TargetValues))
		return true
	}
	if !dcl.StringSliceEquals(desired.TargetValues, actual.TargetValues) && !dcl.IsZeroValue(desired.TargetValues) {
		c.Config.Logger.Infof("Diff in TargetValues. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValues), dcl.SprintResource(actual.TargetValues))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValues == nil && desired.TargetValues != nil && !dcl.IsEmptyValueIndirect(desired.TargetValues) {
		c.Config.Logger.Infof("desired TargetValues %s - but actually nil", dcl.SprintResource(desired.TargetValues))
		return true
	}
	if !dcl.StringSliceEquals(desired.TargetValues, actual.TargetValues) && !dcl.IsZeroValue(desired.TargetValues) {
		c.Config.Logger.Infof("Diff in TargetValues. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValues), dcl.SprintResource(actual.TargetValues))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Types == nil && desired.Types != nil && !dcl.IsEmptyValueIndirect(desired.Types) {
		c.Config.Logger.Infof("desired Types %s - but actually nil", dcl.SprintResource(desired.Types))
		return true
	}
	if compareDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnumSlice(c, desired.Types, actual.Types) && !dcl.IsZeroValue(desired.Types) {
		c.Config.Logger.Infof("Diff in Types. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Types), dcl.SprintResource(actual.Types))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldown(c *Client, desired, actual *DashboardWidgetXyChartMetricDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MetricTypeDrilldown == nil && desired.MetricTypeDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.MetricTypeDrilldown) {
		c.Config.Logger.Infof("desired MetricTypeDrilldown %s - but actually nil", dcl.SprintResource(desired.MetricTypeDrilldown))
		return true
	}
	if compareDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, desired.MetricTypeDrilldown, actual.MetricTypeDrilldown) && !dcl.IsZeroValue(desired.MetricTypeDrilldown) {
		c.Config.Logger.Infof("Diff in MetricTypeDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetricTypeDrilldown), dcl.SprintResource(actual.MetricTypeDrilldown))
		return true
	}
	if actual.MetricLabelDrilldowns == nil && desired.MetricLabelDrilldowns != nil && !dcl.IsEmptyValueIndirect(desired.MetricLabelDrilldowns) {
		c.Config.Logger.Infof("desired MetricLabelDrilldowns %s - but actually nil", dcl.SprintResource(desired.MetricLabelDrilldowns))
		return true
	}
	if compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsSlice(c, desired.MetricLabelDrilldowns, actual.MetricLabelDrilldowns) && !dcl.IsZeroValue(desired.MetricLabelDrilldowns) {
		c.Config.Logger.Infof("Diff in MetricLabelDrilldowns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetricLabelDrilldowns), dcl.SprintResource(actual.MetricLabelDrilldowns))
		return true
	}
	if actual.MetricGroupByDrilldown == nil && desired.MetricGroupByDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.MetricGroupByDrilldown) {
		c.Config.Logger.Infof("desired MetricGroupByDrilldown %s - but actually nil", dcl.SprintResource(desired.MetricGroupByDrilldown))
		return true
	}
	if compareDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, desired.MetricGroupByDrilldown, actual.MetricGroupByDrilldown) && !dcl.IsZeroValue(desired.MetricGroupByDrilldown) {
		c.Config.Logger.Infof("Diff in MetricGroupByDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetricGroupByDrilldown), dcl.SprintResource(actual.MetricGroupByDrilldown))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownSlice(c *Client, desired, actual []DashboardWidgetXyChartMetricDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartMetricDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetXyChartMetricDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartMetricDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c *Client, desired, actual *DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValue == nil && desired.TargetValue != nil && !dcl.IsEmptyValueIndirect(desired.TargetValue) {
		c.Config.Logger.Infof("desired TargetValue %s - but actually nil", dcl.SprintResource(desired.TargetValue))
		return true
	}
	if !dcl.StringCanonicalize(desired.TargetValue, actual.TargetValue) && !dcl.IsZeroValue(desired.TargetValue) {
		c.Config.Logger.Infof("Diff in TargetValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValue), dcl.SprintResource(actual.TargetValue))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownSlice(c *Client, desired, actual []DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c *Client, desired, actual *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.LogicalOperator == nil && desired.LogicalOperator != nil && !dcl.IsEmptyValueIndirect(desired.LogicalOperator) {
		c.Config.Logger.Infof("desired LogicalOperator %s - but actually nil", dcl.SprintResource(desired.LogicalOperator))
		return true
	}
	if !reflect.DeepEqual(desired.LogicalOperator, actual.LogicalOperator) && !dcl.IsZeroValue(desired.LogicalOperator) {
		c.Config.Logger.Infof("Diff in LogicalOperator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LogicalOperator), dcl.SprintResource(actual.LogicalOperator))
		return true
	}
	if actual.ValueRestrictions == nil && desired.ValueRestrictions != nil && !dcl.IsEmptyValueIndirect(desired.ValueRestrictions) {
		c.Config.Logger.Infof("desired ValueRestrictions %s - but actually nil", dcl.SprintResource(desired.ValueRestrictions))
		return true
	}
	if compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c, desired.ValueRestrictions, actual.ValueRestrictions) && !dcl.IsZeroValue(desired.ValueRestrictions) {
		c.Config.Logger.Infof("Diff in ValueRestrictions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ValueRestrictions), dcl.SprintResource(actual.ValueRestrictions))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsSlice(c *Client, desired, actual []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c *Client, desired, actual *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValue == nil && desired.TargetValue != nil && !dcl.IsEmptyValueIndirect(desired.TargetValue) {
		c.Config.Logger.Infof("desired TargetValue %s - but actually nil", dcl.SprintResource(desired.TargetValue))
		return true
	}
	if !dcl.StringCanonicalize(desired.TargetValue, actual.TargetValue) && !dcl.IsZeroValue(desired.TargetValue) {
		c.Config.Logger.Infof("Diff in TargetValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValue), dcl.SprintResource(actual.TargetValue))
		return true
	}
	if actual.Comparator == nil && desired.Comparator != nil && !dcl.IsEmptyValueIndirect(desired.Comparator) {
		c.Config.Logger.Infof("desired Comparator %s - but actually nil", dcl.SprintResource(desired.Comparator))
		return true
	}
	if !reflect.DeepEqual(desired.Comparator, actual.Comparator) && !dcl.IsZeroValue(desired.Comparator) {
		c.Config.Logger.Infof("Diff in Comparator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Comparator), dcl.SprintResource(actual.Comparator))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c *Client, desired, actual []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c *Client, desired, actual *DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.ResourceLabels == nil && desired.ResourceLabels != nil && !dcl.IsEmptyValueIndirect(desired.ResourceLabels) {
		c.Config.Logger.Infof("desired ResourceLabels %s - but actually nil", dcl.SprintResource(desired.ResourceLabels))
		return true
	}
	if !dcl.StringSliceEquals(desired.ResourceLabels, actual.ResourceLabels) && !dcl.IsZeroValue(desired.ResourceLabels) {
		c.Config.Logger.Infof("Diff in ResourceLabels. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ResourceLabels), dcl.SprintResource(actual.ResourceLabels))
		return true
	}
	if actual.MetricLabels == nil && desired.MetricLabels != nil && !dcl.IsEmptyValueIndirect(desired.MetricLabels) {
		c.Config.Logger.Infof("desired MetricLabels %s - but actually nil", dcl.SprintResource(desired.MetricLabels))
		return true
	}
	if !dcl.StringSliceEquals(desired.MetricLabels, actual.MetricLabels) && !dcl.IsZeroValue(desired.MetricLabels) {
		c.Config.Logger.Infof("Diff in MetricLabels. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetricLabels), dcl.SprintResource(actual.MetricLabels))
		return true
	}
	if actual.MetadataSystemLabels == nil && desired.MetadataSystemLabels != nil && !dcl.IsEmptyValueIndirect(desired.MetadataSystemLabels) {
		c.Config.Logger.Infof("desired MetadataSystemLabels %s - but actually nil", dcl.SprintResource(desired.MetadataSystemLabels))
		return true
	}
	if !dcl.StringSliceEquals(desired.MetadataSystemLabels, actual.MetadataSystemLabels) && !dcl.IsZeroValue(desired.MetadataSystemLabels) {
		c.Config.Logger.Infof("Diff in MetadataSystemLabels. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetadataSystemLabels), dcl.SprintResource(actual.MetadataSystemLabels))
		return true
	}
	if actual.MetadataUserLabels == nil && desired.MetadataUserLabels != nil && !dcl.IsEmptyValueIndirect(desired.MetadataUserLabels) {
		c.Config.Logger.Infof("desired MetadataUserLabels %s - but actually nil", dcl.SprintResource(desired.MetadataUserLabels))
		return true
	}
	if !dcl.StringSliceEquals(desired.MetadataUserLabels, actual.MetadataUserLabels) && !dcl.IsZeroValue(desired.MetadataUserLabels) {
		c.Config.Logger.Infof("Diff in MetadataUserLabels. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetadataUserLabels), dcl.SprintResource(actual.MetadataUserLabels))
		return true
	}
	if actual.Reducer == nil && desired.Reducer != nil && !dcl.IsEmptyValueIndirect(desired.Reducer) {
		c.Config.Logger.Infof("desired Reducer %s - but actually nil", dcl.SprintResource(desired.Reducer))
		return true
	}
	if !reflect.DeepEqual(desired.Reducer, actual.Reducer) && !dcl.IsZeroValue(desired.Reducer) {
		c.Config.Logger.Infof("Diff in Reducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Reducer), dcl.SprintResource(actual.Reducer))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownSlice(c *Client, desired, actual []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartThresholds(c *Client, desired, actual *DashboardWidgetXyChartThresholds) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.Value == nil && desired.Value != nil && !dcl.IsEmptyValueIndirect(desired.Value) {
		c.Config.Logger.Infof("desired Value %s - but actually nil", dcl.SprintResource(desired.Value))
		return true
	}
	if !reflect.DeepEqual(desired.Value, actual.Value) && !dcl.IsZeroValue(desired.Value) {
		c.Config.Logger.Infof("Diff in Value. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Value), dcl.SprintResource(actual.Value))
		return true
	}
	if actual.Color == nil && desired.Color != nil && !dcl.IsEmptyValueIndirect(desired.Color) {
		c.Config.Logger.Infof("desired Color %s - but actually nil", dcl.SprintResource(desired.Color))
		return true
	}
	if !reflect.DeepEqual(desired.Color, actual.Color) && !dcl.IsZeroValue(desired.Color) {
		c.Config.Logger.Infof("Diff in Color. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Color), dcl.SprintResource(actual.Color))
		return true
	}
	if actual.Direction == nil && desired.Direction != nil && !dcl.IsEmptyValueIndirect(desired.Direction) {
		c.Config.Logger.Infof("desired Direction %s - but actually nil", dcl.SprintResource(desired.Direction))
		return true
	}
	if !reflect.DeepEqual(desired.Direction, actual.Direction) && !dcl.IsZeroValue(desired.Direction) {
		c.Config.Logger.Infof("Diff in Direction. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Direction), dcl.SprintResource(actual.Direction))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartThresholdsSlice(c *Client, desired, actual []DashboardWidgetXyChartThresholds) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartThresholds, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartThresholds(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartThresholds, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartThresholdsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartThresholds) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartThresholds, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartThresholds, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartThresholds(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartThresholds, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartXAxis(c *Client, desired, actual *DashboardWidgetXyChartXAxis) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartXAxisSlice(c *Client, desired, actual []DashboardWidgetXyChartXAxis) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartXAxis, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartXAxis(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartXAxis, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartXAxisMap(c *Client, desired, actual map[string]DashboardWidgetXyChartXAxis) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartXAxis, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartXAxis, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartXAxis(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartXAxis, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartYAxis(c *Client, desired, actual *DashboardWidgetXyChartYAxis) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartYAxisSlice(c *Client, desired, actual []DashboardWidgetXyChartYAxis) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartYAxis, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartYAxis(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartYAxis, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartYAxisMap(c *Client, desired, actual map[string]DashboardWidgetXyChartYAxis) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartYAxis, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartYAxis, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartYAxis(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartYAxis, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartChartOptions(c *Client, desired, actual *DashboardWidgetXyChartChartOptions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Mode == nil && desired.Mode != nil && !dcl.IsEmptyValueIndirect(desired.Mode) {
		c.Config.Logger.Infof("desired Mode %s - but actually nil", dcl.SprintResource(desired.Mode))
		return true
	}
	if !reflect.DeepEqual(desired.Mode, actual.Mode) && !dcl.IsZeroValue(desired.Mode) {
		c.Config.Logger.Infof("Diff in Mode. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Mode), dcl.SprintResource(actual.Mode))
		return true
	}
	if actual.ShowLegend == nil && desired.ShowLegend != nil && !dcl.IsEmptyValueIndirect(desired.ShowLegend) {
		c.Config.Logger.Infof("desired ShowLegend %s - but actually nil", dcl.SprintResource(desired.ShowLegend))
		return true
	}
	if !dcl.BoolCanonicalize(desired.ShowLegend, actual.ShowLegend) && !dcl.IsZeroValue(desired.ShowLegend) {
		c.Config.Logger.Infof("Diff in ShowLegend. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ShowLegend), dcl.SprintResource(actual.ShowLegend))
		return true
	}
	return false
}

func compareDashboardWidgetXyChartChartOptionsSlice(c *Client, desired, actual []DashboardWidgetXyChartChartOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartChartOptions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartChartOptions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartChartOptions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartChartOptionsMap(c *Client, desired, actual map[string]DashboardWidgetXyChartChartOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartChartOptions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartChartOptions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetXyChartChartOptions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartChartOptions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecard(c *Client, desired, actual *DashboardWidgetScorecard) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TimeSeriesQuery == nil && desired.TimeSeriesQuery != nil && !dcl.IsEmptyValueIndirect(desired.TimeSeriesQuery) {
		c.Config.Logger.Infof("desired TimeSeriesQuery %s - but actually nil", dcl.SprintResource(desired.TimeSeriesQuery))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQuery(c, desired.TimeSeriesQuery, actual.TimeSeriesQuery) && !dcl.IsZeroValue(desired.TimeSeriesQuery) {
		c.Config.Logger.Infof("Diff in TimeSeriesQuery. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TimeSeriesQuery), dcl.SprintResource(actual.TimeSeriesQuery))
		return true
	}
	if actual.SourceDrilldown == nil && desired.SourceDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.SourceDrilldown) {
		c.Config.Logger.Infof("desired SourceDrilldown %s - but actually nil", dcl.SprintResource(desired.SourceDrilldown))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldown(c, desired.SourceDrilldown, actual.SourceDrilldown) && !dcl.IsZeroValue(desired.SourceDrilldown) {
		c.Config.Logger.Infof("Diff in SourceDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.SourceDrilldown), dcl.SprintResource(actual.SourceDrilldown))
		return true
	}
	if actual.MetricDrilldown == nil && desired.MetricDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.MetricDrilldown) {
		c.Config.Logger.Infof("desired MetricDrilldown %s - but actually nil", dcl.SprintResource(desired.MetricDrilldown))
		return true
	}
	if compareDashboardWidgetScorecardMetricDrilldown(c, desired.MetricDrilldown, actual.MetricDrilldown) && !dcl.IsZeroValue(desired.MetricDrilldown) {
		c.Config.Logger.Infof("Diff in MetricDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetricDrilldown), dcl.SprintResource(actual.MetricDrilldown))
		return true
	}
	if actual.GaugeView == nil && desired.GaugeView != nil && !dcl.IsEmptyValueIndirect(desired.GaugeView) {
		c.Config.Logger.Infof("desired GaugeView %s - but actually nil", dcl.SprintResource(desired.GaugeView))
		return true
	}
	if compareDashboardWidgetScorecardGaugeView(c, desired.GaugeView, actual.GaugeView) && !dcl.IsZeroValue(desired.GaugeView) {
		c.Config.Logger.Infof("Diff in GaugeView. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GaugeView), dcl.SprintResource(actual.GaugeView))
		return true
	}
	if actual.SparkChartView == nil && desired.SparkChartView != nil && !dcl.IsEmptyValueIndirect(desired.SparkChartView) {
		c.Config.Logger.Infof("desired SparkChartView %s - but actually nil", dcl.SprintResource(desired.SparkChartView))
		return true
	}
	if compareDashboardWidgetScorecardSparkChartView(c, desired.SparkChartView, actual.SparkChartView) && !dcl.IsZeroValue(desired.SparkChartView) {
		c.Config.Logger.Infof("Diff in SparkChartView. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.SparkChartView), dcl.SprintResource(actual.SparkChartView))
		return true
	}
	if actual.Thresholds == nil && desired.Thresholds != nil && !dcl.IsEmptyValueIndirect(desired.Thresholds) {
		c.Config.Logger.Infof("desired Thresholds %s - but actually nil", dcl.SprintResource(desired.Thresholds))
		return true
	}
	if compareDashboardWidgetScorecardThresholdsSlice(c, desired.Thresholds, actual.Thresholds) && !dcl.IsZeroValue(desired.Thresholds) {
		c.Config.Logger.Infof("Diff in Thresholds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Thresholds), dcl.SprintResource(actual.Thresholds))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSlice(c *Client, desired, actual []DashboardWidgetScorecard) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecard, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecard(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecard, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMap(c *Client, desired, actual map[string]DashboardWidgetScorecard) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecard, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecard, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecard(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecard, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQuery(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQuery) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TimeSeriesFilter == nil && desired.TimeSeriesFilter != nil && !dcl.IsEmptyValueIndirect(desired.TimeSeriesFilter) {
		c.Config.Logger.Infof("desired TimeSeriesFilter %s - but actually nil", dcl.SprintResource(desired.TimeSeriesFilter))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, desired.TimeSeriesFilter, actual.TimeSeriesFilter) && !dcl.IsZeroValue(desired.TimeSeriesFilter) {
		c.Config.Logger.Infof("Diff in TimeSeriesFilter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TimeSeriesFilter), dcl.SprintResource(actual.TimeSeriesFilter))
		return true
	}
	if actual.TimeSeriesFilterRatio == nil && desired.TimeSeriesFilterRatio != nil && !dcl.IsEmptyValueIndirect(desired.TimeSeriesFilterRatio) {
		c.Config.Logger.Infof("desired TimeSeriesFilterRatio %s - but actually nil", dcl.SprintResource(desired.TimeSeriesFilterRatio))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, desired.TimeSeriesFilterRatio, actual.TimeSeriesFilterRatio) && !dcl.IsZeroValue(desired.TimeSeriesFilterRatio) {
		c.Config.Logger.Infof("Diff in TimeSeriesFilterRatio. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TimeSeriesFilterRatio), dcl.SprintResource(actual.TimeSeriesFilterRatio))
		return true
	}
	if actual.TimeSeriesQueryLanguage == nil && desired.TimeSeriesQueryLanguage != nil && !dcl.IsEmptyValueIndirect(desired.TimeSeriesQueryLanguage) {
		c.Config.Logger.Infof("desired TimeSeriesQueryLanguage %s - but actually nil", dcl.SprintResource(desired.TimeSeriesQueryLanguage))
		return true
	}
	if !dcl.StringCanonicalize(desired.TimeSeriesQueryLanguage, actual.TimeSeriesQueryLanguage) && !dcl.IsZeroValue(desired.TimeSeriesQueryLanguage) {
		c.Config.Logger.Infof("Diff in TimeSeriesQueryLanguage. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TimeSeriesQueryLanguage), dcl.SprintResource(actual.TimeSeriesQueryLanguage))
		return true
	}
	if actual.ApiSource == nil && desired.ApiSource != nil && !dcl.IsEmptyValueIndirect(desired.ApiSource) {
		c.Config.Logger.Infof("desired ApiSource %s - but actually nil", dcl.SprintResource(desired.ApiSource))
		return true
	}
	if !reflect.DeepEqual(desired.ApiSource, actual.ApiSource) && !dcl.IsZeroValue(desired.ApiSource) {
		c.Config.Logger.Infof("Diff in ApiSource. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ApiSource), dcl.SprintResource(actual.ApiSource))
		return true
	}
	if actual.UnitOverride == nil && desired.UnitOverride != nil && !dcl.IsEmptyValueIndirect(desired.UnitOverride) {
		c.Config.Logger.Infof("desired UnitOverride %s - but actually nil", dcl.SprintResource(desired.UnitOverride))
		return true
	}
	if !dcl.StringCanonicalize(desired.UnitOverride, actual.UnitOverride) && !dcl.IsZeroValue(desired.UnitOverride) {
		c.Config.Logger.Infof("Diff in UnitOverride. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.UnitOverride), dcl.SprintResource(actual.UnitOverride))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQuerySlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQuery) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQuery, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQuery(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQuery, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQuery) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQuery, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQuery, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQuery(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQuery, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Filter == nil && desired.Filter != nil && !dcl.IsEmptyValueIndirect(desired.Filter) {
		c.Config.Logger.Infof("desired Filter %s - but actually nil", dcl.SprintResource(desired.Filter))
		return true
	}
	if !dcl.StringCanonicalize(desired.Filter, actual.Filter) && !dcl.IsZeroValue(desired.Filter) {
		c.Config.Logger.Infof("Diff in Filter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Filter), dcl.SprintResource(actual.Filter))
		return true
	}
	if actual.Aggregation == nil && desired.Aggregation != nil && !dcl.IsEmptyValueIndirect(desired.Aggregation) {
		c.Config.Logger.Infof("desired Aggregation %s - but actually nil", dcl.SprintResource(desired.Aggregation))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, desired.Aggregation, actual.Aggregation) && !dcl.IsZeroValue(desired.Aggregation) {
		c.Config.Logger.Infof("Diff in Aggregation. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Aggregation), dcl.SprintResource(actual.Aggregation))
		return true
	}
	if actual.SecondaryAggregation == nil && desired.SecondaryAggregation != nil && !dcl.IsEmptyValueIndirect(desired.SecondaryAggregation) {
		c.Config.Logger.Infof("desired SecondaryAggregation %s - but actually nil", dcl.SprintResource(desired.SecondaryAggregation))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, desired.SecondaryAggregation, actual.SecondaryAggregation) && !dcl.IsZeroValue(desired.SecondaryAggregation) {
		c.Config.Logger.Infof("Diff in SecondaryAggregation. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.SecondaryAggregation), dcl.SprintResource(actual.SecondaryAggregation))
		return true
	}
	if actual.PickTimeSeriesFilter == nil && desired.PickTimeSeriesFilter != nil && !dcl.IsEmptyValueIndirect(desired.PickTimeSeriesFilter) {
		c.Config.Logger.Infof("desired PickTimeSeriesFilter %s - but actually nil", dcl.SprintResource(desired.PickTimeSeriesFilter))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, desired.PickTimeSeriesFilter, actual.PickTimeSeriesFilter) && !dcl.IsZeroValue(desired.PickTimeSeriesFilter) {
		c.Config.Logger.Infof("Diff in PickTimeSeriesFilter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PickTimeSeriesFilter), dcl.SprintResource(actual.PickTimeSeriesFilter))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.AlignmentPeriod == nil && desired.AlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("desired AlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.AlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.AlignmentPeriod, actual.AlignmentPeriod) && !dcl.IsZeroValue(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("Diff in AlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.AlignmentPeriod), dcl.SprintResource(actual.AlignmentPeriod))
		return true
	}
	if actual.PerSeriesAligner == nil && desired.PerSeriesAligner != nil && !dcl.IsEmptyValueIndirect(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("desired PerSeriesAligner %s - but actually nil", dcl.SprintResource(desired.PerSeriesAligner))
		return true
	}
	if !reflect.DeepEqual(desired.PerSeriesAligner, actual.PerSeriesAligner) && !dcl.IsZeroValue(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("Diff in PerSeriesAligner. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PerSeriesAligner), dcl.SprintResource(actual.PerSeriesAligner))
		return true
	}
	if actual.CrossSeriesReducer == nil && desired.CrossSeriesReducer != nil && !dcl.IsEmptyValueIndirect(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("desired CrossSeriesReducer %s - but actually nil", dcl.SprintResource(desired.CrossSeriesReducer))
		return true
	}
	if !reflect.DeepEqual(desired.CrossSeriesReducer, actual.CrossSeriesReducer) && !dcl.IsZeroValue(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("Diff in CrossSeriesReducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.CrossSeriesReducer), dcl.SprintResource(actual.CrossSeriesReducer))
		return true
	}
	if actual.GroupByFields == nil && desired.GroupByFields != nil && !dcl.IsEmptyValueIndirect(desired.GroupByFields) {
		c.Config.Logger.Infof("desired GroupByFields %s - but actually nil", dcl.SprintResource(desired.GroupByFields))
		return true
	}
	if !dcl.StringSliceEquals(desired.GroupByFields, actual.GroupByFields) && !dcl.IsZeroValue(desired.GroupByFields) {
		c.Config.Logger.Infof("Diff in GroupByFields. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupByFields), dcl.SprintResource(actual.GroupByFields))
		return true
	}
	if actual.ReduceFractionLessThanParams == nil && desired.ReduceFractionLessThanParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("desired ReduceFractionLessThanParams %s - but actually nil", dcl.SprintResource(desired.ReduceFractionLessThanParams))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, desired.ReduceFractionLessThanParams, actual.ReduceFractionLessThanParams) && !dcl.IsZeroValue(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("Diff in ReduceFractionLessThanParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceFractionLessThanParams), dcl.SprintResource(actual.ReduceFractionLessThanParams))
		return true
	}
	if actual.ReduceMakeDistributionParams == nil && desired.ReduceMakeDistributionParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("desired ReduceMakeDistributionParams %s - but actually nil", dcl.SprintResource(desired.ReduceMakeDistributionParams))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, desired.ReduceMakeDistributionParams, actual.ReduceMakeDistributionParams) && !dcl.IsZeroValue(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("Diff in ReduceMakeDistributionParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceMakeDistributionParams), dcl.SprintResource(actual.ReduceMakeDistributionParams))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Threshold == nil && desired.Threshold != nil && !dcl.IsEmptyValueIndirect(desired.Threshold) {
		c.Config.Logger.Infof("desired Threshold %s - but actually nil", dcl.SprintResource(desired.Threshold))
		return true
	}
	if !reflect.DeepEqual(desired.Threshold, actual.Threshold) && !dcl.IsZeroValue(desired.Threshold) {
		c.Config.Logger.Infof("Diff in Threshold. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Threshold), dcl.SprintResource(actual.Threshold))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.BucketOptions == nil && desired.BucketOptions != nil && !dcl.IsEmptyValueIndirect(desired.BucketOptions) {
		c.Config.Logger.Infof("desired BucketOptions %s - but actually nil", dcl.SprintResource(desired.BucketOptions))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, desired.BucketOptions, actual.BucketOptions) && !dcl.IsZeroValue(desired.BucketOptions) {
		c.Config.Logger.Infof("Diff in BucketOptions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.BucketOptions), dcl.SprintResource(actual.BucketOptions))
		return true
	}
	if actual.ExemplarSampling == nil && desired.ExemplarSampling != nil && !dcl.IsEmptyValueIndirect(desired.ExemplarSampling) {
		c.Config.Logger.Infof("desired ExemplarSampling %s - but actually nil", dcl.SprintResource(desired.ExemplarSampling))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, desired.ExemplarSampling, actual.ExemplarSampling) && !dcl.IsZeroValue(desired.ExemplarSampling) {
		c.Config.Logger.Infof("Diff in ExemplarSampling. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExemplarSampling), dcl.SprintResource(actual.ExemplarSampling))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.LinearBuckets == nil && desired.LinearBuckets != nil && !dcl.IsEmptyValueIndirect(desired.LinearBuckets) {
		c.Config.Logger.Infof("desired LinearBuckets %s - but actually nil", dcl.SprintResource(desired.LinearBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, desired.LinearBuckets, actual.LinearBuckets) && !dcl.IsZeroValue(desired.LinearBuckets) {
		c.Config.Logger.Infof("Diff in LinearBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LinearBuckets), dcl.SprintResource(actual.LinearBuckets))
		return true
	}
	if actual.ExponentialBuckets == nil && desired.ExponentialBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("desired ExponentialBuckets %s - but actually nil", dcl.SprintResource(desired.ExponentialBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, desired.ExponentialBuckets, actual.ExponentialBuckets) && !dcl.IsZeroValue(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("Diff in ExponentialBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExponentialBuckets), dcl.SprintResource(actual.ExponentialBuckets))
		return true
	}
	if actual.ExplicitBuckets == nil && desired.ExplicitBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("desired ExplicitBuckets %s - but actually nil", dcl.SprintResource(desired.ExplicitBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, desired.ExplicitBuckets, actual.ExplicitBuckets) && !dcl.IsZeroValue(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("Diff in ExplicitBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExplicitBuckets), dcl.SprintResource(actual.ExplicitBuckets))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Offset == nil && desired.Offset != nil && !dcl.IsEmptyValueIndirect(desired.Offset) {
		c.Config.Logger.Infof("desired Offset %s - but actually nil", dcl.SprintResource(desired.Offset))
		return true
	}
	if !reflect.DeepEqual(desired.Offset, actual.Offset) && !dcl.IsZeroValue(desired.Offset) {
		c.Config.Logger.Infof("Diff in Offset. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Offset), dcl.SprintResource(actual.Offset))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.GrowthFactor == nil && desired.GrowthFactor != nil && !dcl.IsEmptyValueIndirect(desired.GrowthFactor) {
		c.Config.Logger.Infof("desired GrowthFactor %s - but actually nil", dcl.SprintResource(desired.GrowthFactor))
		return true
	}
	if !reflect.DeepEqual(desired.GrowthFactor, actual.GrowthFactor) && !dcl.IsZeroValue(desired.GrowthFactor) {
		c.Config.Logger.Infof("Diff in GrowthFactor. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GrowthFactor), dcl.SprintResource(actual.GrowthFactor))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Bounds == nil && desired.Bounds != nil && !dcl.IsEmptyValueIndirect(desired.Bounds) {
		c.Config.Logger.Infof("desired Bounds %s - but actually nil", dcl.SprintResource(desired.Bounds))
		return true
	}
	if !dcl.FloatSliceEquals(desired.Bounds, actual.Bounds) && !dcl.IsZeroValue(desired.Bounds) {
		c.Config.Logger.Infof("Diff in Bounds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Bounds), dcl.SprintResource(actual.Bounds))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MinimumValue == nil && desired.MinimumValue != nil && !dcl.IsEmptyValueIndirect(desired.MinimumValue) {
		c.Config.Logger.Infof("desired MinimumValue %s - but actually nil", dcl.SprintResource(desired.MinimumValue))
		return true
	}
	if !reflect.DeepEqual(desired.MinimumValue, actual.MinimumValue) && !dcl.IsZeroValue(desired.MinimumValue) {
		c.Config.Logger.Infof("Diff in MinimumValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinimumValue), dcl.SprintResource(actual.MinimumValue))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.AlignmentPeriod == nil && desired.AlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("desired AlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.AlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.AlignmentPeriod, actual.AlignmentPeriod) && !dcl.IsZeroValue(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("Diff in AlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.AlignmentPeriod), dcl.SprintResource(actual.AlignmentPeriod))
		return true
	}
	if actual.PerSeriesAligner == nil && desired.PerSeriesAligner != nil && !dcl.IsEmptyValueIndirect(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("desired PerSeriesAligner %s - but actually nil", dcl.SprintResource(desired.PerSeriesAligner))
		return true
	}
	if !reflect.DeepEqual(desired.PerSeriesAligner, actual.PerSeriesAligner) && !dcl.IsZeroValue(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("Diff in PerSeriesAligner. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PerSeriesAligner), dcl.SprintResource(actual.PerSeriesAligner))
		return true
	}
	if actual.CrossSeriesReducer == nil && desired.CrossSeriesReducer != nil && !dcl.IsEmptyValueIndirect(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("desired CrossSeriesReducer %s - but actually nil", dcl.SprintResource(desired.CrossSeriesReducer))
		return true
	}
	if !reflect.DeepEqual(desired.CrossSeriesReducer, actual.CrossSeriesReducer) && !dcl.IsZeroValue(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("Diff in CrossSeriesReducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.CrossSeriesReducer), dcl.SprintResource(actual.CrossSeriesReducer))
		return true
	}
	if actual.GroupByFields == nil && desired.GroupByFields != nil && !dcl.IsEmptyValueIndirect(desired.GroupByFields) {
		c.Config.Logger.Infof("desired GroupByFields %s - but actually nil", dcl.SprintResource(desired.GroupByFields))
		return true
	}
	if !dcl.StringSliceEquals(desired.GroupByFields, actual.GroupByFields) && !dcl.IsZeroValue(desired.GroupByFields) {
		c.Config.Logger.Infof("Diff in GroupByFields. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupByFields), dcl.SprintResource(actual.GroupByFields))
		return true
	}
	if actual.ReduceFractionLessThanParams == nil && desired.ReduceFractionLessThanParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("desired ReduceFractionLessThanParams %s - but actually nil", dcl.SprintResource(desired.ReduceFractionLessThanParams))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, desired.ReduceFractionLessThanParams, actual.ReduceFractionLessThanParams) && !dcl.IsZeroValue(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("Diff in ReduceFractionLessThanParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceFractionLessThanParams), dcl.SprintResource(actual.ReduceFractionLessThanParams))
		return true
	}
	if actual.ReduceMakeDistributionParams == nil && desired.ReduceMakeDistributionParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("desired ReduceMakeDistributionParams %s - but actually nil", dcl.SprintResource(desired.ReduceMakeDistributionParams))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, desired.ReduceMakeDistributionParams, actual.ReduceMakeDistributionParams) && !dcl.IsZeroValue(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("Diff in ReduceMakeDistributionParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceMakeDistributionParams), dcl.SprintResource(actual.ReduceMakeDistributionParams))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Threshold == nil && desired.Threshold != nil && !dcl.IsEmptyValueIndirect(desired.Threshold) {
		c.Config.Logger.Infof("desired Threshold %s - but actually nil", dcl.SprintResource(desired.Threshold))
		return true
	}
	if !reflect.DeepEqual(desired.Threshold, actual.Threshold) && !dcl.IsZeroValue(desired.Threshold) {
		c.Config.Logger.Infof("Diff in Threshold. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Threshold), dcl.SprintResource(actual.Threshold))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.BucketOptions == nil && desired.BucketOptions != nil && !dcl.IsEmptyValueIndirect(desired.BucketOptions) {
		c.Config.Logger.Infof("desired BucketOptions %s - but actually nil", dcl.SprintResource(desired.BucketOptions))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, desired.BucketOptions, actual.BucketOptions) && !dcl.IsZeroValue(desired.BucketOptions) {
		c.Config.Logger.Infof("Diff in BucketOptions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.BucketOptions), dcl.SprintResource(actual.BucketOptions))
		return true
	}
	if actual.ExemplarSampling == nil && desired.ExemplarSampling != nil && !dcl.IsEmptyValueIndirect(desired.ExemplarSampling) {
		c.Config.Logger.Infof("desired ExemplarSampling %s - but actually nil", dcl.SprintResource(desired.ExemplarSampling))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, desired.ExemplarSampling, actual.ExemplarSampling) && !dcl.IsZeroValue(desired.ExemplarSampling) {
		c.Config.Logger.Infof("Diff in ExemplarSampling. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExemplarSampling), dcl.SprintResource(actual.ExemplarSampling))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.LinearBuckets == nil && desired.LinearBuckets != nil && !dcl.IsEmptyValueIndirect(desired.LinearBuckets) {
		c.Config.Logger.Infof("desired LinearBuckets %s - but actually nil", dcl.SprintResource(desired.LinearBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, desired.LinearBuckets, actual.LinearBuckets) && !dcl.IsZeroValue(desired.LinearBuckets) {
		c.Config.Logger.Infof("Diff in LinearBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LinearBuckets), dcl.SprintResource(actual.LinearBuckets))
		return true
	}
	if actual.ExponentialBuckets == nil && desired.ExponentialBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("desired ExponentialBuckets %s - but actually nil", dcl.SprintResource(desired.ExponentialBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, desired.ExponentialBuckets, actual.ExponentialBuckets) && !dcl.IsZeroValue(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("Diff in ExponentialBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExponentialBuckets), dcl.SprintResource(actual.ExponentialBuckets))
		return true
	}
	if actual.ExplicitBuckets == nil && desired.ExplicitBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("desired ExplicitBuckets %s - but actually nil", dcl.SprintResource(desired.ExplicitBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, desired.ExplicitBuckets, actual.ExplicitBuckets) && !dcl.IsZeroValue(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("Diff in ExplicitBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExplicitBuckets), dcl.SprintResource(actual.ExplicitBuckets))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Offset == nil && desired.Offset != nil && !dcl.IsEmptyValueIndirect(desired.Offset) {
		c.Config.Logger.Infof("desired Offset %s - but actually nil", dcl.SprintResource(desired.Offset))
		return true
	}
	if !reflect.DeepEqual(desired.Offset, actual.Offset) && !dcl.IsZeroValue(desired.Offset) {
		c.Config.Logger.Infof("Diff in Offset. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Offset), dcl.SprintResource(actual.Offset))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.GrowthFactor == nil && desired.GrowthFactor != nil && !dcl.IsEmptyValueIndirect(desired.GrowthFactor) {
		c.Config.Logger.Infof("desired GrowthFactor %s - but actually nil", dcl.SprintResource(desired.GrowthFactor))
		return true
	}
	if !reflect.DeepEqual(desired.GrowthFactor, actual.GrowthFactor) && !dcl.IsZeroValue(desired.GrowthFactor) {
		c.Config.Logger.Infof("Diff in GrowthFactor. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GrowthFactor), dcl.SprintResource(actual.GrowthFactor))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Bounds == nil && desired.Bounds != nil && !dcl.IsEmptyValueIndirect(desired.Bounds) {
		c.Config.Logger.Infof("desired Bounds %s - but actually nil", dcl.SprintResource(desired.Bounds))
		return true
	}
	if !dcl.FloatSliceEquals(desired.Bounds, actual.Bounds) && !dcl.IsZeroValue(desired.Bounds) {
		c.Config.Logger.Infof("Diff in Bounds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Bounds), dcl.SprintResource(actual.Bounds))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MinimumValue == nil && desired.MinimumValue != nil && !dcl.IsEmptyValueIndirect(desired.MinimumValue) {
		c.Config.Logger.Infof("desired MinimumValue %s - but actually nil", dcl.SprintResource(desired.MinimumValue))
		return true
	}
	if !reflect.DeepEqual(desired.MinimumValue, actual.MinimumValue) && !dcl.IsZeroValue(desired.MinimumValue) {
		c.Config.Logger.Infof("Diff in MinimumValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinimumValue), dcl.SprintResource(actual.MinimumValue))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.RankingMethod == nil && desired.RankingMethod != nil && !dcl.IsEmptyValueIndirect(desired.RankingMethod) {
		c.Config.Logger.Infof("desired RankingMethod %s - but actually nil", dcl.SprintResource(desired.RankingMethod))
		return true
	}
	if !reflect.DeepEqual(desired.RankingMethod, actual.RankingMethod) && !dcl.IsZeroValue(desired.RankingMethod) {
		c.Config.Logger.Infof("Diff in RankingMethod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.RankingMethod), dcl.SprintResource(actual.RankingMethod))
		return true
	}
	if actual.NumTimeSeries == nil && desired.NumTimeSeries != nil && !dcl.IsEmptyValueIndirect(desired.NumTimeSeries) {
		c.Config.Logger.Infof("desired NumTimeSeries %s - but actually nil", dcl.SprintResource(desired.NumTimeSeries))
		return true
	}
	if !reflect.DeepEqual(desired.NumTimeSeries, actual.NumTimeSeries) && !dcl.IsZeroValue(desired.NumTimeSeries) {
		c.Config.Logger.Infof("Diff in NumTimeSeries. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumTimeSeries), dcl.SprintResource(actual.NumTimeSeries))
		return true
	}
	if actual.Direction == nil && desired.Direction != nil && !dcl.IsEmptyValueIndirect(desired.Direction) {
		c.Config.Logger.Infof("desired Direction %s - but actually nil", dcl.SprintResource(desired.Direction))
		return true
	}
	if !reflect.DeepEqual(desired.Direction, actual.Direction) && !dcl.IsZeroValue(desired.Direction) {
		c.Config.Logger.Infof("Diff in Direction. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Direction), dcl.SprintResource(actual.Direction))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Numerator == nil && desired.Numerator != nil && !dcl.IsEmptyValueIndirect(desired.Numerator) {
		c.Config.Logger.Infof("desired Numerator %s - but actually nil", dcl.SprintResource(desired.Numerator))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, desired.Numerator, actual.Numerator) && !dcl.IsZeroValue(desired.Numerator) {
		c.Config.Logger.Infof("Diff in Numerator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Numerator), dcl.SprintResource(actual.Numerator))
		return true
	}
	if actual.Denominator == nil && desired.Denominator != nil && !dcl.IsEmptyValueIndirect(desired.Denominator) {
		c.Config.Logger.Infof("desired Denominator %s - but actually nil", dcl.SprintResource(desired.Denominator))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, desired.Denominator, actual.Denominator) && !dcl.IsZeroValue(desired.Denominator) {
		c.Config.Logger.Infof("Diff in Denominator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Denominator), dcl.SprintResource(actual.Denominator))
		return true
	}
	if actual.SecondaryAggregation == nil && desired.SecondaryAggregation != nil && !dcl.IsEmptyValueIndirect(desired.SecondaryAggregation) {
		c.Config.Logger.Infof("desired SecondaryAggregation %s - but actually nil", dcl.SprintResource(desired.SecondaryAggregation))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, desired.SecondaryAggregation, actual.SecondaryAggregation) && !dcl.IsZeroValue(desired.SecondaryAggregation) {
		c.Config.Logger.Infof("Diff in SecondaryAggregation. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.SecondaryAggregation), dcl.SprintResource(actual.SecondaryAggregation))
		return true
	}
	if actual.PickTimeSeriesFilter == nil && desired.PickTimeSeriesFilter != nil && !dcl.IsEmptyValueIndirect(desired.PickTimeSeriesFilter) {
		c.Config.Logger.Infof("desired PickTimeSeriesFilter %s - but actually nil", dcl.SprintResource(desired.PickTimeSeriesFilter))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, desired.PickTimeSeriesFilter, actual.PickTimeSeriesFilter) && !dcl.IsZeroValue(desired.PickTimeSeriesFilter) {
		c.Config.Logger.Infof("Diff in PickTimeSeriesFilter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PickTimeSeriesFilter), dcl.SprintResource(actual.PickTimeSeriesFilter))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Filter == nil && desired.Filter != nil && !dcl.IsEmptyValueIndirect(desired.Filter) {
		c.Config.Logger.Infof("desired Filter %s - but actually nil", dcl.SprintResource(desired.Filter))
		return true
	}
	if !dcl.StringCanonicalize(desired.Filter, actual.Filter) && !dcl.IsZeroValue(desired.Filter) {
		c.Config.Logger.Infof("Diff in Filter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Filter), dcl.SprintResource(actual.Filter))
		return true
	}
	if actual.Aggregation == nil && desired.Aggregation != nil && !dcl.IsEmptyValueIndirect(desired.Aggregation) {
		c.Config.Logger.Infof("desired Aggregation %s - but actually nil", dcl.SprintResource(desired.Aggregation))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, desired.Aggregation, actual.Aggregation) && !dcl.IsZeroValue(desired.Aggregation) {
		c.Config.Logger.Infof("Diff in Aggregation. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Aggregation), dcl.SprintResource(actual.Aggregation))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.AlignmentPeriod == nil && desired.AlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("desired AlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.AlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.AlignmentPeriod, actual.AlignmentPeriod) && !dcl.IsZeroValue(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("Diff in AlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.AlignmentPeriod), dcl.SprintResource(actual.AlignmentPeriod))
		return true
	}
	if actual.PerSeriesAligner == nil && desired.PerSeriesAligner != nil && !dcl.IsEmptyValueIndirect(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("desired PerSeriesAligner %s - but actually nil", dcl.SprintResource(desired.PerSeriesAligner))
		return true
	}
	if !reflect.DeepEqual(desired.PerSeriesAligner, actual.PerSeriesAligner) && !dcl.IsZeroValue(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("Diff in PerSeriesAligner. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PerSeriesAligner), dcl.SprintResource(actual.PerSeriesAligner))
		return true
	}
	if actual.CrossSeriesReducer == nil && desired.CrossSeriesReducer != nil && !dcl.IsEmptyValueIndirect(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("desired CrossSeriesReducer %s - but actually nil", dcl.SprintResource(desired.CrossSeriesReducer))
		return true
	}
	if !reflect.DeepEqual(desired.CrossSeriesReducer, actual.CrossSeriesReducer) && !dcl.IsZeroValue(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("Diff in CrossSeriesReducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.CrossSeriesReducer), dcl.SprintResource(actual.CrossSeriesReducer))
		return true
	}
	if actual.GroupByFields == nil && desired.GroupByFields != nil && !dcl.IsEmptyValueIndirect(desired.GroupByFields) {
		c.Config.Logger.Infof("desired GroupByFields %s - but actually nil", dcl.SprintResource(desired.GroupByFields))
		return true
	}
	if !dcl.StringSliceEquals(desired.GroupByFields, actual.GroupByFields) && !dcl.IsZeroValue(desired.GroupByFields) {
		c.Config.Logger.Infof("Diff in GroupByFields. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupByFields), dcl.SprintResource(actual.GroupByFields))
		return true
	}
	if actual.ReduceFractionLessThanParams == nil && desired.ReduceFractionLessThanParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("desired ReduceFractionLessThanParams %s - but actually nil", dcl.SprintResource(desired.ReduceFractionLessThanParams))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, desired.ReduceFractionLessThanParams, actual.ReduceFractionLessThanParams) && !dcl.IsZeroValue(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("Diff in ReduceFractionLessThanParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceFractionLessThanParams), dcl.SprintResource(actual.ReduceFractionLessThanParams))
		return true
	}
	if actual.ReduceMakeDistributionParams == nil && desired.ReduceMakeDistributionParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("desired ReduceMakeDistributionParams %s - but actually nil", dcl.SprintResource(desired.ReduceMakeDistributionParams))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, desired.ReduceMakeDistributionParams, actual.ReduceMakeDistributionParams) && !dcl.IsZeroValue(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("Diff in ReduceMakeDistributionParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceMakeDistributionParams), dcl.SprintResource(actual.ReduceMakeDistributionParams))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Threshold == nil && desired.Threshold != nil && !dcl.IsEmptyValueIndirect(desired.Threshold) {
		c.Config.Logger.Infof("desired Threshold %s - but actually nil", dcl.SprintResource(desired.Threshold))
		return true
	}
	if !reflect.DeepEqual(desired.Threshold, actual.Threshold) && !dcl.IsZeroValue(desired.Threshold) {
		c.Config.Logger.Infof("Diff in Threshold. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Threshold), dcl.SprintResource(actual.Threshold))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.BucketOptions == nil && desired.BucketOptions != nil && !dcl.IsEmptyValueIndirect(desired.BucketOptions) {
		c.Config.Logger.Infof("desired BucketOptions %s - but actually nil", dcl.SprintResource(desired.BucketOptions))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, desired.BucketOptions, actual.BucketOptions) && !dcl.IsZeroValue(desired.BucketOptions) {
		c.Config.Logger.Infof("Diff in BucketOptions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.BucketOptions), dcl.SprintResource(actual.BucketOptions))
		return true
	}
	if actual.ExemplarSampling == nil && desired.ExemplarSampling != nil && !dcl.IsEmptyValueIndirect(desired.ExemplarSampling) {
		c.Config.Logger.Infof("desired ExemplarSampling %s - but actually nil", dcl.SprintResource(desired.ExemplarSampling))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, desired.ExemplarSampling, actual.ExemplarSampling) && !dcl.IsZeroValue(desired.ExemplarSampling) {
		c.Config.Logger.Infof("Diff in ExemplarSampling. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExemplarSampling), dcl.SprintResource(actual.ExemplarSampling))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.LinearBuckets == nil && desired.LinearBuckets != nil && !dcl.IsEmptyValueIndirect(desired.LinearBuckets) {
		c.Config.Logger.Infof("desired LinearBuckets %s - but actually nil", dcl.SprintResource(desired.LinearBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, desired.LinearBuckets, actual.LinearBuckets) && !dcl.IsZeroValue(desired.LinearBuckets) {
		c.Config.Logger.Infof("Diff in LinearBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LinearBuckets), dcl.SprintResource(actual.LinearBuckets))
		return true
	}
	if actual.ExponentialBuckets == nil && desired.ExponentialBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("desired ExponentialBuckets %s - but actually nil", dcl.SprintResource(desired.ExponentialBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, desired.ExponentialBuckets, actual.ExponentialBuckets) && !dcl.IsZeroValue(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("Diff in ExponentialBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExponentialBuckets), dcl.SprintResource(actual.ExponentialBuckets))
		return true
	}
	if actual.ExplicitBuckets == nil && desired.ExplicitBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("desired ExplicitBuckets %s - but actually nil", dcl.SprintResource(desired.ExplicitBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, desired.ExplicitBuckets, actual.ExplicitBuckets) && !dcl.IsZeroValue(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("Diff in ExplicitBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExplicitBuckets), dcl.SprintResource(actual.ExplicitBuckets))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Offset == nil && desired.Offset != nil && !dcl.IsEmptyValueIndirect(desired.Offset) {
		c.Config.Logger.Infof("desired Offset %s - but actually nil", dcl.SprintResource(desired.Offset))
		return true
	}
	if !reflect.DeepEqual(desired.Offset, actual.Offset) && !dcl.IsZeroValue(desired.Offset) {
		c.Config.Logger.Infof("Diff in Offset. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Offset), dcl.SprintResource(actual.Offset))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.GrowthFactor == nil && desired.GrowthFactor != nil && !dcl.IsEmptyValueIndirect(desired.GrowthFactor) {
		c.Config.Logger.Infof("desired GrowthFactor %s - but actually nil", dcl.SprintResource(desired.GrowthFactor))
		return true
	}
	if !reflect.DeepEqual(desired.GrowthFactor, actual.GrowthFactor) && !dcl.IsZeroValue(desired.GrowthFactor) {
		c.Config.Logger.Infof("Diff in GrowthFactor. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GrowthFactor), dcl.SprintResource(actual.GrowthFactor))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Bounds == nil && desired.Bounds != nil && !dcl.IsEmptyValueIndirect(desired.Bounds) {
		c.Config.Logger.Infof("desired Bounds %s - but actually nil", dcl.SprintResource(desired.Bounds))
		return true
	}
	if !dcl.FloatSliceEquals(desired.Bounds, actual.Bounds) && !dcl.IsZeroValue(desired.Bounds) {
		c.Config.Logger.Infof("Diff in Bounds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Bounds), dcl.SprintResource(actual.Bounds))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MinimumValue == nil && desired.MinimumValue != nil && !dcl.IsEmptyValueIndirect(desired.MinimumValue) {
		c.Config.Logger.Infof("desired MinimumValue %s - but actually nil", dcl.SprintResource(desired.MinimumValue))
		return true
	}
	if !reflect.DeepEqual(desired.MinimumValue, actual.MinimumValue) && !dcl.IsZeroValue(desired.MinimumValue) {
		c.Config.Logger.Infof("Diff in MinimumValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinimumValue), dcl.SprintResource(actual.MinimumValue))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Filter == nil && desired.Filter != nil && !dcl.IsEmptyValueIndirect(desired.Filter) {
		c.Config.Logger.Infof("desired Filter %s - but actually nil", dcl.SprintResource(desired.Filter))
		return true
	}
	if !dcl.StringCanonicalize(desired.Filter, actual.Filter) && !dcl.IsZeroValue(desired.Filter) {
		c.Config.Logger.Infof("Diff in Filter. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Filter), dcl.SprintResource(actual.Filter))
		return true
	}
	if actual.Aggregation == nil && desired.Aggregation != nil && !dcl.IsEmptyValueIndirect(desired.Aggregation) {
		c.Config.Logger.Infof("desired Aggregation %s - but actually nil", dcl.SprintResource(desired.Aggregation))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, desired.Aggregation, actual.Aggregation) && !dcl.IsZeroValue(desired.Aggregation) {
		c.Config.Logger.Infof("Diff in Aggregation. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Aggregation), dcl.SprintResource(actual.Aggregation))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.AlignmentPeriod == nil && desired.AlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("desired AlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.AlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.AlignmentPeriod, actual.AlignmentPeriod) && !dcl.IsZeroValue(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("Diff in AlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.AlignmentPeriod), dcl.SprintResource(actual.AlignmentPeriod))
		return true
	}
	if actual.PerSeriesAligner == nil && desired.PerSeriesAligner != nil && !dcl.IsEmptyValueIndirect(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("desired PerSeriesAligner %s - but actually nil", dcl.SprintResource(desired.PerSeriesAligner))
		return true
	}
	if !reflect.DeepEqual(desired.PerSeriesAligner, actual.PerSeriesAligner) && !dcl.IsZeroValue(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("Diff in PerSeriesAligner. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PerSeriesAligner), dcl.SprintResource(actual.PerSeriesAligner))
		return true
	}
	if actual.CrossSeriesReducer == nil && desired.CrossSeriesReducer != nil && !dcl.IsEmptyValueIndirect(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("desired CrossSeriesReducer %s - but actually nil", dcl.SprintResource(desired.CrossSeriesReducer))
		return true
	}
	if !reflect.DeepEqual(desired.CrossSeriesReducer, actual.CrossSeriesReducer) && !dcl.IsZeroValue(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("Diff in CrossSeriesReducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.CrossSeriesReducer), dcl.SprintResource(actual.CrossSeriesReducer))
		return true
	}
	if actual.GroupByFields == nil && desired.GroupByFields != nil && !dcl.IsEmptyValueIndirect(desired.GroupByFields) {
		c.Config.Logger.Infof("desired GroupByFields %s - but actually nil", dcl.SprintResource(desired.GroupByFields))
		return true
	}
	if !dcl.StringSliceEquals(desired.GroupByFields, actual.GroupByFields) && !dcl.IsZeroValue(desired.GroupByFields) {
		c.Config.Logger.Infof("Diff in GroupByFields. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupByFields), dcl.SprintResource(actual.GroupByFields))
		return true
	}
	if actual.ReduceFractionLessThanParams == nil && desired.ReduceFractionLessThanParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("desired ReduceFractionLessThanParams %s - but actually nil", dcl.SprintResource(desired.ReduceFractionLessThanParams))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, desired.ReduceFractionLessThanParams, actual.ReduceFractionLessThanParams) && !dcl.IsZeroValue(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("Diff in ReduceFractionLessThanParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceFractionLessThanParams), dcl.SprintResource(actual.ReduceFractionLessThanParams))
		return true
	}
	if actual.ReduceMakeDistributionParams == nil && desired.ReduceMakeDistributionParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("desired ReduceMakeDistributionParams %s - but actually nil", dcl.SprintResource(desired.ReduceMakeDistributionParams))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, desired.ReduceMakeDistributionParams, actual.ReduceMakeDistributionParams) && !dcl.IsZeroValue(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("Diff in ReduceMakeDistributionParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceMakeDistributionParams), dcl.SprintResource(actual.ReduceMakeDistributionParams))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Threshold == nil && desired.Threshold != nil && !dcl.IsEmptyValueIndirect(desired.Threshold) {
		c.Config.Logger.Infof("desired Threshold %s - but actually nil", dcl.SprintResource(desired.Threshold))
		return true
	}
	if !reflect.DeepEqual(desired.Threshold, actual.Threshold) && !dcl.IsZeroValue(desired.Threshold) {
		c.Config.Logger.Infof("Diff in Threshold. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Threshold), dcl.SprintResource(actual.Threshold))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.BucketOptions == nil && desired.BucketOptions != nil && !dcl.IsEmptyValueIndirect(desired.BucketOptions) {
		c.Config.Logger.Infof("desired BucketOptions %s - but actually nil", dcl.SprintResource(desired.BucketOptions))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, desired.BucketOptions, actual.BucketOptions) && !dcl.IsZeroValue(desired.BucketOptions) {
		c.Config.Logger.Infof("Diff in BucketOptions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.BucketOptions), dcl.SprintResource(actual.BucketOptions))
		return true
	}
	if actual.ExemplarSampling == nil && desired.ExemplarSampling != nil && !dcl.IsEmptyValueIndirect(desired.ExemplarSampling) {
		c.Config.Logger.Infof("desired ExemplarSampling %s - but actually nil", dcl.SprintResource(desired.ExemplarSampling))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, desired.ExemplarSampling, actual.ExemplarSampling) && !dcl.IsZeroValue(desired.ExemplarSampling) {
		c.Config.Logger.Infof("Diff in ExemplarSampling. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExemplarSampling), dcl.SprintResource(actual.ExemplarSampling))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.LinearBuckets == nil && desired.LinearBuckets != nil && !dcl.IsEmptyValueIndirect(desired.LinearBuckets) {
		c.Config.Logger.Infof("desired LinearBuckets %s - but actually nil", dcl.SprintResource(desired.LinearBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, desired.LinearBuckets, actual.LinearBuckets) && !dcl.IsZeroValue(desired.LinearBuckets) {
		c.Config.Logger.Infof("Diff in LinearBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LinearBuckets), dcl.SprintResource(actual.LinearBuckets))
		return true
	}
	if actual.ExponentialBuckets == nil && desired.ExponentialBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("desired ExponentialBuckets %s - but actually nil", dcl.SprintResource(desired.ExponentialBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, desired.ExponentialBuckets, actual.ExponentialBuckets) && !dcl.IsZeroValue(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("Diff in ExponentialBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExponentialBuckets), dcl.SprintResource(actual.ExponentialBuckets))
		return true
	}
	if actual.ExplicitBuckets == nil && desired.ExplicitBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("desired ExplicitBuckets %s - but actually nil", dcl.SprintResource(desired.ExplicitBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, desired.ExplicitBuckets, actual.ExplicitBuckets) && !dcl.IsZeroValue(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("Diff in ExplicitBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExplicitBuckets), dcl.SprintResource(actual.ExplicitBuckets))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Offset == nil && desired.Offset != nil && !dcl.IsEmptyValueIndirect(desired.Offset) {
		c.Config.Logger.Infof("desired Offset %s - but actually nil", dcl.SprintResource(desired.Offset))
		return true
	}
	if !reflect.DeepEqual(desired.Offset, actual.Offset) && !dcl.IsZeroValue(desired.Offset) {
		c.Config.Logger.Infof("Diff in Offset. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Offset), dcl.SprintResource(actual.Offset))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.GrowthFactor == nil && desired.GrowthFactor != nil && !dcl.IsEmptyValueIndirect(desired.GrowthFactor) {
		c.Config.Logger.Infof("desired GrowthFactor %s - but actually nil", dcl.SprintResource(desired.GrowthFactor))
		return true
	}
	if !reflect.DeepEqual(desired.GrowthFactor, actual.GrowthFactor) && !dcl.IsZeroValue(desired.GrowthFactor) {
		c.Config.Logger.Infof("Diff in GrowthFactor. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GrowthFactor), dcl.SprintResource(actual.GrowthFactor))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Bounds == nil && desired.Bounds != nil && !dcl.IsEmptyValueIndirect(desired.Bounds) {
		c.Config.Logger.Infof("desired Bounds %s - but actually nil", dcl.SprintResource(desired.Bounds))
		return true
	}
	if !dcl.FloatSliceEquals(desired.Bounds, actual.Bounds) && !dcl.IsZeroValue(desired.Bounds) {
		c.Config.Logger.Infof("Diff in Bounds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Bounds), dcl.SprintResource(actual.Bounds))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MinimumValue == nil && desired.MinimumValue != nil && !dcl.IsEmptyValueIndirect(desired.MinimumValue) {
		c.Config.Logger.Infof("desired MinimumValue %s - but actually nil", dcl.SprintResource(desired.MinimumValue))
		return true
	}
	if !reflect.DeepEqual(desired.MinimumValue, actual.MinimumValue) && !dcl.IsZeroValue(desired.MinimumValue) {
		c.Config.Logger.Infof("Diff in MinimumValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinimumValue), dcl.SprintResource(actual.MinimumValue))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.AlignmentPeriod == nil && desired.AlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("desired AlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.AlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.AlignmentPeriod, actual.AlignmentPeriod) && !dcl.IsZeroValue(desired.AlignmentPeriod) {
		c.Config.Logger.Infof("Diff in AlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.AlignmentPeriod), dcl.SprintResource(actual.AlignmentPeriod))
		return true
	}
	if actual.PerSeriesAligner == nil && desired.PerSeriesAligner != nil && !dcl.IsEmptyValueIndirect(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("desired PerSeriesAligner %s - but actually nil", dcl.SprintResource(desired.PerSeriesAligner))
		return true
	}
	if !reflect.DeepEqual(desired.PerSeriesAligner, actual.PerSeriesAligner) && !dcl.IsZeroValue(desired.PerSeriesAligner) {
		c.Config.Logger.Infof("Diff in PerSeriesAligner. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.PerSeriesAligner), dcl.SprintResource(actual.PerSeriesAligner))
		return true
	}
	if actual.CrossSeriesReducer == nil && desired.CrossSeriesReducer != nil && !dcl.IsEmptyValueIndirect(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("desired CrossSeriesReducer %s - but actually nil", dcl.SprintResource(desired.CrossSeriesReducer))
		return true
	}
	if !reflect.DeepEqual(desired.CrossSeriesReducer, actual.CrossSeriesReducer) && !dcl.IsZeroValue(desired.CrossSeriesReducer) {
		c.Config.Logger.Infof("Diff in CrossSeriesReducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.CrossSeriesReducer), dcl.SprintResource(actual.CrossSeriesReducer))
		return true
	}
	if actual.GroupByFields == nil && desired.GroupByFields != nil && !dcl.IsEmptyValueIndirect(desired.GroupByFields) {
		c.Config.Logger.Infof("desired GroupByFields %s - but actually nil", dcl.SprintResource(desired.GroupByFields))
		return true
	}
	if !dcl.StringSliceEquals(desired.GroupByFields, actual.GroupByFields) && !dcl.IsZeroValue(desired.GroupByFields) {
		c.Config.Logger.Infof("Diff in GroupByFields. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupByFields), dcl.SprintResource(actual.GroupByFields))
		return true
	}
	if actual.ReduceFractionLessThanParams == nil && desired.ReduceFractionLessThanParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("desired ReduceFractionLessThanParams %s - but actually nil", dcl.SprintResource(desired.ReduceFractionLessThanParams))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, desired.ReduceFractionLessThanParams, actual.ReduceFractionLessThanParams) && !dcl.IsZeroValue(desired.ReduceFractionLessThanParams) {
		c.Config.Logger.Infof("Diff in ReduceFractionLessThanParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceFractionLessThanParams), dcl.SprintResource(actual.ReduceFractionLessThanParams))
		return true
	}
	if actual.ReduceMakeDistributionParams == nil && desired.ReduceMakeDistributionParams != nil && !dcl.IsEmptyValueIndirect(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("desired ReduceMakeDistributionParams %s - but actually nil", dcl.SprintResource(desired.ReduceMakeDistributionParams))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, desired.ReduceMakeDistributionParams, actual.ReduceMakeDistributionParams) && !dcl.IsZeroValue(desired.ReduceMakeDistributionParams) {
		c.Config.Logger.Infof("Diff in ReduceMakeDistributionParams. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ReduceMakeDistributionParams), dcl.SprintResource(actual.ReduceMakeDistributionParams))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Threshold == nil && desired.Threshold != nil && !dcl.IsEmptyValueIndirect(desired.Threshold) {
		c.Config.Logger.Infof("desired Threshold %s - but actually nil", dcl.SprintResource(desired.Threshold))
		return true
	}
	if !reflect.DeepEqual(desired.Threshold, actual.Threshold) && !dcl.IsZeroValue(desired.Threshold) {
		c.Config.Logger.Infof("Diff in Threshold. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Threshold), dcl.SprintResource(actual.Threshold))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.BucketOptions == nil && desired.BucketOptions != nil && !dcl.IsEmptyValueIndirect(desired.BucketOptions) {
		c.Config.Logger.Infof("desired BucketOptions %s - but actually nil", dcl.SprintResource(desired.BucketOptions))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, desired.BucketOptions, actual.BucketOptions) && !dcl.IsZeroValue(desired.BucketOptions) {
		c.Config.Logger.Infof("Diff in BucketOptions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.BucketOptions), dcl.SprintResource(actual.BucketOptions))
		return true
	}
	if actual.ExemplarSampling == nil && desired.ExemplarSampling != nil && !dcl.IsEmptyValueIndirect(desired.ExemplarSampling) {
		c.Config.Logger.Infof("desired ExemplarSampling %s - but actually nil", dcl.SprintResource(desired.ExemplarSampling))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, desired.ExemplarSampling, actual.ExemplarSampling) && !dcl.IsZeroValue(desired.ExemplarSampling) {
		c.Config.Logger.Infof("Diff in ExemplarSampling. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExemplarSampling), dcl.SprintResource(actual.ExemplarSampling))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.LinearBuckets == nil && desired.LinearBuckets != nil && !dcl.IsEmptyValueIndirect(desired.LinearBuckets) {
		c.Config.Logger.Infof("desired LinearBuckets %s - but actually nil", dcl.SprintResource(desired.LinearBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, desired.LinearBuckets, actual.LinearBuckets) && !dcl.IsZeroValue(desired.LinearBuckets) {
		c.Config.Logger.Infof("Diff in LinearBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LinearBuckets), dcl.SprintResource(actual.LinearBuckets))
		return true
	}
	if actual.ExponentialBuckets == nil && desired.ExponentialBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("desired ExponentialBuckets %s - but actually nil", dcl.SprintResource(desired.ExponentialBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, desired.ExponentialBuckets, actual.ExponentialBuckets) && !dcl.IsZeroValue(desired.ExponentialBuckets) {
		c.Config.Logger.Infof("Diff in ExponentialBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExponentialBuckets), dcl.SprintResource(actual.ExponentialBuckets))
		return true
	}
	if actual.ExplicitBuckets == nil && desired.ExplicitBuckets != nil && !dcl.IsEmptyValueIndirect(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("desired ExplicitBuckets %s - but actually nil", dcl.SprintResource(desired.ExplicitBuckets))
		return true
	}
	if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, desired.ExplicitBuckets, actual.ExplicitBuckets) && !dcl.IsZeroValue(desired.ExplicitBuckets) {
		c.Config.Logger.Infof("Diff in ExplicitBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ExplicitBuckets), dcl.SprintResource(actual.ExplicitBuckets))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Offset == nil && desired.Offset != nil && !dcl.IsEmptyValueIndirect(desired.Offset) {
		c.Config.Logger.Infof("desired Offset %s - but actually nil", dcl.SprintResource(desired.Offset))
		return true
	}
	if !reflect.DeepEqual(desired.Offset, actual.Offset) && !dcl.IsZeroValue(desired.Offset) {
		c.Config.Logger.Infof("Diff in Offset. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Offset), dcl.SprintResource(actual.Offset))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.NumFiniteBuckets == nil && desired.NumFiniteBuckets != nil && !dcl.IsEmptyValueIndirect(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("desired NumFiniteBuckets %s - but actually nil", dcl.SprintResource(desired.NumFiniteBuckets))
		return true
	}
	if !reflect.DeepEqual(desired.NumFiniteBuckets, actual.NumFiniteBuckets) && !dcl.IsZeroValue(desired.NumFiniteBuckets) {
		c.Config.Logger.Infof("Diff in NumFiniteBuckets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumFiniteBuckets), dcl.SprintResource(actual.NumFiniteBuckets))
		return true
	}
	if actual.GrowthFactor == nil && desired.GrowthFactor != nil && !dcl.IsEmptyValueIndirect(desired.GrowthFactor) {
		c.Config.Logger.Infof("desired GrowthFactor %s - but actually nil", dcl.SprintResource(desired.GrowthFactor))
		return true
	}
	if !reflect.DeepEqual(desired.GrowthFactor, actual.GrowthFactor) && !dcl.IsZeroValue(desired.GrowthFactor) {
		c.Config.Logger.Infof("Diff in GrowthFactor. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GrowthFactor), dcl.SprintResource(actual.GrowthFactor))
		return true
	}
	if actual.Scale == nil && desired.Scale != nil && !dcl.IsEmptyValueIndirect(desired.Scale) {
		c.Config.Logger.Infof("desired Scale %s - but actually nil", dcl.SprintResource(desired.Scale))
		return true
	}
	if !reflect.DeepEqual(desired.Scale, actual.Scale) && !dcl.IsZeroValue(desired.Scale) {
		c.Config.Logger.Infof("Diff in Scale. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Scale), dcl.SprintResource(actual.Scale))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Bounds == nil && desired.Bounds != nil && !dcl.IsEmptyValueIndirect(desired.Bounds) {
		c.Config.Logger.Infof("desired Bounds %s - but actually nil", dcl.SprintResource(desired.Bounds))
		return true
	}
	if !dcl.FloatSliceEquals(desired.Bounds, actual.Bounds) && !dcl.IsZeroValue(desired.Bounds) {
		c.Config.Logger.Infof("Diff in Bounds. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Bounds), dcl.SprintResource(actual.Bounds))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MinimumValue == nil && desired.MinimumValue != nil && !dcl.IsEmptyValueIndirect(desired.MinimumValue) {
		c.Config.Logger.Infof("desired MinimumValue %s - but actually nil", dcl.SprintResource(desired.MinimumValue))
		return true
	}
	if !reflect.DeepEqual(desired.MinimumValue, actual.MinimumValue) && !dcl.IsZeroValue(desired.MinimumValue) {
		c.Config.Logger.Infof("Diff in MinimumValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinimumValue), dcl.SprintResource(actual.MinimumValue))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.RankingMethod == nil && desired.RankingMethod != nil && !dcl.IsEmptyValueIndirect(desired.RankingMethod) {
		c.Config.Logger.Infof("desired RankingMethod %s - but actually nil", dcl.SprintResource(desired.RankingMethod))
		return true
	}
	if !reflect.DeepEqual(desired.RankingMethod, actual.RankingMethod) && !dcl.IsZeroValue(desired.RankingMethod) {
		c.Config.Logger.Infof("Diff in RankingMethod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.RankingMethod), dcl.SprintResource(actual.RankingMethod))
		return true
	}
	if actual.NumTimeSeries == nil && desired.NumTimeSeries != nil && !dcl.IsEmptyValueIndirect(desired.NumTimeSeries) {
		c.Config.Logger.Infof("desired NumTimeSeries %s - but actually nil", dcl.SprintResource(desired.NumTimeSeries))
		return true
	}
	if !reflect.DeepEqual(desired.NumTimeSeries, actual.NumTimeSeries) && !dcl.IsZeroValue(desired.NumTimeSeries) {
		c.Config.Logger.Infof("Diff in NumTimeSeries. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.NumTimeSeries), dcl.SprintResource(actual.NumTimeSeries))
		return true
	}
	if actual.Direction == nil && desired.Direction != nil && !dcl.IsEmptyValueIndirect(desired.Direction) {
		c.Config.Logger.Infof("desired Direction %s - but actually nil", dcl.SprintResource(desired.Direction))
		return true
	}
	if !reflect.DeepEqual(desired.Direction, actual.Direction) && !dcl.IsZeroValue(desired.Direction) {
		c.Config.Logger.Infof("Diff in Direction. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Direction), dcl.SprintResource(actual.Direction))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterMap(c *Client, desired, actual map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldown(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.ResourceTypeDrilldown == nil && desired.ResourceTypeDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.ResourceTypeDrilldown) {
		c.Config.Logger.Infof("desired ResourceTypeDrilldown %s - but actually nil", dcl.SprintResource(desired.ResourceTypeDrilldown))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, desired.ResourceTypeDrilldown, actual.ResourceTypeDrilldown) && !dcl.IsZeroValue(desired.ResourceTypeDrilldown) {
		c.Config.Logger.Infof("Diff in ResourceTypeDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ResourceTypeDrilldown), dcl.SprintResource(actual.ResourceTypeDrilldown))
		return true
	}
	if actual.ResourceLabelDrilldowns == nil && desired.ResourceLabelDrilldowns != nil && !dcl.IsEmptyValueIndirect(desired.ResourceLabelDrilldowns) {
		c.Config.Logger.Infof("desired ResourceLabelDrilldowns %s - but actually nil", dcl.SprintResource(desired.ResourceLabelDrilldowns))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsSlice(c, desired.ResourceLabelDrilldowns, actual.ResourceLabelDrilldowns) && !dcl.IsZeroValue(desired.ResourceLabelDrilldowns) {
		c.Config.Logger.Infof("Diff in ResourceLabelDrilldowns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ResourceLabelDrilldowns), dcl.SprintResource(actual.ResourceLabelDrilldowns))
		return true
	}
	if actual.MetadataSystemLabelDrilldowns == nil && desired.MetadataSystemLabelDrilldowns != nil && !dcl.IsEmptyValueIndirect(desired.MetadataSystemLabelDrilldowns) {
		c.Config.Logger.Infof("desired MetadataSystemLabelDrilldowns %s - but actually nil", dcl.SprintResource(desired.MetadataSystemLabelDrilldowns))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsSlice(c, desired.MetadataSystemLabelDrilldowns, actual.MetadataSystemLabelDrilldowns) && !dcl.IsZeroValue(desired.MetadataSystemLabelDrilldowns) {
		c.Config.Logger.Infof("Diff in MetadataSystemLabelDrilldowns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetadataSystemLabelDrilldowns), dcl.SprintResource(actual.MetadataSystemLabelDrilldowns))
		return true
	}
	if actual.MetadataUserLabelDrilldowns == nil && desired.MetadataUserLabelDrilldowns != nil && !dcl.IsEmptyValueIndirect(desired.MetadataUserLabelDrilldowns) {
		c.Config.Logger.Infof("desired MetadataUserLabelDrilldowns %s - but actually nil", dcl.SprintResource(desired.MetadataUserLabelDrilldowns))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsSlice(c, desired.MetadataUserLabelDrilldowns, actual.MetadataUserLabelDrilldowns) && !dcl.IsZeroValue(desired.MetadataUserLabelDrilldowns) {
		c.Config.Logger.Infof("Diff in MetadataUserLabelDrilldowns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetadataUserLabelDrilldowns), dcl.SprintResource(actual.MetadataUserLabelDrilldowns))
		return true
	}
	if actual.GroupNameDrilldown == nil && desired.GroupNameDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.GroupNameDrilldown) {
		c.Config.Logger.Infof("desired GroupNameDrilldown %s - but actually nil", dcl.SprintResource(desired.GroupNameDrilldown))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, desired.GroupNameDrilldown, actual.GroupNameDrilldown) && !dcl.IsZeroValue(desired.GroupNameDrilldown) {
		c.Config.Logger.Infof("Diff in GroupNameDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GroupNameDrilldown), dcl.SprintResource(actual.GroupNameDrilldown))
		return true
	}
	if actual.ServiceNameDrilldown == nil && desired.ServiceNameDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.ServiceNameDrilldown) {
		c.Config.Logger.Infof("desired ServiceNameDrilldown %s - but actually nil", dcl.SprintResource(desired.ServiceNameDrilldown))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, desired.ServiceNameDrilldown, actual.ServiceNameDrilldown) && !dcl.IsZeroValue(desired.ServiceNameDrilldown) {
		c.Config.Logger.Infof("Diff in ServiceNameDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ServiceNameDrilldown), dcl.SprintResource(actual.ServiceNameDrilldown))
		return true
	}
	if actual.ServiceTypeDrilldown == nil && desired.ServiceTypeDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.ServiceTypeDrilldown) {
		c.Config.Logger.Infof("desired ServiceTypeDrilldown %s - but actually nil", dcl.SprintResource(desired.ServiceTypeDrilldown))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, desired.ServiceTypeDrilldown, actual.ServiceTypeDrilldown) && !dcl.IsZeroValue(desired.ServiceTypeDrilldown) {
		c.Config.Logger.Infof("Diff in ServiceTypeDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ServiceTypeDrilldown), dcl.SprintResource(actual.ServiceTypeDrilldown))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSourceDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSourceDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValues == nil && desired.TargetValues != nil && !dcl.IsEmptyValueIndirect(desired.TargetValues) {
		c.Config.Logger.Infof("desired TargetValues %s - but actually nil", dcl.SprintResource(desired.TargetValues))
		return true
	}
	if !dcl.StringSliceEquals(desired.TargetValues, actual.TargetValues) && !dcl.IsZeroValue(desired.TargetValues) {
		c.Config.Logger.Infof("Diff in TargetValues. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValues), dcl.SprintResource(actual.TargetValues))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.LogicalOperator == nil && desired.LogicalOperator != nil && !dcl.IsEmptyValueIndirect(desired.LogicalOperator) {
		c.Config.Logger.Infof("desired LogicalOperator %s - but actually nil", dcl.SprintResource(desired.LogicalOperator))
		return true
	}
	if !reflect.DeepEqual(desired.LogicalOperator, actual.LogicalOperator) && !dcl.IsZeroValue(desired.LogicalOperator) {
		c.Config.Logger.Infof("Diff in LogicalOperator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LogicalOperator), dcl.SprintResource(actual.LogicalOperator))
		return true
	}
	if actual.ValueRestrictions == nil && desired.ValueRestrictions != nil && !dcl.IsEmptyValueIndirect(desired.ValueRestrictions) {
		c.Config.Logger.Infof("desired ValueRestrictions %s - but actually nil", dcl.SprintResource(desired.ValueRestrictions))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c, desired.ValueRestrictions, actual.ValueRestrictions) && !dcl.IsZeroValue(desired.ValueRestrictions) {
		c.Config.Logger.Infof("Diff in ValueRestrictions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ValueRestrictions), dcl.SprintResource(actual.ValueRestrictions))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValue == nil && desired.TargetValue != nil && !dcl.IsEmptyValueIndirect(desired.TargetValue) {
		c.Config.Logger.Infof("desired TargetValue %s - but actually nil", dcl.SprintResource(desired.TargetValue))
		return true
	}
	if !dcl.StringCanonicalize(desired.TargetValue, actual.TargetValue) && !dcl.IsZeroValue(desired.TargetValue) {
		c.Config.Logger.Infof("Diff in TargetValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValue), dcl.SprintResource(actual.TargetValue))
		return true
	}
	if actual.Comparator == nil && desired.Comparator != nil && !dcl.IsEmptyValueIndirect(desired.Comparator) {
		c.Config.Logger.Infof("desired Comparator %s - but actually nil", dcl.SprintResource(desired.Comparator))
		return true
	}
	if !reflect.DeepEqual(desired.Comparator, actual.Comparator) && !dcl.IsZeroValue(desired.Comparator) {
		c.Config.Logger.Infof("Diff in Comparator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Comparator), dcl.SprintResource(actual.Comparator))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.LogicalOperator == nil && desired.LogicalOperator != nil && !dcl.IsEmptyValueIndirect(desired.LogicalOperator) {
		c.Config.Logger.Infof("desired LogicalOperator %s - but actually nil", dcl.SprintResource(desired.LogicalOperator))
		return true
	}
	if !reflect.DeepEqual(desired.LogicalOperator, actual.LogicalOperator) && !dcl.IsZeroValue(desired.LogicalOperator) {
		c.Config.Logger.Infof("Diff in LogicalOperator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LogicalOperator), dcl.SprintResource(actual.LogicalOperator))
		return true
	}
	if actual.ValueRestrictions == nil && desired.ValueRestrictions != nil && !dcl.IsEmptyValueIndirect(desired.ValueRestrictions) {
		c.Config.Logger.Infof("desired ValueRestrictions %s - but actually nil", dcl.SprintResource(desired.ValueRestrictions))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c, desired.ValueRestrictions, actual.ValueRestrictions) && !dcl.IsZeroValue(desired.ValueRestrictions) {
		c.Config.Logger.Infof("Diff in ValueRestrictions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ValueRestrictions), dcl.SprintResource(actual.ValueRestrictions))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValue == nil && desired.TargetValue != nil && !dcl.IsEmptyValueIndirect(desired.TargetValue) {
		c.Config.Logger.Infof("desired TargetValue %s - but actually nil", dcl.SprintResource(desired.TargetValue))
		return true
	}
	if !dcl.StringCanonicalize(desired.TargetValue, actual.TargetValue) && !dcl.IsZeroValue(desired.TargetValue) {
		c.Config.Logger.Infof("Diff in TargetValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValue), dcl.SprintResource(actual.TargetValue))
		return true
	}
	if actual.Comparator == nil && desired.Comparator != nil && !dcl.IsEmptyValueIndirect(desired.Comparator) {
		c.Config.Logger.Infof("desired Comparator %s - but actually nil", dcl.SprintResource(desired.Comparator))
		return true
	}
	if !reflect.DeepEqual(desired.Comparator, actual.Comparator) && !dcl.IsZeroValue(desired.Comparator) {
		c.Config.Logger.Infof("Diff in Comparator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Comparator), dcl.SprintResource(actual.Comparator))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.LogicalOperator == nil && desired.LogicalOperator != nil && !dcl.IsEmptyValueIndirect(desired.LogicalOperator) {
		c.Config.Logger.Infof("desired LogicalOperator %s - but actually nil", dcl.SprintResource(desired.LogicalOperator))
		return true
	}
	if !reflect.DeepEqual(desired.LogicalOperator, actual.LogicalOperator) && !dcl.IsZeroValue(desired.LogicalOperator) {
		c.Config.Logger.Infof("Diff in LogicalOperator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LogicalOperator), dcl.SprintResource(actual.LogicalOperator))
		return true
	}
	if actual.ValueRestrictions == nil && desired.ValueRestrictions != nil && !dcl.IsEmptyValueIndirect(desired.ValueRestrictions) {
		c.Config.Logger.Infof("desired ValueRestrictions %s - but actually nil", dcl.SprintResource(desired.ValueRestrictions))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c, desired.ValueRestrictions, actual.ValueRestrictions) && !dcl.IsZeroValue(desired.ValueRestrictions) {
		c.Config.Logger.Infof("Diff in ValueRestrictions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ValueRestrictions), dcl.SprintResource(actual.ValueRestrictions))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValue == nil && desired.TargetValue != nil && !dcl.IsEmptyValueIndirect(desired.TargetValue) {
		c.Config.Logger.Infof("desired TargetValue %s - but actually nil", dcl.SprintResource(desired.TargetValue))
		return true
	}
	if !dcl.StringCanonicalize(desired.TargetValue, actual.TargetValue) && !dcl.IsZeroValue(desired.TargetValue) {
		c.Config.Logger.Infof("Diff in TargetValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValue), dcl.SprintResource(actual.TargetValue))
		return true
	}
	if actual.Comparator == nil && desired.Comparator != nil && !dcl.IsEmptyValueIndirect(desired.Comparator) {
		c.Config.Logger.Infof("desired Comparator %s - but actually nil", dcl.SprintResource(desired.Comparator))
		return true
	}
	if !reflect.DeepEqual(desired.Comparator, actual.Comparator) && !dcl.IsZeroValue(desired.Comparator) {
		c.Config.Logger.Infof("Diff in Comparator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Comparator), dcl.SprintResource(actual.Comparator))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValues == nil && desired.TargetValues != nil && !dcl.IsEmptyValueIndirect(desired.TargetValues) {
		c.Config.Logger.Infof("desired TargetValues %s - but actually nil", dcl.SprintResource(desired.TargetValues))
		return true
	}
	if !dcl.StringSliceEquals(desired.TargetValues, actual.TargetValues) && !dcl.IsZeroValue(desired.TargetValues) {
		c.Config.Logger.Infof("Diff in TargetValues. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValues), dcl.SprintResource(actual.TargetValues))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValues == nil && desired.TargetValues != nil && !dcl.IsEmptyValueIndirect(desired.TargetValues) {
		c.Config.Logger.Infof("desired TargetValues %s - but actually nil", dcl.SprintResource(desired.TargetValues))
		return true
	}
	if !dcl.StringSliceEquals(desired.TargetValues, actual.TargetValues) && !dcl.IsZeroValue(desired.TargetValues) {
		c.Config.Logger.Infof("Diff in TargetValues. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValues), dcl.SprintResource(actual.TargetValues))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Types == nil && desired.Types != nil && !dcl.IsEmptyValueIndirect(desired.Types) {
		c.Config.Logger.Infof("desired Types %s - but actually nil", dcl.SprintResource(desired.Types))
		return true
	}
	if compareDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnumSlice(c, desired.Types, actual.Types) && !dcl.IsZeroValue(desired.Types) {
		c.Config.Logger.Infof("Diff in Types. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Types), dcl.SprintResource(actual.Types))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldown(c *Client, desired, actual *DashboardWidgetScorecardMetricDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.MetricTypeDrilldown == nil && desired.MetricTypeDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.MetricTypeDrilldown) {
		c.Config.Logger.Infof("desired MetricTypeDrilldown %s - but actually nil", dcl.SprintResource(desired.MetricTypeDrilldown))
		return true
	}
	if compareDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, desired.MetricTypeDrilldown, actual.MetricTypeDrilldown) && !dcl.IsZeroValue(desired.MetricTypeDrilldown) {
		c.Config.Logger.Infof("Diff in MetricTypeDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetricTypeDrilldown), dcl.SprintResource(actual.MetricTypeDrilldown))
		return true
	}
	if actual.MetricLabelDrilldowns == nil && desired.MetricLabelDrilldowns != nil && !dcl.IsEmptyValueIndirect(desired.MetricLabelDrilldowns) {
		c.Config.Logger.Infof("desired MetricLabelDrilldowns %s - but actually nil", dcl.SprintResource(desired.MetricLabelDrilldowns))
		return true
	}
	if compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsSlice(c, desired.MetricLabelDrilldowns, actual.MetricLabelDrilldowns) && !dcl.IsZeroValue(desired.MetricLabelDrilldowns) {
		c.Config.Logger.Infof("Diff in MetricLabelDrilldowns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetricLabelDrilldowns), dcl.SprintResource(actual.MetricLabelDrilldowns))
		return true
	}
	if actual.MetricGroupByDrilldown == nil && desired.MetricGroupByDrilldown != nil && !dcl.IsEmptyValueIndirect(desired.MetricGroupByDrilldown) {
		c.Config.Logger.Infof("desired MetricGroupByDrilldown %s - but actually nil", dcl.SprintResource(desired.MetricGroupByDrilldown))
		return true
	}
	if compareDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, desired.MetricGroupByDrilldown, actual.MetricGroupByDrilldown) && !dcl.IsZeroValue(desired.MetricGroupByDrilldown) {
		c.Config.Logger.Infof("Diff in MetricGroupByDrilldown. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetricGroupByDrilldown), dcl.SprintResource(actual.MetricGroupByDrilldown))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownSlice(c *Client, desired, actual []DashboardWidgetScorecardMetricDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardMetricDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetScorecardMetricDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardMetricDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c *Client, desired, actual *DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValue == nil && desired.TargetValue != nil && !dcl.IsEmptyValueIndirect(desired.TargetValue) {
		c.Config.Logger.Infof("desired TargetValue %s - but actually nil", dcl.SprintResource(desired.TargetValue))
		return true
	}
	if !dcl.StringCanonicalize(desired.TargetValue, actual.TargetValue) && !dcl.IsZeroValue(desired.TargetValue) {
		c.Config.Logger.Infof("Diff in TargetValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValue), dcl.SprintResource(actual.TargetValue))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownSlice(c *Client, desired, actual []DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c *Client, desired, actual *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.LogicalOperator == nil && desired.LogicalOperator != nil && !dcl.IsEmptyValueIndirect(desired.LogicalOperator) {
		c.Config.Logger.Infof("desired LogicalOperator %s - but actually nil", dcl.SprintResource(desired.LogicalOperator))
		return true
	}
	if !reflect.DeepEqual(desired.LogicalOperator, actual.LogicalOperator) && !dcl.IsZeroValue(desired.LogicalOperator) {
		c.Config.Logger.Infof("Diff in LogicalOperator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LogicalOperator), dcl.SprintResource(actual.LogicalOperator))
		return true
	}
	if actual.ValueRestrictions == nil && desired.ValueRestrictions != nil && !dcl.IsEmptyValueIndirect(desired.ValueRestrictions) {
		c.Config.Logger.Infof("desired ValueRestrictions %s - but actually nil", dcl.SprintResource(desired.ValueRestrictions))
		return true
	}
	if compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c, desired.ValueRestrictions, actual.ValueRestrictions) && !dcl.IsZeroValue(desired.ValueRestrictions) {
		c.Config.Logger.Infof("Diff in ValueRestrictions. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ValueRestrictions), dcl.SprintResource(actual.ValueRestrictions))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsSlice(c *Client, desired, actual []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c *Client, desired, actual *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.TargetValue == nil && desired.TargetValue != nil && !dcl.IsEmptyValueIndirect(desired.TargetValue) {
		c.Config.Logger.Infof("desired TargetValue %s - but actually nil", dcl.SprintResource(desired.TargetValue))
		return true
	}
	if !dcl.StringCanonicalize(desired.TargetValue, actual.TargetValue) && !dcl.IsZeroValue(desired.TargetValue) {
		c.Config.Logger.Infof("Diff in TargetValue. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.TargetValue), dcl.SprintResource(actual.TargetValue))
		return true
	}
	if actual.Comparator == nil && desired.Comparator != nil && !dcl.IsEmptyValueIndirect(desired.Comparator) {
		c.Config.Logger.Infof("desired Comparator %s - but actually nil", dcl.SprintResource(desired.Comparator))
		return true
	}
	if !reflect.DeepEqual(desired.Comparator, actual.Comparator) && !dcl.IsZeroValue(desired.Comparator) {
		c.Config.Logger.Infof("Diff in Comparator. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Comparator), dcl.SprintResource(actual.Comparator))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c *Client, desired, actual []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c *Client, desired, actual *DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.ResourceLabels == nil && desired.ResourceLabels != nil && !dcl.IsEmptyValueIndirect(desired.ResourceLabels) {
		c.Config.Logger.Infof("desired ResourceLabels %s - but actually nil", dcl.SprintResource(desired.ResourceLabels))
		return true
	}
	if !dcl.StringSliceEquals(desired.ResourceLabels, actual.ResourceLabels) && !dcl.IsZeroValue(desired.ResourceLabels) {
		c.Config.Logger.Infof("Diff in ResourceLabels. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ResourceLabels), dcl.SprintResource(actual.ResourceLabels))
		return true
	}
	if actual.MetricLabels == nil && desired.MetricLabels != nil && !dcl.IsEmptyValueIndirect(desired.MetricLabels) {
		c.Config.Logger.Infof("desired MetricLabels %s - but actually nil", dcl.SprintResource(desired.MetricLabels))
		return true
	}
	if !dcl.StringSliceEquals(desired.MetricLabels, actual.MetricLabels) && !dcl.IsZeroValue(desired.MetricLabels) {
		c.Config.Logger.Infof("Diff in MetricLabels. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetricLabels), dcl.SprintResource(actual.MetricLabels))
		return true
	}
	if actual.MetadataSystemLabels == nil && desired.MetadataSystemLabels != nil && !dcl.IsEmptyValueIndirect(desired.MetadataSystemLabels) {
		c.Config.Logger.Infof("desired MetadataSystemLabels %s - but actually nil", dcl.SprintResource(desired.MetadataSystemLabels))
		return true
	}
	if !dcl.StringSliceEquals(desired.MetadataSystemLabels, actual.MetadataSystemLabels) && !dcl.IsZeroValue(desired.MetadataSystemLabels) {
		c.Config.Logger.Infof("Diff in MetadataSystemLabels. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetadataSystemLabels), dcl.SprintResource(actual.MetadataSystemLabels))
		return true
	}
	if actual.MetadataUserLabels == nil && desired.MetadataUserLabels != nil && !dcl.IsEmptyValueIndirect(desired.MetadataUserLabels) {
		c.Config.Logger.Infof("desired MetadataUserLabels %s - but actually nil", dcl.SprintResource(desired.MetadataUserLabels))
		return true
	}
	if !dcl.StringSliceEquals(desired.MetadataUserLabels, actual.MetadataUserLabels) && !dcl.IsZeroValue(desired.MetadataUserLabels) {
		c.Config.Logger.Infof("Diff in MetadataUserLabels. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MetadataUserLabels), dcl.SprintResource(actual.MetadataUserLabels))
		return true
	}
	if actual.Reducer == nil && desired.Reducer != nil && !dcl.IsEmptyValueIndirect(desired.Reducer) {
		c.Config.Logger.Infof("desired Reducer %s - but actually nil", dcl.SprintResource(desired.Reducer))
		return true
	}
	if !reflect.DeepEqual(desired.Reducer, actual.Reducer) && !dcl.IsZeroValue(desired.Reducer) {
		c.Config.Logger.Infof("Diff in Reducer. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Reducer), dcl.SprintResource(actual.Reducer))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownSlice(c *Client, desired, actual []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownMap(c *Client, desired, actual map[string]DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardGaugeView(c *Client, desired, actual *DashboardWidgetScorecardGaugeView) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.LowerBound == nil && desired.LowerBound != nil && !dcl.IsEmptyValueIndirect(desired.LowerBound) {
		c.Config.Logger.Infof("desired LowerBound %s - but actually nil", dcl.SprintResource(desired.LowerBound))
		return true
	}
	if !reflect.DeepEqual(desired.LowerBound, actual.LowerBound) && !dcl.IsZeroValue(desired.LowerBound) {
		c.Config.Logger.Infof("Diff in LowerBound. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.LowerBound), dcl.SprintResource(actual.LowerBound))
		return true
	}
	if actual.UpperBound == nil && desired.UpperBound != nil && !dcl.IsEmptyValueIndirect(desired.UpperBound) {
		c.Config.Logger.Infof("desired UpperBound %s - but actually nil", dcl.SprintResource(desired.UpperBound))
		return true
	}
	if !reflect.DeepEqual(desired.UpperBound, actual.UpperBound) && !dcl.IsZeroValue(desired.UpperBound) {
		c.Config.Logger.Infof("Diff in UpperBound. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.UpperBound), dcl.SprintResource(actual.UpperBound))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardGaugeViewSlice(c *Client, desired, actual []DashboardWidgetScorecardGaugeView) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardGaugeView, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardGaugeView(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardGaugeView, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardGaugeViewMap(c *Client, desired, actual map[string]DashboardWidgetScorecardGaugeView) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardGaugeView, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardGaugeView, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardGaugeView(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardGaugeView, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSparkChartView(c *Client, desired, actual *DashboardWidgetScorecardSparkChartView) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.SparkChartType == nil && desired.SparkChartType != nil && !dcl.IsEmptyValueIndirect(desired.SparkChartType) {
		c.Config.Logger.Infof("desired SparkChartType %s - but actually nil", dcl.SprintResource(desired.SparkChartType))
		return true
	}
	if !reflect.DeepEqual(desired.SparkChartType, actual.SparkChartType) && !dcl.IsZeroValue(desired.SparkChartType) {
		c.Config.Logger.Infof("Diff in SparkChartType. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.SparkChartType), dcl.SprintResource(actual.SparkChartType))
		return true
	}
	if actual.MinAlignmentPeriod == nil && desired.MinAlignmentPeriod != nil && !dcl.IsEmptyValueIndirect(desired.MinAlignmentPeriod) {
		c.Config.Logger.Infof("desired MinAlignmentPeriod %s - but actually nil", dcl.SprintResource(desired.MinAlignmentPeriod))
		return true
	}
	if !dcl.StringCanonicalize(desired.MinAlignmentPeriod, actual.MinAlignmentPeriod) && !dcl.IsZeroValue(desired.MinAlignmentPeriod) {
		c.Config.Logger.Infof("Diff in MinAlignmentPeriod. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MinAlignmentPeriod), dcl.SprintResource(actual.MinAlignmentPeriod))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardSparkChartViewSlice(c *Client, desired, actual []DashboardWidgetScorecardSparkChartView) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSparkChartView, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSparkChartView(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSparkChartView, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSparkChartViewMap(c *Client, desired, actual map[string]DashboardWidgetScorecardSparkChartView) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSparkChartView, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSparkChartView, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardSparkChartView(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSparkChartView, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardThresholds(c *Client, desired, actual *DashboardWidgetScorecardThresholds) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.Value == nil && desired.Value != nil && !dcl.IsEmptyValueIndirect(desired.Value) {
		c.Config.Logger.Infof("desired Value %s - but actually nil", dcl.SprintResource(desired.Value))
		return true
	}
	if !reflect.DeepEqual(desired.Value, actual.Value) && !dcl.IsZeroValue(desired.Value) {
		c.Config.Logger.Infof("Diff in Value. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Value), dcl.SprintResource(actual.Value))
		return true
	}
	if actual.Color == nil && desired.Color != nil && !dcl.IsEmptyValueIndirect(desired.Color) {
		c.Config.Logger.Infof("desired Color %s - but actually nil", dcl.SprintResource(desired.Color))
		return true
	}
	if !reflect.DeepEqual(desired.Color, actual.Color) && !dcl.IsZeroValue(desired.Color) {
		c.Config.Logger.Infof("Diff in Color. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Color), dcl.SprintResource(actual.Color))
		return true
	}
	if actual.Direction == nil && desired.Direction != nil && !dcl.IsEmptyValueIndirect(desired.Direction) {
		c.Config.Logger.Infof("desired Direction %s - but actually nil", dcl.SprintResource(desired.Direction))
		return true
	}
	if !reflect.DeepEqual(desired.Direction, actual.Direction) && !dcl.IsZeroValue(desired.Direction) {
		c.Config.Logger.Infof("Diff in Direction. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Direction), dcl.SprintResource(actual.Direction))
		return true
	}
	return false
}

func compareDashboardWidgetScorecardThresholdsSlice(c *Client, desired, actual []DashboardWidgetScorecardThresholds) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardThresholds, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardThresholds(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardThresholds, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardThresholdsMap(c *Client, desired, actual map[string]DashboardWidgetScorecardThresholds) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardThresholds, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardThresholds, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetScorecardThresholds(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardThresholds, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetText(c *Client, desired, actual *DashboardWidgetText) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Content == nil && desired.Content != nil && !dcl.IsEmptyValueIndirect(desired.Content) {
		c.Config.Logger.Infof("desired Content %s - but actually nil", dcl.SprintResource(desired.Content))
		return true
	}
	if !dcl.StringCanonicalize(desired.Content, actual.Content) && !dcl.IsZeroValue(desired.Content) {
		c.Config.Logger.Infof("Diff in Content. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Content), dcl.SprintResource(actual.Content))
		return true
	}
	if actual.Format == nil && desired.Format != nil && !dcl.IsEmptyValueIndirect(desired.Format) {
		c.Config.Logger.Infof("desired Format %s - but actually nil", dcl.SprintResource(desired.Format))
		return true
	}
	if !reflect.DeepEqual(desired.Format, actual.Format) && !dcl.IsZeroValue(desired.Format) {
		c.Config.Logger.Infof("Diff in Format. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Format), dcl.SprintResource(actual.Format))
		return true
	}
	return false
}

func compareDashboardWidgetTextSlice(c *Client, desired, actual []DashboardWidgetText) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetText, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetText(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetText, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetTextMap(c *Client, desired, actual map[string]DashboardWidgetText) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetText, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetText, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetText(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetText, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardWidgetBlank(c *Client, desired, actual *DashboardWidgetBlank) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	return false
}

func compareDashboardWidgetBlankSlice(c *Client, desired, actual []DashboardWidgetBlank) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetBlank, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetBlank(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetBlank, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetBlankMap(c *Client, desired, actual map[string]DashboardWidgetBlank) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetBlank, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardWidgetBlank, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardWidgetBlank(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardWidgetBlank, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardGridLayout(c *Client, desired, actual *DashboardGridLayout) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Columns == nil && desired.Columns != nil && !dcl.IsEmptyValueIndirect(desired.Columns) {
		c.Config.Logger.Infof("desired Columns %s - but actually nil", dcl.SprintResource(desired.Columns))
		return true
	}
	if !reflect.DeepEqual(desired.Columns, actual.Columns) && !dcl.IsZeroValue(desired.Columns) {
		c.Config.Logger.Infof("Diff in Columns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Columns), dcl.SprintResource(actual.Columns))
		return true
	}
	if actual.Widgets == nil && desired.Widgets != nil && !dcl.IsEmptyValueIndirect(desired.Widgets) {
		c.Config.Logger.Infof("desired Widgets %s - but actually nil", dcl.SprintResource(desired.Widgets))
		return true
	}
	if compareDashboardWidgetSlice(c, desired.Widgets, actual.Widgets) && !dcl.IsZeroValue(desired.Widgets) {
		c.Config.Logger.Infof("Diff in Widgets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Widgets), dcl.SprintResource(actual.Widgets))
		return true
	}
	return false
}

func compareDashboardGridLayoutSlice(c *Client, desired, actual []DashboardGridLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardGridLayout, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardGridLayout(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardGridLayout, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardGridLayoutMap(c *Client, desired, actual map[string]DashboardGridLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardGridLayout, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardGridLayout, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardGridLayout(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardGridLayout, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardMosaicLayout(c *Client, desired, actual *DashboardMosaicLayout) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Columns == nil && desired.Columns != nil && !dcl.IsEmptyValueIndirect(desired.Columns) {
		c.Config.Logger.Infof("desired Columns %s - but actually nil", dcl.SprintResource(desired.Columns))
		return true
	}
	if !reflect.DeepEqual(desired.Columns, actual.Columns) && !dcl.IsZeroValue(desired.Columns) {
		c.Config.Logger.Infof("Diff in Columns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Columns), dcl.SprintResource(actual.Columns))
		return true
	}
	if actual.Tiles == nil && desired.Tiles != nil && !dcl.IsEmptyValueIndirect(desired.Tiles) {
		c.Config.Logger.Infof("desired Tiles %s - but actually nil", dcl.SprintResource(desired.Tiles))
		return true
	}
	if compareDashboardMosaicLayoutTilesSlice(c, desired.Tiles, actual.Tiles) && !dcl.IsZeroValue(desired.Tiles) {
		c.Config.Logger.Infof("Diff in Tiles. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Tiles), dcl.SprintResource(actual.Tiles))
		return true
	}
	return false
}

func compareDashboardMosaicLayoutSlice(c *Client, desired, actual []DashboardMosaicLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardMosaicLayout, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardMosaicLayout(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardMosaicLayout, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardMosaicLayoutMap(c *Client, desired, actual map[string]DashboardMosaicLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardMosaicLayout, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardMosaicLayout, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardMosaicLayout(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardMosaicLayout, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardMosaicLayoutTiles(c *Client, desired, actual *DashboardMosaicLayoutTiles) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.XPos == nil && desired.XPos != nil && !dcl.IsEmptyValueIndirect(desired.XPos) {
		c.Config.Logger.Infof("desired XPos %s - but actually nil", dcl.SprintResource(desired.XPos))
		return true
	}
	if !reflect.DeepEqual(desired.XPos, actual.XPos) && !dcl.IsZeroValue(desired.XPos) {
		c.Config.Logger.Infof("Diff in XPos. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.XPos), dcl.SprintResource(actual.XPos))
		return true
	}
	if actual.YPos == nil && desired.YPos != nil && !dcl.IsEmptyValueIndirect(desired.YPos) {
		c.Config.Logger.Infof("desired YPos %s - but actually nil", dcl.SprintResource(desired.YPos))
		return true
	}
	if !reflect.DeepEqual(desired.YPos, actual.YPos) && !dcl.IsZeroValue(desired.YPos) {
		c.Config.Logger.Infof("Diff in YPos. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.YPos), dcl.SprintResource(actual.YPos))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Height == nil && desired.Height != nil && !dcl.IsEmptyValueIndirect(desired.Height) {
		c.Config.Logger.Infof("desired Height %s - but actually nil", dcl.SprintResource(desired.Height))
		return true
	}
	if !reflect.DeepEqual(desired.Height, actual.Height) && !dcl.IsZeroValue(desired.Height) {
		c.Config.Logger.Infof("Diff in Height. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Height), dcl.SprintResource(actual.Height))
		return true
	}
	if actual.Widget == nil && desired.Widget != nil && !dcl.IsEmptyValueIndirect(desired.Widget) {
		c.Config.Logger.Infof("desired Widget %s - but actually nil", dcl.SprintResource(desired.Widget))
		return true
	}
	if compareDashboardWidget(c, desired.Widget, actual.Widget) && !dcl.IsZeroValue(desired.Widget) {
		c.Config.Logger.Infof("Diff in Widget. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Widget), dcl.SprintResource(actual.Widget))
		return true
	}
	return false
}

func compareDashboardMosaicLayoutTilesSlice(c *Client, desired, actual []DashboardMosaicLayoutTiles) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardMosaicLayoutTiles, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardMosaicLayoutTiles(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardMosaicLayoutTiles, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardMosaicLayoutTilesMap(c *Client, desired, actual map[string]DashboardMosaicLayoutTiles) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardMosaicLayoutTiles, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardMosaicLayoutTiles, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardMosaicLayoutTiles(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardMosaicLayoutTiles, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardRowLayout(c *Client, desired, actual *DashboardRowLayout) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Rows == nil && desired.Rows != nil && !dcl.IsEmptyValueIndirect(desired.Rows) {
		c.Config.Logger.Infof("desired Rows %s - but actually nil", dcl.SprintResource(desired.Rows))
		return true
	}
	if compareDashboardRowLayoutRowsSlice(c, desired.Rows, actual.Rows) && !dcl.IsZeroValue(desired.Rows) {
		c.Config.Logger.Infof("Diff in Rows. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Rows), dcl.SprintResource(actual.Rows))
		return true
	}
	return false
}

func compareDashboardRowLayoutSlice(c *Client, desired, actual []DashboardRowLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardRowLayout, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardRowLayout(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardRowLayout, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardRowLayoutMap(c *Client, desired, actual map[string]DashboardRowLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardRowLayout, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardRowLayout, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardRowLayout(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardRowLayout, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardRowLayoutRows(c *Client, desired, actual *DashboardRowLayoutRows) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Weight == nil && desired.Weight != nil && !dcl.IsEmptyValueIndirect(desired.Weight) {
		c.Config.Logger.Infof("desired Weight %s - but actually nil", dcl.SprintResource(desired.Weight))
		return true
	}
	if !reflect.DeepEqual(desired.Weight, actual.Weight) && !dcl.IsZeroValue(desired.Weight) {
		c.Config.Logger.Infof("Diff in Weight. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Weight), dcl.SprintResource(actual.Weight))
		return true
	}
	if actual.Widgets == nil && desired.Widgets != nil && !dcl.IsEmptyValueIndirect(desired.Widgets) {
		c.Config.Logger.Infof("desired Widgets %s - but actually nil", dcl.SprintResource(desired.Widgets))
		return true
	}
	if compareDashboardWidgetSlice(c, desired.Widgets, actual.Widgets) && !dcl.IsZeroValue(desired.Widgets) {
		c.Config.Logger.Infof("Diff in Widgets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Widgets), dcl.SprintResource(actual.Widgets))
		return true
	}
	return false
}

func compareDashboardRowLayoutRowsSlice(c *Client, desired, actual []DashboardRowLayoutRows) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardRowLayoutRows, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardRowLayoutRows(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardRowLayoutRows, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardRowLayoutRowsMap(c *Client, desired, actual map[string]DashboardRowLayoutRows) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardRowLayoutRows, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardRowLayoutRows, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardRowLayoutRows(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardRowLayoutRows, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayout(c *Client, desired, actual *DashboardTabbedLayout) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Tabs == nil && desired.Tabs != nil && !dcl.IsEmptyValueIndirect(desired.Tabs) {
		c.Config.Logger.Infof("desired Tabs %s - but actually nil", dcl.SprintResource(desired.Tabs))
		return true
	}
	if compareDashboardTabbedLayoutTabsSlice(c, desired.Tabs, actual.Tabs) && !dcl.IsZeroValue(desired.Tabs) {
		c.Config.Logger.Infof("Diff in Tabs. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Tabs), dcl.SprintResource(actual.Tabs))
		return true
	}
	if actual.FeaturedMosaicLayout == nil && desired.FeaturedMosaicLayout != nil && !dcl.IsEmptyValueIndirect(desired.FeaturedMosaicLayout) {
		c.Config.Logger.Infof("desired FeaturedMosaicLayout %s - but actually nil", dcl.SprintResource(desired.FeaturedMosaicLayout))
		return true
	}
	if compareDashboardTabbedLayoutFeaturedMosaicLayout(c, desired.FeaturedMosaicLayout, actual.FeaturedMosaicLayout) && !dcl.IsZeroValue(desired.FeaturedMosaicLayout) {
		c.Config.Logger.Infof("Diff in FeaturedMosaicLayout. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.FeaturedMosaicLayout), dcl.SprintResource(actual.FeaturedMosaicLayout))
		return true
	}
	return false
}

func compareDashboardTabbedLayoutSlice(c *Client, desired, actual []DashboardTabbedLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayout, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardTabbedLayout(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayout, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutMap(c *Client, desired, actual map[string]DashboardTabbedLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayout, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayout, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardTabbedLayout(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayout, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabs(c *Client, desired, actual *DashboardTabbedLayoutTabs) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Label == nil && desired.Label != nil && !dcl.IsEmptyValueIndirect(desired.Label) {
		c.Config.Logger.Infof("desired Label %s - but actually nil", dcl.SprintResource(desired.Label))
		return true
	}
	if !dcl.StringCanonicalize(desired.Label, actual.Label) && !dcl.IsZeroValue(desired.Label) {
		c.Config.Logger.Infof("Diff in Label. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Label), dcl.SprintResource(actual.Label))
		return true
	}
	if actual.HintText == nil && desired.HintText != nil && !dcl.IsEmptyValueIndirect(desired.HintText) {
		c.Config.Logger.Infof("desired HintText %s - but actually nil", dcl.SprintResource(desired.HintText))
		return true
	}
	if !dcl.StringCanonicalize(desired.HintText, actual.HintText) && !dcl.IsZeroValue(desired.HintText) {
		c.Config.Logger.Infof("Diff in HintText. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.HintText), dcl.SprintResource(actual.HintText))
		return true
	}
	if actual.GridLayout == nil && desired.GridLayout != nil && !dcl.IsEmptyValueIndirect(desired.GridLayout) {
		c.Config.Logger.Infof("desired GridLayout %s - but actually nil", dcl.SprintResource(desired.GridLayout))
		return true
	}
	if compareDashboardTabbedLayoutTabsGridLayout(c, desired.GridLayout, actual.GridLayout) && !dcl.IsZeroValue(desired.GridLayout) {
		c.Config.Logger.Infof("Diff in GridLayout. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.GridLayout), dcl.SprintResource(actual.GridLayout))
		return true
	}
	if actual.MosaicLayout == nil && desired.MosaicLayout != nil && !dcl.IsEmptyValueIndirect(desired.MosaicLayout) {
		c.Config.Logger.Infof("desired MosaicLayout %s - but actually nil", dcl.SprintResource(desired.MosaicLayout))
		return true
	}
	if compareDashboardTabbedLayoutTabsMosaicLayout(c, desired.MosaicLayout, actual.MosaicLayout) && !dcl.IsZeroValue(desired.MosaicLayout) {
		c.Config.Logger.Infof("Diff in MosaicLayout. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.MosaicLayout), dcl.SprintResource(actual.MosaicLayout))
		return true
	}
	if actual.RowLayout == nil && desired.RowLayout != nil && !dcl.IsEmptyValueIndirect(desired.RowLayout) {
		c.Config.Logger.Infof("desired RowLayout %s - but actually nil", dcl.SprintResource(desired.RowLayout))
		return true
	}
	if compareDashboardTabbedLayoutTabsRowLayout(c, desired.RowLayout, actual.RowLayout) && !dcl.IsZeroValue(desired.RowLayout) {
		c.Config.Logger.Infof("Diff in RowLayout. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.RowLayout), dcl.SprintResource(actual.RowLayout))
		return true
	}
	if actual.ColumnLayout == nil && desired.ColumnLayout != nil && !dcl.IsEmptyValueIndirect(desired.ColumnLayout) {
		c.Config.Logger.Infof("desired ColumnLayout %s - but actually nil", dcl.SprintResource(desired.ColumnLayout))
		return true
	}
	if compareDashboardTabbedLayoutTabsColumnLayout(c, desired.ColumnLayout, actual.ColumnLayout) && !dcl.IsZeroValue(desired.ColumnLayout) {
		c.Config.Logger.Infof("Diff in ColumnLayout. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.ColumnLayout), dcl.SprintResource(actual.ColumnLayout))
		return true
	}
	return false
}

func compareDashboardTabbedLayoutTabsSlice(c *Client, desired, actual []DashboardTabbedLayoutTabs) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabs, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardTabbedLayoutTabs(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabs, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsMap(c *Client, desired, actual map[string]DashboardTabbedLayoutTabs) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabs, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabs, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardTabbedLayoutTabs(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabs, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsGridLayout(c *Client, desired, actual *DashboardTabbedLayoutTabsGridLayout) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Columns == nil && desired.Columns != nil && !dcl.IsEmptyValueIndirect(desired.Columns) {
		c.Config.Logger.Infof("desired Columns %s - but actually nil", dcl.SprintResource(desired.Columns))
		return true
	}
	if !reflect.DeepEqual(desired.Columns, actual.Columns) && !dcl.IsZeroValue(desired.Columns) {
		c.Config.Logger.Infof("Diff in Columns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Columns), dcl.SprintResource(actual.Columns))
		return true
	}
	if actual.Widgets == nil && desired.Widgets != nil && !dcl.IsEmptyValueIndirect(desired.Widgets) {
		c.Config.Logger.Infof("desired Widgets %s - but actually nil", dcl.SprintResource(desired.Widgets))
		return true
	}
	if compareDashboardWidgetSlice(c, desired.Widgets, actual.Widgets) && !dcl.IsZeroValue(desired.Widgets) {
		c.Config.Logger.Infof("Diff in Widgets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Widgets), dcl.SprintResource(actual.Widgets))
		return true
	}
	return false
}

func compareDashboardTabbedLayoutTabsGridLayoutSlice(c *Client, desired, actual []DashboardTabbedLayoutTabsGridLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsGridLayout, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardTabbedLayoutTabsGridLayout(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsGridLayout, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsGridLayoutMap(c *Client, desired, actual map[string]DashboardTabbedLayoutTabsGridLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsGridLayout, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsGridLayout, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardTabbedLayoutTabsGridLayout(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsGridLayout, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsMosaicLayout(c *Client, desired, actual *DashboardTabbedLayoutTabsMosaicLayout) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Columns == nil && desired.Columns != nil && !dcl.IsEmptyValueIndirect(desired.Columns) {
		c.Config.Logger.Infof("desired Columns %s - but actually nil", dcl.SprintResource(desired.Columns))
		return true
	}
	if !reflect.DeepEqual(desired.Columns, actual.Columns) && !dcl.IsZeroValue(desired.Columns) {
		c.Config.Logger.Infof("Diff in Columns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Columns), dcl.SprintResource(actual.Columns))
		return true
	}
	if actual.Tiles == nil && desired.Tiles != nil && !dcl.IsEmptyValueIndirect(desired.Tiles) {
		c.Config.Logger.Infof("desired Tiles %s - but actually nil", dcl.SprintResource(desired.Tiles))
		return true
	}
	if compareDashboardTabbedLayoutTabsMosaicLayoutTilesSlice(c, desired.Tiles, actual.Tiles) && !dcl.IsZeroValue(desired.Tiles) {
		c.Config.Logger.Infof("Diff in Tiles. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Tiles), dcl.SprintResource(actual.Tiles))
		return true
	}
	return false
}

func compareDashboardTabbedLayoutTabsMosaicLayoutSlice(c *Client, desired, actual []DashboardTabbedLayoutTabsMosaicLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsMosaicLayout, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardTabbedLayoutTabsMosaicLayout(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsMosaicLayout, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsMosaicLayoutMap(c *Client, desired, actual map[string]DashboardTabbedLayoutTabsMosaicLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsMosaicLayout, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsMosaicLayout, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardTabbedLayoutTabsMosaicLayout(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsMosaicLayout, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsMosaicLayoutTiles(c *Client, desired, actual *DashboardTabbedLayoutTabsMosaicLayoutTiles) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.XPos == nil && desired.XPos != nil && !dcl.IsEmptyValueIndirect(desired.XPos) {
		c.Config.Logger.Infof("desired XPos %s - but actually nil", dcl.SprintResource(desired.XPos))
		return true
	}
	if !reflect.DeepEqual(desired.XPos, actual.XPos) && !dcl.IsZeroValue(desired.XPos) {
		c.Config.Logger.Infof("Diff in XPos. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.XPos), dcl.SprintResource(actual.XPos))
		return true
	}
	if actual.YPos == nil && desired.YPos != nil && !dcl.IsEmptyValueIndirect(desired.YPos) {
		c.Config.Logger.Infof("desired YPos %s - but actually nil", dcl.SprintResource(desired.YPos))
		return true
	}
	if !reflect.DeepEqual(desired.YPos, actual.YPos) && !dcl.IsZeroValue(desired.YPos) {
		c.Config.Logger.Infof("Diff in YPos. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.YPos), dcl.SprintResource(actual.YPos))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Height == nil && desired.Height != nil && !dcl.IsEmptyValueIndirect(desired.Height) {
		c.Config.Logger.Infof("desired Height %s - but actually nil", dcl.SprintResource(desired.Height))
		return true
	}
	if !reflect.DeepEqual(desired.Height, actual.Height) && !dcl.IsZeroValue(desired.Height) {
		c.Config.Logger.Infof("Diff in Height. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Height), dcl.SprintResource(actual.Height))
		return true
	}
	if actual.Widget == nil && desired.Widget != nil && !dcl.IsEmptyValueIndirect(desired.Widget) {
		c.Config.Logger.Infof("desired Widget %s - but actually nil", dcl.SprintResource(desired.Widget))
		return true
	}
	if compareDashboardWidget(c, desired.Widget, actual.Widget) && !dcl.IsZeroValue(desired.Widget) {
		c.Config.Logger.Infof("Diff in Widget. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Widget), dcl.SprintResource(actual.Widget))
		return true
	}
	return false
}

func compareDashboardTabbedLayoutTabsMosaicLayoutTilesSlice(c *Client, desired, actual []DashboardTabbedLayoutTabsMosaicLayoutTiles) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsMosaicLayoutTiles, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardTabbedLayoutTabsMosaicLayoutTiles(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsMosaicLayoutTiles, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsMosaicLayoutTilesMap(c *Client, desired, actual map[string]DashboardTabbedLayoutTabsMosaicLayoutTiles) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsMosaicLayoutTiles, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsMosaicLayoutTiles, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardTabbedLayoutTabsMosaicLayoutTiles(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsMosaicLayoutTiles, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsRowLayout(c *Client, desired, actual *DashboardTabbedLayoutTabsRowLayout) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Rows == nil && desired.Rows != nil && !dcl.IsEmptyValueIndirect(desired.Rows) {
		c.Config.Logger.Infof("desired Rows %s - but actually nil", dcl.SprintResource(desired.Rows))
		return true
	}
	if compareDashboardTabbedLayoutTabsRowLayoutRowsSlice(c, desired.Rows, actual.Rows) && !dcl.IsZeroValue(desired.Rows) {
		c.Config.Logger.Infof("Diff in Rows. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Rows), dcl.SprintResource(actual.Rows))
		return true
	}
	return false
}

func compareDashboardTabbedLayoutTabsRowLayoutSlice(c *Client, desired, actual []DashboardTabbedLayoutTabsRowLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsRowLayout, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardTabbedLayoutTabsRowLayout(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsRowLayout, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsRowLayoutMap(c *Client, desired, actual map[string]DashboardTabbedLayoutTabsRowLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsRowLayout, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsRowLayout, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardTabbedLayoutTabsRowLayout(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsRowLayout, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsRowLayoutRows(c *Client, desired, actual *DashboardTabbedLayoutTabsRowLayoutRows) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Weight == nil && desired.Weight != nil && !dcl.IsEmptyValueIndirect(desired.Weight) {
		c.Config.Logger.Infof("desired Weight %s - but actually nil", dcl.SprintResource(desired.Weight))
		return true
	}
	if !reflect.DeepEqual(desired.Weight, actual.Weight) && !dcl.IsZeroValue(desired.Weight) {
		c.Config.Logger.Infof("Diff in Weight. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Weight), dcl.SprintResource(actual.Weight))
		return true
	}
	if actual.Widgets == nil && desired.Widgets != nil && !dcl.IsEmptyValueIndirect(desired.Widgets) {
		c.Config.Logger.Infof("desired Widgets %s - but actually nil", dcl.SprintResource(desired.Widgets))
		return true
	}
	if compareDashboardWidgetSlice(c, desired.Widgets, actual.Widgets) && !dcl.IsZeroValue(desired.Widgets) {
		c.Config.Logger.Infof("Diff in Widgets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Widgets), dcl.SprintResource(actual.Widgets))
		return true
	}
	return false
}

func compareDashboardTabbedLayoutTabsRowLayoutRowsSlice(c *Client, desired, actual []DashboardTabbedLayoutTabsRowLayoutRows) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsRowLayoutRows, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardTabbedLayoutTabsRowLayoutRows(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsRowLayoutRows, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsRowLayoutRowsMap(c *Client, desired, actual map[string]DashboardTabbedLayoutTabsRowLayoutRows) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsRowLayoutRows, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsRowLayoutRows, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardTabbedLayoutTabsRowLayoutRows(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsRowLayoutRows, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsColumnLayout(c *Client, desired, actual *DashboardTabbedLayoutTabsColumnLayout) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Columns == nil && desired.Columns != nil && !dcl.IsEmptyValueIndirect(desired.Columns) {
		c.Config.Logger.Infof("desired Columns %s - but actually nil", dcl.SprintResource(desired.Columns))
		return true
	}
	if compareDashboardTabbedLayoutTabsColumnLayoutColumnsSlice(c, desired.Columns, actual.Columns) && !dcl.IsZeroValue(desired.Columns) {
		c.Config.Logger.Infof("Diff in Columns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Columns), dcl.SprintResource(actual.Columns))
		return true
	}
	return false
}

func compareDashboardTabbedLayoutTabsColumnLayoutSlice(c *Client, desired, actual []DashboardTabbedLayoutTabsColumnLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsColumnLayout, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardTabbedLayoutTabsColumnLayout(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsColumnLayout, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsColumnLayoutMap(c *Client, desired, actual map[string]DashboardTabbedLayoutTabsColumnLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsColumnLayout, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsColumnLayout, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardTabbedLayoutTabsColumnLayout(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsColumnLayout, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsColumnLayoutColumns(c *Client, desired, actual *DashboardTabbedLayoutTabsColumnLayoutColumns) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Weight == nil && desired.Weight != nil && !dcl.IsEmptyValueIndirect(desired.Weight) {
		c.Config.Logger.Infof("desired Weight %s - but actually nil", dcl.SprintResource(desired.Weight))
		return true
	}
	if !reflect.DeepEqual(desired.Weight, actual.Weight) && !dcl.IsZeroValue(desired.Weight) {
		c.Config.Logger.Infof("Diff in Weight. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Weight), dcl.SprintResource(actual.Weight))
		return true
	}
	if actual.Widgets == nil && desired.Widgets != nil && !dcl.IsEmptyValueIndirect(desired.Widgets) {
		c.Config.Logger.Infof("desired Widgets %s - but actually nil", dcl.SprintResource(desired.Widgets))
		return true
	}
	if compareDashboardWidgetSlice(c, desired.Widgets, actual.Widgets) && !dcl.IsZeroValue(desired.Widgets) {
		c.Config.Logger.Infof("Diff in Widgets. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Widgets), dcl.SprintResource(actual.Widgets))
		return true
	}
	return false
}

func compareDashboardTabbedLayoutTabsColumnLayoutColumnsSlice(c *Client, desired, actual []DashboardTabbedLayoutTabsColumnLayoutColumns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsColumnLayoutColumns, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardTabbedLayoutTabsColumnLayoutColumns(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsColumnLayoutColumns, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutTabsColumnLayoutColumnsMap(c *Client, desired, actual map[string]DashboardTabbedLayoutTabsColumnLayoutColumns) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutTabsColumnLayoutColumns, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsColumnLayoutColumns, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardTabbedLayoutTabsColumnLayoutColumns(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutTabsColumnLayoutColumns, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutFeaturedMosaicLayout(c *Client, desired, actual *DashboardTabbedLayoutFeaturedMosaicLayout) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.Columns == nil && desired.Columns != nil && !dcl.IsEmptyValueIndirect(desired.Columns) {
		c.Config.Logger.Infof("desired Columns %s - but actually nil", dcl.SprintResource(desired.Columns))
		return true
	}
	if !reflect.DeepEqual(desired.Columns, actual.Columns) && !dcl.IsZeroValue(desired.Columns) {
		c.Config.Logger.Infof("Diff in Columns. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Columns), dcl.SprintResource(actual.Columns))
		return true
	}
	if actual.Tiles == nil && desired.Tiles != nil && !dcl.IsEmptyValueIndirect(desired.Tiles) {
		c.Config.Logger.Infof("desired Tiles %s - but actually nil", dcl.SprintResource(desired.Tiles))
		return true
	}
	if compareDashboardTabbedLayoutFeaturedMosaicLayoutTilesSlice(c, desired.Tiles, actual.Tiles) && !dcl.IsZeroValue(desired.Tiles) {
		c.Config.Logger.Infof("Diff in Tiles. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Tiles), dcl.SprintResource(actual.Tiles))
		return true
	}
	return false
}

func compareDashboardTabbedLayoutFeaturedMosaicLayoutSlice(c *Client, desired, actual []DashboardTabbedLayoutFeaturedMosaicLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutFeaturedMosaicLayout, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardTabbedLayoutFeaturedMosaicLayout(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutFeaturedMosaicLayout, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutFeaturedMosaicLayoutMap(c *Client, desired, actual map[string]DashboardTabbedLayoutFeaturedMosaicLayout) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutFeaturedMosaicLayout, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutFeaturedMosaicLayout, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardTabbedLayoutFeaturedMosaicLayout(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutFeaturedMosaicLayout, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c *Client, desired, actual *DashboardTabbedLayoutFeaturedMosaicLayoutTiles) bool {
	if desired == nil {
		return false
	}
	if actual == nil {
		return true
	}
	if actual.XPos == nil && desired.XPos != nil && !dcl.IsEmptyValueIndirect(desired.XPos) {
		c.Config.Logger.Infof("desired XPos %s - but actually nil", dcl.SprintResource(desired.XPos))
		return true
	}
	if !reflect.DeepEqual(desired.XPos, actual.XPos) && !dcl.IsZeroValue(desired.XPos) {
		c.Config.Logger.Infof("Diff in XPos. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.XPos), dcl.SprintResource(actual.XPos))
		return true
	}
	if actual.YPos == nil && desired.YPos != nil && !dcl.IsEmptyValueIndirect(desired.YPos) {
		c.Config.Logger.Infof("desired YPos %s - but actually nil", dcl.SprintResource(desired.YPos))
		return true
	}
	if !reflect.DeepEqual(desired.YPos, actual.YPos) && !dcl.IsZeroValue(desired.YPos) {
		c.Config.Logger.Infof("Diff in YPos. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.YPos), dcl.SprintResource(actual.YPos))
		return true
	}
	if actual.Width == nil && desired.Width != nil && !dcl.IsEmptyValueIndirect(desired.Width) {
		c.Config.Logger.Infof("desired Width %s - but actually nil", dcl.SprintResource(desired.Width))
		return true
	}
	if !reflect.DeepEqual(desired.Width, actual.Width) && !dcl.IsZeroValue(desired.Width) {
		c.Config.Logger.Infof("Diff in Width. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Width), dcl.SprintResource(actual.Width))
		return true
	}
	if actual.Height == nil && desired.Height != nil && !dcl.IsEmptyValueIndirect(desired.Height) {
		c.Config.Logger.Infof("desired Height %s - but actually nil", dcl.SprintResource(desired.Height))
		return true
	}
	if !reflect.DeepEqual(desired.Height, actual.Height) && !dcl.IsZeroValue(desired.Height) {
		c.Config.Logger.Infof("Diff in Height. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Height), dcl.SprintResource(actual.Height))
		return true
	}
	if actual.Widget == nil && desired.Widget != nil && !dcl.IsEmptyValueIndirect(desired.Widget) {
		c.Config.Logger.Infof("desired Widget %s - but actually nil", dcl.SprintResource(desired.Widget))
		return true
	}
	if compareDashboardWidget(c, desired.Widget, actual.Widget) && !dcl.IsZeroValue(desired.Widget) {
		c.Config.Logger.Infof("Diff in Widget. \nDESIRED: %s\nACTUAL: %s\n", dcl.SprintResource(desired.Widget), dcl.SprintResource(actual.Widget))
		return true
	}
	return false
}

func compareDashboardTabbedLayoutFeaturedMosaicLayoutTilesSlice(c *Client, desired, actual []DashboardTabbedLayoutFeaturedMosaicLayoutTiles) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutFeaturedMosaicLayoutTiles, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutFeaturedMosaicLayoutTiles, element %d. \nDESIRED: %s\nACTUAL: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardTabbedLayoutFeaturedMosaicLayoutTilesMap(c *Client, desired, actual map[string]DashboardTabbedLayoutFeaturedMosaicLayoutTiles) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardTabbedLayoutFeaturedMosaicLayoutTiles, lengths unequal.")
		return true
	}
	for k, desiredValue := range desired {
		actualValue, ok := actual[k]
		if !ok {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutFeaturedMosaicLayoutTiles, key %s not found in ACTUAL.\n", k)
			return true
		}
		if compareDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c, &desiredValue, &actualValue) {
			c.Config.Logger.Infof("Diff in DashboardTabbedLayoutFeaturedMosaicLayoutTiles, key %s. \nDESIRED: %s\nACTUAL: %s\n", k, dcl.SprintResource(desiredValue), dcl.SprintResource(actualValue))
			return true
		}
	}
	return false
}

func compareDashboardCategoryEnumSlice(c *Client, desired, actual []DashboardCategoryEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardCategoryEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardCategoryEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardCategoryEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardCategoryEnum(c *Client, desired, actual *DashboardCategoryEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartDataSetsPlotTypeEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartDataSetsPlotTypeEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartDataSetsPlotTypeEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartDataSetsPlotTypeEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartDataSetsPlotTypeEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartDataSetsPlotTypeEnum(c *Client, desired, actual *DashboardWidgetXyChartDataSetsPlotTypeEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum(c *Client, desired, actual *DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum(c *Client, desired, actual *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum(c *Client, desired, actual *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum(c *Client, desired, actual *DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartThresholdsColorEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartThresholdsColorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartThresholdsColorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartThresholdsColorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartThresholdsColorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartThresholdsColorEnum(c *Client, desired, actual *DashboardWidgetXyChartThresholdsColorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartThresholdsDirectionEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartThresholdsDirectionEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartThresholdsDirectionEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartThresholdsDirectionEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartThresholdsDirectionEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartThresholdsDirectionEnum(c *Client, desired, actual *DashboardWidgetXyChartThresholdsDirectionEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartXAxisScaleEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartXAxisScaleEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartXAxisScaleEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartXAxisScaleEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartXAxisScaleEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartXAxisScaleEnum(c *Client, desired, actual *DashboardWidgetXyChartXAxisScaleEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartYAxisScaleEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartYAxisScaleEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartYAxisScaleEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartYAxisScaleEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartYAxisScaleEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartYAxisScaleEnum(c *Client, desired, actual *DashboardWidgetXyChartYAxisScaleEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetXyChartChartOptionsModeEnumSlice(c *Client, desired, actual []DashboardWidgetXyChartChartOptionsModeEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetXyChartChartOptionsModeEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetXyChartChartOptionsModeEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetXyChartChartOptionsModeEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetXyChartChartOptionsModeEnum(c *Client, desired, actual *DashboardWidgetXyChartChartOptionsModeEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardTimeSeriesQueryApiSourceEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardTimeSeriesQueryApiSourceEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardTimeSeriesQueryApiSourceEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardTimeSeriesQueryApiSourceEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardTimeSeriesQueryApiSourceEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardTimeSeriesQueryApiSourceEnum(c *Client, desired, actual *DashboardWidgetScorecardTimeSeriesQueryApiSourceEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum(c *Client, desired, actual *DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum(c *Client, desired, actual *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum(c *Client, desired, actual *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum(c *Client, desired, actual *DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardSparkChartViewSparkChartTypeEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardSparkChartViewSparkChartTypeEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardSparkChartViewSparkChartTypeEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardSparkChartViewSparkChartTypeEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardSparkChartViewSparkChartTypeEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardSparkChartViewSparkChartTypeEnum(c *Client, desired, actual *DashboardWidgetScorecardSparkChartViewSparkChartTypeEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardThresholdsColorEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardThresholdsColorEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardThresholdsColorEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardThresholdsColorEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardThresholdsColorEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardThresholdsColorEnum(c *Client, desired, actual *DashboardWidgetScorecardThresholdsColorEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetScorecardThresholdsDirectionEnumSlice(c *Client, desired, actual []DashboardWidgetScorecardThresholdsDirectionEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetScorecardThresholdsDirectionEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetScorecardThresholdsDirectionEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetScorecardThresholdsDirectionEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetScorecardThresholdsDirectionEnum(c *Client, desired, actual *DashboardWidgetScorecardThresholdsDirectionEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

func compareDashboardWidgetTextFormatEnumSlice(c *Client, desired, actual []DashboardWidgetTextFormatEnum) bool {
	if len(desired) != len(actual) {
		c.Config.Logger.Info("Diff in DashboardWidgetTextFormatEnum, lengths unequal.")
		return true
	}
	for i := 0; i < len(desired); i++ {
		if compareDashboardWidgetTextFormatEnum(c, &desired[i], &actual[i]) {
			c.Config.Logger.Infof("Diff in DashboardWidgetTextFormatEnum, element %d. \nOLD: %s\nNEW: %s\n", i, dcl.SprintResource(desired[i]), dcl.SprintResource(actual[i]))
			return true
		}
	}
	return false
}

func compareDashboardWidgetTextFormatEnum(c *Client, desired, actual *DashboardWidgetTextFormatEnum) bool {
	return !reflect.DeepEqual(desired, actual)
}

// urlNormalized returns a copy of the resource struct with values normalized
// for URL substitutions. For instance, it converts long-form self-links to
// short-form so they can be substituted in.
func (r *Dashboard) urlNormalized() *Dashboard {
	normalized := deepcopy.Copy(*r).(Dashboard)
	normalized.DisplayName = dcl.SelfLinkToName(r.DisplayName)
	normalized.Name = dcl.SelfLinkToName(r.Name)
	normalized.Project = dcl.SelfLinkToName(r.Project)
	return &normalized
}

func (r *Dashboard) getFields() (string, string) {
	n := r.urlNormalized()
	return dcl.ValueOrEmptyString(n.Project), dcl.ValueOrEmptyString(n.Name)
}

func (r *Dashboard) createFields() string {
	n := r.urlNormalized()
	return dcl.ValueOrEmptyString(n.Project)
}

func (r *Dashboard) deleteFields() (string, string) {
	n := r.urlNormalized()
	return dcl.ValueOrEmptyString(n.Project), dcl.ValueOrEmptyString(n.Name)
}

func (r *Dashboard) updateURL(userBasePath, updateName string) (string, error) {
	n := r.urlNormalized()
	if updateName == "update" {
		fields := map[string]interface{}{
			"project": dcl.ValueOrEmptyString(n.Project),
			"name":    dcl.ValueOrEmptyString(n.Name),
		}
		return dcl.URL("v1/projects/{{project}}/dashboards/{{name}}", "https://monitoring.googleapis.com/", userBasePath, fields), nil

	}
	return "", fmt.Errorf("unknown update name: %s", updateName)
}

// marshal encodes the Dashboard resource into JSON for a Create request, and
// performs transformations from the resource schema to the API schema if
// necessary.
func (r *Dashboard) marshal(c *Client) ([]byte, error) {
	m, err := expandDashboard(c, r)
	if err != nil {
		return nil, fmt.Errorf("error marshalling Dashboard: %w", err)
	}

	return json.Marshal(m)
}

// unmarshalDashboard decodes JSON responses into the Dashboard resource schema.
func unmarshalDashboard(b []byte, c *Client) (*Dashboard, error) {
	var m map[string]interface{}
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return unmarshalMapDashboard(m, c)
}

func unmarshalMapDashboard(m map[string]interface{}, c *Client) (*Dashboard, error) {

	return flattenDashboard(c, m), nil
}

// expandDashboard expands Dashboard into a JSON request object.
func expandDashboard(c *Client, f *Dashboard) (map[string]interface{}, error) {
	m := make(map[string]interface{})
	if v := f.Category; !dcl.IsEmptyValueIndirect(v) {
		m["category"] = v
	}
	if v, err := expandDashboardColumnLayout(c, f.ColumnLayout); err != nil {
		return nil, fmt.Errorf("error expanding ColumnLayout into columnLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["columnLayout"] = v
	}
	if v := f.DisplayName; !dcl.IsEmptyValueIndirect(v) {
		m["displayName"] = v
	}
	if v, err := expandDashboardGridLayout(c, f.GridLayout); err != nil {
		return nil, fmt.Errorf("error expanding GridLayout into gridLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["gridLayout"] = v
	}
	if v, err := expandDashboardMosaicLayout(c, f.MosaicLayout); err != nil {
		return nil, fmt.Errorf("error expanding MosaicLayout into mosaicLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["mosaicLayout"] = v
	}
	if v, err := dcl.EmptyValue(); err != nil {
		return nil, fmt.Errorf("error expanding Name into name: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["name"] = v
	}
	if v, err := expandDashboardRowLayout(c, f.RowLayout); err != nil {
		return nil, fmt.Errorf("error expanding RowLayout into rowLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["rowLayout"] = v
	}
	if v, err := expandDashboardTabbedLayout(c, f.TabbedLayout); err != nil {
		return nil, fmt.Errorf("error expanding TabbedLayout into tabbedLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["tabbedLayout"] = v
	}
	if v, err := dcl.EmptyValue(); err != nil {
		return nil, fmt.Errorf("error expanding Project into project: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["project"] = v
	}

	return m, nil
}

// flattenDashboard flattens Dashboard from a JSON request object into the
// Dashboard type.
func flattenDashboard(c *Client, i interface{}) *Dashboard {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}
	if len(m) == 0 {
		return nil
	}

	r := &Dashboard{}
	r.Category = flattenDashboardCategoryEnum(m["category"])
	r.ColumnLayout = flattenDashboardColumnLayout(c, m["columnLayout"])
	r.DisplayName = dcl.FlattenString(m["displayName"])
	r.GridLayout = flattenDashboardGridLayout(c, m["gridLayout"])
	r.MosaicLayout = flattenDashboardMosaicLayout(c, m["mosaicLayout"])
	r.Name = dcl.FlattenString(m["name"])
	r.RowLayout = flattenDashboardRowLayout(c, m["rowLayout"])
	r.TabbedLayout = flattenDashboardTabbedLayout(c, m["tabbedLayout"])
	r.Project = dcl.FlattenString(m["project"])

	return r
}

// expandDashboardColumnLayoutMap expands the contents of DashboardColumnLayout into a JSON
// request object.
func expandDashboardColumnLayoutMap(c *Client, f map[string]DashboardColumnLayout) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardColumnLayout(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardColumnLayoutSlice expands the contents of DashboardColumnLayout into a JSON
// request object.
func expandDashboardColumnLayoutSlice(c *Client, f []DashboardColumnLayout) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardColumnLayout(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardColumnLayoutMap flattens the contents of DashboardColumnLayout from a JSON
// response object.
func flattenDashboardColumnLayoutMap(c *Client, i interface{}) map[string]DashboardColumnLayout {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardColumnLayout{}
	}

	if len(a) == 0 {
		return map[string]DashboardColumnLayout{}
	}

	items := make(map[string]DashboardColumnLayout)
	for k, item := range a {
		items[k] = *flattenDashboardColumnLayout(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardColumnLayoutSlice flattens the contents of DashboardColumnLayout from a JSON
// response object.
func flattenDashboardColumnLayoutSlice(c *Client, i interface{}) []DashboardColumnLayout {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardColumnLayout{}
	}

	if len(a) == 0 {
		return []DashboardColumnLayout{}
	}

	items := make([]DashboardColumnLayout, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardColumnLayout(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardColumnLayout expands an instance of DashboardColumnLayout into a JSON
// request object.
func expandDashboardColumnLayout(c *Client, f *DashboardColumnLayout) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardColumnLayoutColumnsSlice(c, f.Columns); err != nil {
		return nil, fmt.Errorf("error expanding Columns into columns: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["columns"] = v
	}

	return m, nil
}

// flattenDashboardColumnLayout flattens an instance of DashboardColumnLayout from a JSON
// response object.
func flattenDashboardColumnLayout(c *Client, i interface{}) *DashboardColumnLayout {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardColumnLayout{}
	r.Columns = flattenDashboardColumnLayoutColumnsSlice(c, m["columns"])

	return r
}

// expandDashboardColumnLayoutColumnsMap expands the contents of DashboardColumnLayoutColumns into a JSON
// request object.
func expandDashboardColumnLayoutColumnsMap(c *Client, f map[string]DashboardColumnLayoutColumns) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardColumnLayoutColumns(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardColumnLayoutColumnsSlice expands the contents of DashboardColumnLayoutColumns into a JSON
// request object.
func expandDashboardColumnLayoutColumnsSlice(c *Client, f []DashboardColumnLayoutColumns) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardColumnLayoutColumns(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardColumnLayoutColumnsMap flattens the contents of DashboardColumnLayoutColumns from a JSON
// response object.
func flattenDashboardColumnLayoutColumnsMap(c *Client, i interface{}) map[string]DashboardColumnLayoutColumns {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardColumnLayoutColumns{}
	}

	if len(a) == 0 {
		return map[string]DashboardColumnLayoutColumns{}
	}

	items := make(map[string]DashboardColumnLayoutColumns)
	for k, item := range a {
		items[k] = *flattenDashboardColumnLayoutColumns(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardColumnLayoutColumnsSlice flattens the contents of DashboardColumnLayoutColumns from a JSON
// response object.
func flattenDashboardColumnLayoutColumnsSlice(c *Client, i interface{}) []DashboardColumnLayoutColumns {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardColumnLayoutColumns{}
	}

	if len(a) == 0 {
		return []DashboardColumnLayoutColumns{}
	}

	items := make([]DashboardColumnLayoutColumns, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardColumnLayoutColumns(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardColumnLayoutColumns expands an instance of DashboardColumnLayoutColumns into a JSON
// request object.
func expandDashboardColumnLayoutColumns(c *Client, f *DashboardColumnLayoutColumns) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Weight; !dcl.IsEmptyValueIndirect(v) {
		m["weight"] = v
	}
	if v, err := expandDashboardWidgetSlice(c, f.Widgets); err != nil {
		return nil, fmt.Errorf("error expanding Widgets into widgets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["widgets"] = v
	}

	return m, nil
}

// flattenDashboardColumnLayoutColumns flattens an instance of DashboardColumnLayoutColumns from a JSON
// response object.
func flattenDashboardColumnLayoutColumns(c *Client, i interface{}) *DashboardColumnLayoutColumns {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardColumnLayoutColumns{}
	r.Weight = dcl.FlattenInteger(m["weight"])
	r.Widgets = flattenDashboardWidgetSlice(c, m["widgets"])

	return r
}

// expandDashboardWidgetMap expands the contents of DashboardWidget into a JSON
// request object.
func expandDashboardWidgetMap(c *Client, f map[string]DashboardWidget) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidget(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetSlice expands the contents of DashboardWidget into a JSON
// request object.
func expandDashboardWidgetSlice(c *Client, f []DashboardWidget) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidget(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetMap flattens the contents of DashboardWidget from a JSON
// response object.
func flattenDashboardWidgetMap(c *Client, i interface{}) map[string]DashboardWidget {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidget{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidget{}
	}

	items := make(map[string]DashboardWidget)
	for k, item := range a {
		items[k] = *flattenDashboardWidget(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetSlice flattens the contents of DashboardWidget from a JSON
// response object.
func flattenDashboardWidgetSlice(c *Client, i interface{}) []DashboardWidget {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidget{}
	}

	if len(a) == 0 {
		return []DashboardWidget{}
	}

	items := make([]DashboardWidget, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidget(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidget expands an instance of DashboardWidget into a JSON
// request object.
func expandDashboardWidget(c *Client, f *DashboardWidget) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Title; !dcl.IsEmptyValueIndirect(v) {
		m["title"] = v
	}
	if v, err := expandDashboardWidgetXyChart(c, f.XyChart); err != nil {
		return nil, fmt.Errorf("error expanding XyChart into xyChart: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["xyChart"] = v
	}
	if v, err := expandDashboardWidgetScorecard(c, f.Scorecard); err != nil {
		return nil, fmt.Errorf("error expanding Scorecard into scorecard: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["scorecard"] = v
	}
	if v, err := expandDashboardWidgetText(c, f.Text); err != nil {
		return nil, fmt.Errorf("error expanding Text into text: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["text"] = v
	}
	if v, err := expandDashboardWidgetBlank(c, f.Blank); err != nil {
		return nil, fmt.Errorf("error expanding Blank into blank: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["blank"] = v
	}

	return m, nil
}

// flattenDashboardWidget flattens an instance of DashboardWidget from a JSON
// response object.
func flattenDashboardWidget(c *Client, i interface{}) *DashboardWidget {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidget{}
	r.Title = dcl.FlattenString(m["title"])
	r.XyChart = flattenDashboardWidgetXyChart(c, m["xyChart"])
	r.Scorecard = flattenDashboardWidgetScorecard(c, m["scorecard"])
	r.Text = flattenDashboardWidgetText(c, m["text"])
	r.Blank = flattenDashboardWidgetBlank(c, m["blank"])

	return r
}

// expandDashboardWidgetXyChartMap expands the contents of DashboardWidgetXyChart into a JSON
// request object.
func expandDashboardWidgetXyChartMap(c *Client, f map[string]DashboardWidgetXyChart) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChart(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSlice expands the contents of DashboardWidgetXyChart into a JSON
// request object.
func expandDashboardWidgetXyChartSlice(c *Client, f []DashboardWidgetXyChart) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChart(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartMap flattens the contents of DashboardWidgetXyChart from a JSON
// response object.
func flattenDashboardWidgetXyChartMap(c *Client, i interface{}) map[string]DashboardWidgetXyChart {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChart{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChart{}
	}

	items := make(map[string]DashboardWidgetXyChart)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChart(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSlice flattens the contents of DashboardWidgetXyChart from a JSON
// response object.
func flattenDashboardWidgetXyChartSlice(c *Client, i interface{}) []DashboardWidgetXyChart {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChart{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChart{}
	}

	items := make([]DashboardWidgetXyChart, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChart(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChart expands an instance of DashboardWidgetXyChart into a JSON
// request object.
func expandDashboardWidgetXyChart(c *Client, f *DashboardWidgetXyChart) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsSlice(c, f.DataSets); err != nil {
		return nil, fmt.Errorf("error expanding DataSets into dataSets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["dataSets"] = v
	}
	if v, err := expandDashboardWidgetXyChartSourceDrilldown(c, f.SourceDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding SourceDrilldown into sourceDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["sourceDrilldown"] = v
	}
	if v, err := expandDashboardWidgetXyChartMetricDrilldown(c, f.MetricDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding MetricDrilldown into metricDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metricDrilldown"] = v
	}
	if v := f.TimeshiftDuration; !dcl.IsEmptyValueIndirect(v) {
		m["timeshiftDuration"] = v
	}
	if v, err := expandDashboardWidgetXyChartThresholdsSlice(c, f.Thresholds); err != nil {
		return nil, fmt.Errorf("error expanding Thresholds into thresholds: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["thresholds"] = v
	}
	if v, err := expandDashboardWidgetXyChartXAxis(c, f.XAxis); err != nil {
		return nil, fmt.Errorf("error expanding XAxis into xAxis: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["xAxis"] = v
	}
	if v, err := expandDashboardWidgetXyChartYAxis(c, f.YAxis); err != nil {
		return nil, fmt.Errorf("error expanding YAxis into yAxis: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["yAxis"] = v
	}
	if v, err := expandDashboardWidgetXyChartChartOptions(c, f.ChartOptions); err != nil {
		return nil, fmt.Errorf("error expanding ChartOptions into chartOptions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["chartOptions"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChart flattens an instance of DashboardWidgetXyChart from a JSON
// response object.
func flattenDashboardWidgetXyChart(c *Client, i interface{}) *DashboardWidgetXyChart {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChart{}
	r.DataSets = flattenDashboardWidgetXyChartDataSetsSlice(c, m["dataSets"])
	r.SourceDrilldown = flattenDashboardWidgetXyChartSourceDrilldown(c, m["sourceDrilldown"])
	r.MetricDrilldown = flattenDashboardWidgetXyChartMetricDrilldown(c, m["metricDrilldown"])
	r.TimeshiftDuration = dcl.FlattenString(m["timeshiftDuration"])
	r.Thresholds = flattenDashboardWidgetXyChartThresholdsSlice(c, m["thresholds"])
	r.XAxis = flattenDashboardWidgetXyChartXAxis(c, m["xAxis"])
	r.YAxis = flattenDashboardWidgetXyChartYAxis(c, m["yAxis"])
	r.ChartOptions = flattenDashboardWidgetXyChartChartOptions(c, m["chartOptions"])

	return r
}

// expandDashboardWidgetXyChartDataSetsMap expands the contents of DashboardWidgetXyChartDataSets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsMap(c *Client, f map[string]DashboardWidgetXyChartDataSets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsSlice expands the contents of DashboardWidgetXyChartDataSets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsSlice(c *Client, f []DashboardWidgetXyChartDataSets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsMap flattens the contents of DashboardWidgetXyChartDataSets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsSlice flattens the contents of DashboardWidgetXyChartDataSets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSets{}
	}

	items := make([]DashboardWidgetXyChartDataSets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSets expands an instance of DashboardWidgetXyChartDataSets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSets(c *Client, f *DashboardWidgetXyChartDataSets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, f.TimeSeriesQuery); err != nil {
		return nil, fmt.Errorf("error expanding TimeSeriesQuery into timeSeriesQuery: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["timeSeriesQuery"] = v
	}
	if v := f.PlotType; !dcl.IsEmptyValueIndirect(v) {
		m["plotType"] = v
	}
	if v := f.LegendTemplate; !dcl.IsEmptyValueIndirect(v) {
		m["legendTemplate"] = v
	}
	if v := f.MinAlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["minAlignmentPeriod"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSets flattens an instance of DashboardWidgetXyChartDataSets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSets(c *Client, i interface{}) *DashboardWidgetXyChartDataSets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSets{}
	r.TimeSeriesQuery = flattenDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, m["timeSeriesQuery"])
	r.PlotType = flattenDashboardWidgetXyChartDataSetsPlotTypeEnum(m["plotType"])
	r.LegendTemplate = dcl.FlattenString(m["legendTemplate"])
	r.MinAlignmentPeriod = dcl.FlattenString(m["minAlignmentPeriod"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQuery into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQuery) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQuerySlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQuery into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQuerySlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQuery) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQuery from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQuery {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQuery{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQuery{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQuery)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQuerySlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQuery from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQuerySlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQuery {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQuery{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQuery{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQuery, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQuery(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQuery expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQuery into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQuery(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQuery) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, f.TimeSeriesFilter); err != nil {
		return nil, fmt.Errorf("error expanding TimeSeriesFilter into timeSeriesFilter: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["timeSeriesFilter"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, f.TimeSeriesFilterRatio); err != nil {
		return nil, fmt.Errorf("error expanding TimeSeriesFilterRatio into timeSeriesFilterRatio: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["timeSeriesFilterRatio"] = v
	}
	if v := f.TimeSeriesQueryLanguage; !dcl.IsEmptyValueIndirect(v) {
		m["timeSeriesQueryLanguage"] = v
	}
	if v := f.ApiSource; !dcl.IsEmptyValueIndirect(v) {
		m["apiSource"] = v
	}
	if v := f.UnitOverride; !dcl.IsEmptyValueIndirect(v) {
		m["unitOverride"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQuery flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQuery from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQuery(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQuery {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQuery{}
	r.TimeSeriesFilter = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, m["timeSeriesFilter"])
	r.TimeSeriesFilterRatio = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, m["timeSeriesFilterRatio"])
	r.TimeSeriesQueryLanguage = dcl.FlattenString(m["timeSeriesQueryLanguage"])
	r.ApiSource = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum(m["apiSource"])
	r.UnitOverride = dcl.FlattenString(m["unitOverride"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Filter; !dcl.IsEmptyValueIndirect(v) {
		m["filter"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, f.Aggregation); err != nil {
		return nil, fmt.Errorf("error expanding Aggregation into aggregation: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["aggregation"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, f.SecondaryAggregation); err != nil {
		return nil, fmt.Errorf("error expanding SecondaryAggregation into secondaryAggregation: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["secondaryAggregation"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, f.PickTimeSeriesFilter); err != nil {
		return nil, fmt.Errorf("error expanding PickTimeSeriesFilter into pickTimeSeriesFilter: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["pickTimeSeriesFilter"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilter{}
	r.Filter = dcl.FlattenString(m["filter"])
	r.Aggregation = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, m["aggregation"])
	r.SecondaryAggregation = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, m["secondaryAggregation"])
	r.PickTimeSeriesFilter = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, m["pickTimeSeriesFilter"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.AlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["alignmentPeriod"] = v
	}
	if v := f.PerSeriesAligner; !dcl.IsEmptyValueIndirect(v) {
		m["perSeriesAligner"] = v
	}
	if v := f.CrossSeriesReducer; !dcl.IsEmptyValueIndirect(v) {
		m["crossSeriesReducer"] = v
	}
	if v := f.GroupByFields; !dcl.IsEmptyValueIndirect(v) {
		m["groupByFields"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, f.ReduceFractionLessThanParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceFractionLessThanParams into reduceFractionLessThanParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceFractionLessThanParams"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, f.ReduceMakeDistributionParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceMakeDistributionParams into reduceMakeDistributionParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceMakeDistributionParams"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregation{}
	r.AlignmentPeriod = dcl.FlattenString(m["alignmentPeriod"])
	r.PerSeriesAligner = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum(m["perSeriesAligner"])
	r.CrossSeriesReducer = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum(m["crossSeriesReducer"])
	r.GroupByFields = dcl.FlattenStringSlice(m["groupByFields"])
	r.ReduceFractionLessThanParams = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, m["reduceFractionLessThanParams"])
	r.ReduceMakeDistributionParams = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, m["reduceMakeDistributionParams"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Threshold; !dcl.IsEmptyValueIndirect(v) {
		m["threshold"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams{}
	r.Threshold = dcl.FlattenDouble(m["threshold"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, f.BucketOptions); err != nil {
		return nil, fmt.Errorf("error expanding BucketOptions into bucketOptions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["bucketOptions"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, f.ExemplarSampling); err != nil {
		return nil, fmt.Errorf("error expanding ExemplarSampling into exemplarSampling: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exemplarSampling"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams{}
	r.BucketOptions = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, m["bucketOptions"])
	r.ExemplarSampling = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, m["exemplarSampling"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, f.LinearBuckets); err != nil {
		return nil, fmt.Errorf("error expanding LinearBuckets into linearBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["linearBuckets"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, f.ExponentialBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExponentialBuckets into exponentialBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exponentialBuckets"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, f.ExplicitBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExplicitBuckets into explicitBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["explicitBuckets"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions{}
	r.LinearBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, m["linearBuckets"])
	r.ExponentialBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, m["exponentialBuckets"])
	r.ExplicitBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, m["explicitBuckets"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Offset; !dcl.IsEmptyValueIndirect(v) {
		m["offset"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.Width = dcl.FlattenDouble(m["width"])
	r.Offset = dcl.FlattenDouble(m["offset"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.GrowthFactor; !dcl.IsEmptyValueIndirect(v) {
		m["growthFactor"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.GrowthFactor = dcl.FlattenDouble(m["growthFactor"])
	r.Scale = dcl.FlattenDouble(m["scale"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Bounds; !dcl.IsEmptyValueIndirect(v) {
		m["bounds"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	r.Bounds = dcl.FlattenFloatSlice(m["bounds"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.MinimumValue; !dcl.IsEmptyValueIndirect(v) {
		m["minimumValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling{}
	r.MinimumValue = dcl.FlattenDouble(m["minimumValue"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.AlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["alignmentPeriod"] = v
	}
	if v := f.PerSeriesAligner; !dcl.IsEmptyValueIndirect(v) {
		m["perSeriesAligner"] = v
	}
	if v := f.CrossSeriesReducer; !dcl.IsEmptyValueIndirect(v) {
		m["crossSeriesReducer"] = v
	}
	if v := f.GroupByFields; !dcl.IsEmptyValueIndirect(v) {
		m["groupByFields"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, f.ReduceFractionLessThanParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceFractionLessThanParams into reduceFractionLessThanParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceFractionLessThanParams"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, f.ReduceMakeDistributionParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceMakeDistributionParams into reduceMakeDistributionParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceMakeDistributionParams"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregation{}
	r.AlignmentPeriod = dcl.FlattenString(m["alignmentPeriod"])
	r.PerSeriesAligner = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum(m["perSeriesAligner"])
	r.CrossSeriesReducer = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum(m["crossSeriesReducer"])
	r.GroupByFields = dcl.FlattenStringSlice(m["groupByFields"])
	r.ReduceFractionLessThanParams = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, m["reduceFractionLessThanParams"])
	r.ReduceMakeDistributionParams = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, m["reduceMakeDistributionParams"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Threshold; !dcl.IsEmptyValueIndirect(v) {
		m["threshold"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams{}
	r.Threshold = dcl.FlattenDouble(m["threshold"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, f.BucketOptions); err != nil {
		return nil, fmt.Errorf("error expanding BucketOptions into bucketOptions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["bucketOptions"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, f.ExemplarSampling); err != nil {
		return nil, fmt.Errorf("error expanding ExemplarSampling into exemplarSampling: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exemplarSampling"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams{}
	r.BucketOptions = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, m["bucketOptions"])
	r.ExemplarSampling = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, m["exemplarSampling"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, f.LinearBuckets); err != nil {
		return nil, fmt.Errorf("error expanding LinearBuckets into linearBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["linearBuckets"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, f.ExponentialBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExponentialBuckets into exponentialBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exponentialBuckets"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, f.ExplicitBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExplicitBuckets into explicitBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["explicitBuckets"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	r.LinearBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, m["linearBuckets"])
	r.ExponentialBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, m["exponentialBuckets"])
	r.ExplicitBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, m["explicitBuckets"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Offset; !dcl.IsEmptyValueIndirect(v) {
		m["offset"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.Width = dcl.FlattenDouble(m["width"])
	r.Offset = dcl.FlattenDouble(m["offset"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.GrowthFactor; !dcl.IsEmptyValueIndirect(v) {
		m["growthFactor"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.GrowthFactor = dcl.FlattenDouble(m["growthFactor"])
	r.Scale = dcl.FlattenDouble(m["scale"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Bounds; !dcl.IsEmptyValueIndirect(v) {
		m["bounds"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	r.Bounds = dcl.FlattenFloatSlice(m["bounds"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.MinimumValue; !dcl.IsEmptyValueIndirect(v) {
		m["minimumValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	r.MinimumValue = dcl.FlattenDouble(m["minimumValue"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.RankingMethod; !dcl.IsEmptyValueIndirect(v) {
		m["rankingMethod"] = v
	}
	if v := f.NumTimeSeries; !dcl.IsEmptyValueIndirect(v) {
		m["numTimeSeries"] = v
	}
	if v := f.Direction; !dcl.IsEmptyValueIndirect(v) {
		m["direction"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter{}
	r.RankingMethod = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum(m["rankingMethod"])
	r.NumTimeSeries = dcl.FlattenInteger(m["numTimeSeries"])
	r.Direction = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum(m["direction"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, f.Numerator); err != nil {
		return nil, fmt.Errorf("error expanding Numerator into numerator: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["numerator"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, f.Denominator); err != nil {
		return nil, fmt.Errorf("error expanding Denominator into denominator: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["denominator"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, f.SecondaryAggregation); err != nil {
		return nil, fmt.Errorf("error expanding SecondaryAggregation into secondaryAggregation: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["secondaryAggregation"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, f.PickTimeSeriesFilter); err != nil {
		return nil, fmt.Errorf("error expanding PickTimeSeriesFilter into pickTimeSeriesFilter: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["pickTimeSeriesFilter"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatio{}
	r.Numerator = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, m["numerator"])
	r.Denominator = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, m["denominator"])
	r.SecondaryAggregation = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, m["secondaryAggregation"])
	r.PickTimeSeriesFilter = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, m["pickTimeSeriesFilter"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Filter; !dcl.IsEmptyValueIndirect(v) {
		m["filter"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, f.Aggregation); err != nil {
		return nil, fmt.Errorf("error expanding Aggregation into aggregation: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["aggregation"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumerator{}
	r.Filter = dcl.FlattenString(m["filter"])
	r.Aggregation = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, m["aggregation"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.AlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["alignmentPeriod"] = v
	}
	if v := f.PerSeriesAligner; !dcl.IsEmptyValueIndirect(v) {
		m["perSeriesAligner"] = v
	}
	if v := f.CrossSeriesReducer; !dcl.IsEmptyValueIndirect(v) {
		m["crossSeriesReducer"] = v
	}
	if v := f.GroupByFields; !dcl.IsEmptyValueIndirect(v) {
		m["groupByFields"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, f.ReduceFractionLessThanParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceFractionLessThanParams into reduceFractionLessThanParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceFractionLessThanParams"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, f.ReduceMakeDistributionParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceMakeDistributionParams into reduceMakeDistributionParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceMakeDistributionParams"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation{}
	r.AlignmentPeriod = dcl.FlattenString(m["alignmentPeriod"])
	r.PerSeriesAligner = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum(m["perSeriesAligner"])
	r.CrossSeriesReducer = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum(m["crossSeriesReducer"])
	r.GroupByFields = dcl.FlattenStringSlice(m["groupByFields"])
	r.ReduceFractionLessThanParams = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, m["reduceFractionLessThanParams"])
	r.ReduceMakeDistributionParams = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, m["reduceMakeDistributionParams"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Threshold; !dcl.IsEmptyValueIndirect(v) {
		m["threshold"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams{}
	r.Threshold = dcl.FlattenDouble(m["threshold"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, f.BucketOptions); err != nil {
		return nil, fmt.Errorf("error expanding BucketOptions into bucketOptions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["bucketOptions"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, f.ExemplarSampling); err != nil {
		return nil, fmt.Errorf("error expanding ExemplarSampling into exemplarSampling: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exemplarSampling"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams{}
	r.BucketOptions = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, m["bucketOptions"])
	r.ExemplarSampling = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, m["exemplarSampling"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, f.LinearBuckets); err != nil {
		return nil, fmt.Errorf("error expanding LinearBuckets into linearBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["linearBuckets"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, f.ExponentialBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExponentialBuckets into exponentialBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exponentialBuckets"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, f.ExplicitBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExplicitBuckets into explicitBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["explicitBuckets"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions{}
	r.LinearBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, m["linearBuckets"])
	r.ExponentialBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, m["exponentialBuckets"])
	r.ExplicitBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, m["explicitBuckets"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Offset; !dcl.IsEmptyValueIndirect(v) {
		m["offset"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.Width = dcl.FlattenDouble(m["width"])
	r.Offset = dcl.FlattenDouble(m["offset"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.GrowthFactor; !dcl.IsEmptyValueIndirect(v) {
		m["growthFactor"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.GrowthFactor = dcl.FlattenDouble(m["growthFactor"])
	r.Scale = dcl.FlattenDouble(m["scale"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Bounds; !dcl.IsEmptyValueIndirect(v) {
		m["bounds"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	r.Bounds = dcl.FlattenFloatSlice(m["bounds"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.MinimumValue; !dcl.IsEmptyValueIndirect(v) {
		m["minimumValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling{}
	r.MinimumValue = dcl.FlattenDouble(m["minimumValue"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Filter; !dcl.IsEmptyValueIndirect(v) {
		m["filter"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, f.Aggregation); err != nil {
		return nil, fmt.Errorf("error expanding Aggregation into aggregation: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["aggregation"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominator{}
	r.Filter = dcl.FlattenString(m["filter"])
	r.Aggregation = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, m["aggregation"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.AlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["alignmentPeriod"] = v
	}
	if v := f.PerSeriesAligner; !dcl.IsEmptyValueIndirect(v) {
		m["perSeriesAligner"] = v
	}
	if v := f.CrossSeriesReducer; !dcl.IsEmptyValueIndirect(v) {
		m["crossSeriesReducer"] = v
	}
	if v := f.GroupByFields; !dcl.IsEmptyValueIndirect(v) {
		m["groupByFields"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, f.ReduceFractionLessThanParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceFractionLessThanParams into reduceFractionLessThanParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceFractionLessThanParams"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, f.ReduceMakeDistributionParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceMakeDistributionParams into reduceMakeDistributionParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceMakeDistributionParams"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation{}
	r.AlignmentPeriod = dcl.FlattenString(m["alignmentPeriod"])
	r.PerSeriesAligner = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum(m["perSeriesAligner"])
	r.CrossSeriesReducer = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum(m["crossSeriesReducer"])
	r.GroupByFields = dcl.FlattenStringSlice(m["groupByFields"])
	r.ReduceFractionLessThanParams = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, m["reduceFractionLessThanParams"])
	r.ReduceMakeDistributionParams = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, m["reduceMakeDistributionParams"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Threshold; !dcl.IsEmptyValueIndirect(v) {
		m["threshold"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams{}
	r.Threshold = dcl.FlattenDouble(m["threshold"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, f.BucketOptions); err != nil {
		return nil, fmt.Errorf("error expanding BucketOptions into bucketOptions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["bucketOptions"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, f.ExemplarSampling); err != nil {
		return nil, fmt.Errorf("error expanding ExemplarSampling into exemplarSampling: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exemplarSampling"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams{}
	r.BucketOptions = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, m["bucketOptions"])
	r.ExemplarSampling = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, m["exemplarSampling"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, f.LinearBuckets); err != nil {
		return nil, fmt.Errorf("error expanding LinearBuckets into linearBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["linearBuckets"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, f.ExponentialBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExponentialBuckets into exponentialBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exponentialBuckets"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, f.ExplicitBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExplicitBuckets into explicitBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["explicitBuckets"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions{}
	r.LinearBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, m["linearBuckets"])
	r.ExponentialBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, m["exponentialBuckets"])
	r.ExplicitBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, m["explicitBuckets"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Offset; !dcl.IsEmptyValueIndirect(v) {
		m["offset"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.Width = dcl.FlattenDouble(m["width"])
	r.Offset = dcl.FlattenDouble(m["offset"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.GrowthFactor; !dcl.IsEmptyValueIndirect(v) {
		m["growthFactor"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.GrowthFactor = dcl.FlattenDouble(m["growthFactor"])
	r.Scale = dcl.FlattenDouble(m["scale"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Bounds; !dcl.IsEmptyValueIndirect(v) {
		m["bounds"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	r.Bounds = dcl.FlattenFloatSlice(m["bounds"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.MinimumValue; !dcl.IsEmptyValueIndirect(v) {
		m["minimumValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling{}
	r.MinimumValue = dcl.FlattenDouble(m["minimumValue"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.AlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["alignmentPeriod"] = v
	}
	if v := f.PerSeriesAligner; !dcl.IsEmptyValueIndirect(v) {
		m["perSeriesAligner"] = v
	}
	if v := f.CrossSeriesReducer; !dcl.IsEmptyValueIndirect(v) {
		m["crossSeriesReducer"] = v
	}
	if v := f.GroupByFields; !dcl.IsEmptyValueIndirect(v) {
		m["groupByFields"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, f.ReduceFractionLessThanParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceFractionLessThanParams into reduceFractionLessThanParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceFractionLessThanParams"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, f.ReduceMakeDistributionParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceMakeDistributionParams into reduceMakeDistributionParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceMakeDistributionParams"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation{}
	r.AlignmentPeriod = dcl.FlattenString(m["alignmentPeriod"])
	r.PerSeriesAligner = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum(m["perSeriesAligner"])
	r.CrossSeriesReducer = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum(m["crossSeriesReducer"])
	r.GroupByFields = dcl.FlattenStringSlice(m["groupByFields"])
	r.ReduceFractionLessThanParams = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, m["reduceFractionLessThanParams"])
	r.ReduceMakeDistributionParams = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, m["reduceMakeDistributionParams"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Threshold; !dcl.IsEmptyValueIndirect(v) {
		m["threshold"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams{}
	r.Threshold = dcl.FlattenDouble(m["threshold"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, f.BucketOptions); err != nil {
		return nil, fmt.Errorf("error expanding BucketOptions into bucketOptions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["bucketOptions"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, f.ExemplarSampling); err != nil {
		return nil, fmt.Errorf("error expanding ExemplarSampling into exemplarSampling: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exemplarSampling"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams{}
	r.BucketOptions = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, m["bucketOptions"])
	r.ExemplarSampling = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, m["exemplarSampling"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, f.LinearBuckets); err != nil {
		return nil, fmt.Errorf("error expanding LinearBuckets into linearBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["linearBuckets"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, f.ExponentialBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExponentialBuckets into exponentialBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exponentialBuckets"] = v
	}
	if v, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, f.ExplicitBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExplicitBuckets into explicitBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["explicitBuckets"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	r.LinearBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, m["linearBuckets"])
	r.ExponentialBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, m["exponentialBuckets"])
	r.ExplicitBuckets = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, m["explicitBuckets"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Offset; !dcl.IsEmptyValueIndirect(v) {
		m["offset"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.Width = dcl.FlattenDouble(m["width"])
	r.Offset = dcl.FlattenDouble(m["offset"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.GrowthFactor; !dcl.IsEmptyValueIndirect(v) {
		m["growthFactor"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.GrowthFactor = dcl.FlattenDouble(m["growthFactor"])
	r.Scale = dcl.FlattenDouble(m["scale"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Bounds; !dcl.IsEmptyValueIndirect(v) {
		m["bounds"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	r.Bounds = dcl.FlattenFloatSlice(m["bounds"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.MinimumValue; !dcl.IsEmptyValueIndirect(v) {
		m["minimumValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	r.MinimumValue = dcl.FlattenDouble(m["minimumValue"])

	return r
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterMap expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterMap(c *Client, f map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice expands the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice(c *Client, f []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterMap flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter{}
	}

	items := make(map[string]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter expands an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c *Client, f *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.RankingMethod; !dcl.IsEmptyValueIndirect(v) {
		m["rankingMethod"] = v
	}
	if v := f.NumTimeSeries; !dcl.IsEmptyValueIndirect(v) {
		m["numTimeSeries"] = v
	}
	if v := f.Direction; !dcl.IsEmptyValueIndirect(v) {
		m["direction"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter flattens an instance of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c *Client, i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter{}
	r.RankingMethod = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum(m["rankingMethod"])
	r.NumTimeSeries = dcl.FlattenInteger(m["numTimeSeries"])
	r.Direction = flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum(m["direction"])

	return r
}

// expandDashboardWidgetXyChartSourceDrilldownMap expands the contents of DashboardWidgetXyChartSourceDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMap(c *Client, f map[string]DashboardWidgetXyChartSourceDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSourceDrilldownSlice expands the contents of DashboardWidgetXyChartSourceDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownSlice(c *Client, f []DashboardWidgetXyChartSourceDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownMap flattens the contents of DashboardWidgetXyChartSourceDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartSourceDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartSourceDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartSourceDrilldown{}
	}

	items := make(map[string]DashboardWidgetXyChartSourceDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartSourceDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownSlice flattens the contents of DashboardWidgetXyChartSourceDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldown{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartSourceDrilldown expands an instance of DashboardWidgetXyChartSourceDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldown(c *Client, f *DashboardWidgetXyChartSourceDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, f.ResourceTypeDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding ResourceTypeDrilldown into resourceTypeDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["resourceTypeDrilldown"] = v
	}
	if v, err := expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsSlice(c, f.ResourceLabelDrilldowns); err != nil {
		return nil, fmt.Errorf("error expanding ResourceLabelDrilldowns into resourceLabelDrilldowns: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["resourceLabelDrilldowns"] = v
	}
	if v, err := expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsSlice(c, f.MetadataSystemLabelDrilldowns); err != nil {
		return nil, fmt.Errorf("error expanding MetadataSystemLabelDrilldowns into metadataSystemLabelDrilldowns: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metadataSystemLabelDrilldowns"] = v
	}
	if v, err := expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsSlice(c, f.MetadataUserLabelDrilldowns); err != nil {
		return nil, fmt.Errorf("error expanding MetadataUserLabelDrilldowns into metadataUserLabelDrilldowns: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metadataUserLabelDrilldowns"] = v
	}
	if v, err := expandDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, f.GroupNameDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding GroupNameDrilldown into groupNameDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["groupNameDrilldown"] = v
	}
	if v, err := expandDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, f.ServiceNameDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding ServiceNameDrilldown into serviceNameDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["serviceNameDrilldown"] = v
	}
	if v, err := expandDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, f.ServiceTypeDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding ServiceTypeDrilldown into serviceTypeDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["serviceTypeDrilldown"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartSourceDrilldown flattens an instance of DashboardWidgetXyChartSourceDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldown(c *Client, i interface{}) *DashboardWidgetXyChartSourceDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartSourceDrilldown{}
	r.ResourceTypeDrilldown = flattenDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, m["resourceTypeDrilldown"])
	r.ResourceLabelDrilldowns = flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsSlice(c, m["resourceLabelDrilldowns"])
	r.MetadataSystemLabelDrilldowns = flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsSlice(c, m["metadataSystemLabelDrilldowns"])
	r.MetadataUserLabelDrilldowns = flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsSlice(c, m["metadataUserLabelDrilldowns"])
	r.GroupNameDrilldown = flattenDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, m["groupNameDrilldown"])
	r.ServiceNameDrilldown = flattenDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, m["serviceNameDrilldown"])
	r.ServiceTypeDrilldown = flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, m["serviceTypeDrilldown"])

	return r
}

// expandDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownMap expands the contents of DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownMap(c *Client, f map[string]DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownSlice expands the contents of DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownSlice(c *Client, f []DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownMap flattens the contents of DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown{}
	}

	items := make(map[string]DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldownSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown expands an instance of DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c *Client, f *DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValues; !dcl.IsEmptyValueIndirect(v) {
		m["targetValues"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown flattens an instance of DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown(c *Client, i interface{}) *DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartSourceDrilldownResourceTypeDrilldown{}
	r.TargetValues = dcl.FlattenStringSlice(m["targetValues"])

	return r
}

// expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsMap expands the contents of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsMap(c *Client, f map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsSlice expands the contents of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsSlice(c *Client, f []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsMap flattens the contents of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns{}
	}

	items := make(map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns expands an instance of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c *Client, f *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.LogicalOperator; !dcl.IsEmptyValueIndirect(v) {
		m["logicalOperator"] = v
	}
	if v, err := expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c, f.ValueRestrictions); err != nil {
		return nil, fmt.Errorf("error expanding ValueRestrictions into valueRestrictions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["valueRestrictions"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns flattens an instance of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns(c *Client, i interface{}) *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldowns{}
	r.Label = dcl.FlattenString(m["label"])
	r.LogicalOperator = flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum(m["logicalOperator"])
	r.ValueRestrictions = flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c, m["valueRestrictions"])

	return r
}

// expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsMap expands the contents of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsMap(c *Client, f map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice expands the contents of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c *Client, f []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsMap flattens the contents of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions{}
	}

	items := make(map[string]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions expands an instance of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c *Client, f *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValue; !dcl.IsEmptyValueIndirect(v) {
		m["targetValue"] = v
	}
	if v := f.Comparator; !dcl.IsEmptyValueIndirect(v) {
		m["comparator"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions flattens an instance of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions(c *Client, i interface{}) *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictions{}
	r.TargetValue = dcl.FlattenString(m["targetValue"])
	r.Comparator = flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum(m["comparator"])

	return r
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsMap expands the contents of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsMap(c *Client, f map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsSlice expands the contents of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsSlice(c *Client, f []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsMap flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns{}
	}

	items := make(map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns expands an instance of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c *Client, f *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.LogicalOperator; !dcl.IsEmptyValueIndirect(v) {
		m["logicalOperator"] = v
	}
	if v, err := expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c, f.ValueRestrictions); err != nil {
		return nil, fmt.Errorf("error expanding ValueRestrictions into valueRestrictions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["valueRestrictions"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns flattens an instance of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns(c *Client, i interface{}) *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldowns{}
	r.Label = dcl.FlattenString(m["label"])
	r.LogicalOperator = flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum(m["logicalOperator"])
	r.ValueRestrictions = flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c, m["valueRestrictions"])

	return r
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsMap expands the contents of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsMap(c *Client, f map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice expands the contents of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c *Client, f []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsMap flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions{}
	}

	items := make(map[string]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions expands an instance of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c *Client, f *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValue; !dcl.IsEmptyValueIndirect(v) {
		m["targetValue"] = v
	}
	if v := f.Comparator; !dcl.IsEmptyValueIndirect(v) {
		m["comparator"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions flattens an instance of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c *Client, i interface{}) *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions{}
	r.TargetValue = dcl.FlattenString(m["targetValue"])
	r.Comparator = flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum(m["comparator"])

	return r
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsMap expands the contents of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsMap(c *Client, f map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsSlice expands the contents of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsSlice(c *Client, f []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsMap flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns{}
	}

	items := make(map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns expands an instance of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c *Client, f *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.LogicalOperator; !dcl.IsEmptyValueIndirect(v) {
		m["logicalOperator"] = v
	}
	if v, err := expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c, f.ValueRestrictions); err != nil {
		return nil, fmt.Errorf("error expanding ValueRestrictions into valueRestrictions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["valueRestrictions"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns flattens an instance of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns(c *Client, i interface{}) *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldowns{}
	r.Label = dcl.FlattenString(m["label"])
	r.LogicalOperator = flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum(m["logicalOperator"])
	r.ValueRestrictions = flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c, m["valueRestrictions"])

	return r
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsMap expands the contents of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsMap(c *Client, f map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice expands the contents of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c *Client, f []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsMap flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions{}
	}

	items := make(map[string]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions expands an instance of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c *Client, f *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValue; !dcl.IsEmptyValueIndirect(v) {
		m["targetValue"] = v
	}
	if v := f.Comparator; !dcl.IsEmptyValueIndirect(v) {
		m["comparator"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions flattens an instance of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c *Client, i interface{}) *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions{}
	r.TargetValue = dcl.FlattenString(m["targetValue"])
	r.Comparator = flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum(m["comparator"])

	return r
}

// expandDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownMap expands the contents of DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownMap(c *Client, f map[string]DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownSlice expands the contents of DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownSlice(c *Client, f []DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownMap flattens the contents of DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown{}
	}

	items := make(map[string]DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownGroupNameDrilldownSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown expands an instance of DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c *Client, f *DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValues; !dcl.IsEmptyValueIndirect(v) {
		m["targetValues"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown flattens an instance of DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownGroupNameDrilldown(c *Client, i interface{}) *DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartSourceDrilldownGroupNameDrilldown{}
	r.TargetValues = dcl.FlattenStringSlice(m["targetValues"])

	return r
}

// expandDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownMap expands the contents of DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownMap(c *Client, f map[string]DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownSlice expands the contents of DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownSlice(c *Client, f []DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownMap flattens the contents of DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown{}
	}

	items := make(map[string]DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownServiceNameDrilldownSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown expands an instance of DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c *Client, f *DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValues; !dcl.IsEmptyValueIndirect(v) {
		m["targetValues"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown flattens an instance of DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownServiceNameDrilldown(c *Client, i interface{}) *DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartSourceDrilldownServiceNameDrilldown{}
	r.TargetValues = dcl.FlattenStringSlice(m["targetValues"])

	return r
}

// expandDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownMap expands the contents of DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownMap(c *Client, f map[string]DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownSlice expands the contents of DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownSlice(c *Client, f []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownMap flattens the contents of DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown{}
	}

	items := make(map[string]DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown expands an instance of DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c *Client, f *DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Types; !dcl.IsEmptyValueIndirect(v) {
		m["types"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown flattens an instance of DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown(c *Client, i interface{}) *DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldown{}
	r.Types = flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnumSlice(c, m["types"])

	return r
}

// expandDashboardWidgetXyChartMetricDrilldownMap expands the contents of DashboardWidgetXyChartMetricDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMap(c *Client, f map[string]DashboardWidgetXyChartMetricDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartMetricDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartMetricDrilldownSlice expands the contents of DashboardWidgetXyChartMetricDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownSlice(c *Client, f []DashboardWidgetXyChartMetricDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartMetricDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartMetricDrilldownMap flattens the contents of DashboardWidgetXyChartMetricDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartMetricDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartMetricDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartMetricDrilldown{}
	}

	items := make(map[string]DashboardWidgetXyChartMetricDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartMetricDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartMetricDrilldownSlice flattens the contents of DashboardWidgetXyChartMetricDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownSlice(c *Client, i interface{}) []DashboardWidgetXyChartMetricDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartMetricDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartMetricDrilldown{}
	}

	items := make([]DashboardWidgetXyChartMetricDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartMetricDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartMetricDrilldown expands an instance of DashboardWidgetXyChartMetricDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldown(c *Client, f *DashboardWidgetXyChartMetricDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, f.MetricTypeDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding MetricTypeDrilldown into metricTypeDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metricTypeDrilldown"] = v
	}
	if v, err := expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsSlice(c, f.MetricLabelDrilldowns); err != nil {
		return nil, fmt.Errorf("error expanding MetricLabelDrilldowns into metricLabelDrilldowns: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metricLabelDrilldowns"] = v
	}
	if v, err := expandDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, f.MetricGroupByDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding MetricGroupByDrilldown into metricGroupByDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metricGroupByDrilldown"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartMetricDrilldown flattens an instance of DashboardWidgetXyChartMetricDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldown(c *Client, i interface{}) *DashboardWidgetXyChartMetricDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartMetricDrilldown{}
	r.MetricTypeDrilldown = flattenDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, m["metricTypeDrilldown"])
	r.MetricLabelDrilldowns = flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsSlice(c, m["metricLabelDrilldowns"])
	r.MetricGroupByDrilldown = flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, m["metricGroupByDrilldown"])

	return r
}

// expandDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownMap expands the contents of DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownMap(c *Client, f map[string]DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownSlice expands the contents of DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownSlice(c *Client, f []DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownMap flattens the contents of DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown{}
	}

	items := make(map[string]DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownSlice flattens the contents of DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldownSlice(c *Client, i interface{}) []DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown{}
	}

	items := make([]DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown expands an instance of DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c *Client, f *DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValue; !dcl.IsEmptyValueIndirect(v) {
		m["targetValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown flattens an instance of DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown(c *Client, i interface{}) *DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartMetricDrilldownMetricTypeDrilldown{}
	r.TargetValue = dcl.FlattenString(m["targetValue"])

	return r
}

// expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsMap expands the contents of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsMap(c *Client, f map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsSlice expands the contents of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsSlice(c *Client, f []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsMap flattens the contents of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns{}
	}

	items := make(map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsSlice flattens the contents of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsSlice(c *Client, i interface{}) []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns{}
	}

	items := make([]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns expands an instance of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c *Client, f *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.LogicalOperator; !dcl.IsEmptyValueIndirect(v) {
		m["logicalOperator"] = v
	}
	if v, err := expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c, f.ValueRestrictions); err != nil {
		return nil, fmt.Errorf("error expanding ValueRestrictions into valueRestrictions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["valueRestrictions"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns flattens an instance of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns(c *Client, i interface{}) *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldowns{}
	r.Label = dcl.FlattenString(m["label"])
	r.LogicalOperator = flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum(m["logicalOperator"])
	r.ValueRestrictions = flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c, m["valueRestrictions"])

	return r
}

// expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsMap expands the contents of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsMap(c *Client, f map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice expands the contents of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c *Client, f []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsMap flattens the contents of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions{}
	}

	items := make(map[string]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice flattens the contents of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c *Client, i interface{}) []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions{}
	}

	items := make([]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions expands an instance of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c *Client, f *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValue; !dcl.IsEmptyValueIndirect(v) {
		m["targetValue"] = v
	}
	if v := f.Comparator; !dcl.IsEmptyValueIndirect(v) {
		m["comparator"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions flattens an instance of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions(c *Client, i interface{}) *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictions{}
	r.TargetValue = dcl.FlattenString(m["targetValue"])
	r.Comparator = flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum(m["comparator"])

	return r
}

// expandDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownMap expands the contents of DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownMap(c *Client, f map[string]DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownSlice expands the contents of DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownSlice(c *Client, f []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownMap flattens the contents of DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown{}
	}

	items := make(map[string]DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownSlice flattens the contents of DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownSlice(c *Client, i interface{}) []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown{}
	}

	items := make([]DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown expands an instance of DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown into a JSON
// request object.
func expandDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c *Client, f *DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.ResourceLabels; !dcl.IsEmptyValueIndirect(v) {
		m["resourceLabels"] = v
	}
	if v := f.MetricLabels; !dcl.IsEmptyValueIndirect(v) {
		m["metricLabels"] = v
	}
	if v := f.MetadataSystemLabels; !dcl.IsEmptyValueIndirect(v) {
		m["metadataSystemLabels"] = v
	}
	if v := f.MetadataUserLabels; !dcl.IsEmptyValueIndirect(v) {
		m["metadataUserLabels"] = v
	}
	if v := f.Reducer; !dcl.IsEmptyValueIndirect(v) {
		m["reducer"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown flattens an instance of DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown(c *Client, i interface{}) *DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldown{}
	r.ResourceLabels = dcl.FlattenStringSlice(m["resourceLabels"])
	r.MetricLabels = dcl.FlattenStringSlice(m["metricLabels"])
	r.MetadataSystemLabels = dcl.FlattenStringSlice(m["metadataSystemLabels"])
	r.MetadataUserLabels = dcl.FlattenStringSlice(m["metadataUserLabels"])
	r.Reducer = flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum(m["reducer"])

	return r
}

// expandDashboardWidgetXyChartThresholdsMap expands the contents of DashboardWidgetXyChartThresholds into a JSON
// request object.
func expandDashboardWidgetXyChartThresholdsMap(c *Client, f map[string]DashboardWidgetXyChartThresholds) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartThresholds(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartThresholdsSlice expands the contents of DashboardWidgetXyChartThresholds into a JSON
// request object.
func expandDashboardWidgetXyChartThresholdsSlice(c *Client, f []DashboardWidgetXyChartThresholds) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartThresholds(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartThresholdsMap flattens the contents of DashboardWidgetXyChartThresholds from a JSON
// response object.
func flattenDashboardWidgetXyChartThresholdsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartThresholds {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartThresholds{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartThresholds{}
	}

	items := make(map[string]DashboardWidgetXyChartThresholds)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartThresholds(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartThresholdsSlice flattens the contents of DashboardWidgetXyChartThresholds from a JSON
// response object.
func flattenDashboardWidgetXyChartThresholdsSlice(c *Client, i interface{}) []DashboardWidgetXyChartThresholds {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartThresholds{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartThresholds{}
	}

	items := make([]DashboardWidgetXyChartThresholds, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartThresholds(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartThresholds expands an instance of DashboardWidgetXyChartThresholds into a JSON
// request object.
func expandDashboardWidgetXyChartThresholds(c *Client, f *DashboardWidgetXyChartThresholds) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.Value; !dcl.IsEmptyValueIndirect(v) {
		m["value"] = v
	}
	if v := f.Color; !dcl.IsEmptyValueIndirect(v) {
		m["color"] = v
	}
	if v := f.Direction; !dcl.IsEmptyValueIndirect(v) {
		m["direction"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartThresholds flattens an instance of DashboardWidgetXyChartThresholds from a JSON
// response object.
func flattenDashboardWidgetXyChartThresholds(c *Client, i interface{}) *DashboardWidgetXyChartThresholds {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartThresholds{}
	r.Label = dcl.FlattenString(m["label"])
	r.Value = dcl.FlattenDouble(m["value"])
	r.Color = flattenDashboardWidgetXyChartThresholdsColorEnum(m["color"])
	r.Direction = flattenDashboardWidgetXyChartThresholdsDirectionEnum(m["direction"])

	return r
}

// expandDashboardWidgetXyChartXAxisMap expands the contents of DashboardWidgetXyChartXAxis into a JSON
// request object.
func expandDashboardWidgetXyChartXAxisMap(c *Client, f map[string]DashboardWidgetXyChartXAxis) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartXAxis(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartXAxisSlice expands the contents of DashboardWidgetXyChartXAxis into a JSON
// request object.
func expandDashboardWidgetXyChartXAxisSlice(c *Client, f []DashboardWidgetXyChartXAxis) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartXAxis(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartXAxisMap flattens the contents of DashboardWidgetXyChartXAxis from a JSON
// response object.
func flattenDashboardWidgetXyChartXAxisMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartXAxis {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartXAxis{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartXAxis{}
	}

	items := make(map[string]DashboardWidgetXyChartXAxis)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartXAxis(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartXAxisSlice flattens the contents of DashboardWidgetXyChartXAxis from a JSON
// response object.
func flattenDashboardWidgetXyChartXAxisSlice(c *Client, i interface{}) []DashboardWidgetXyChartXAxis {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartXAxis{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartXAxis{}
	}

	items := make([]DashboardWidgetXyChartXAxis, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartXAxis(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartXAxis expands an instance of DashboardWidgetXyChartXAxis into a JSON
// request object.
func expandDashboardWidgetXyChartXAxis(c *Client, f *DashboardWidgetXyChartXAxis) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartXAxis flattens an instance of DashboardWidgetXyChartXAxis from a JSON
// response object.
func flattenDashboardWidgetXyChartXAxis(c *Client, i interface{}) *DashboardWidgetXyChartXAxis {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartXAxis{}
	r.Label = dcl.FlattenString(m["label"])
	r.Scale = flattenDashboardWidgetXyChartXAxisScaleEnum(m["scale"])

	return r
}

// expandDashboardWidgetXyChartYAxisMap expands the contents of DashboardWidgetXyChartYAxis into a JSON
// request object.
func expandDashboardWidgetXyChartYAxisMap(c *Client, f map[string]DashboardWidgetXyChartYAxis) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartYAxis(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartYAxisSlice expands the contents of DashboardWidgetXyChartYAxis into a JSON
// request object.
func expandDashboardWidgetXyChartYAxisSlice(c *Client, f []DashboardWidgetXyChartYAxis) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartYAxis(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartYAxisMap flattens the contents of DashboardWidgetXyChartYAxis from a JSON
// response object.
func flattenDashboardWidgetXyChartYAxisMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartYAxis {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartYAxis{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartYAxis{}
	}

	items := make(map[string]DashboardWidgetXyChartYAxis)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartYAxis(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartYAxisSlice flattens the contents of DashboardWidgetXyChartYAxis from a JSON
// response object.
func flattenDashboardWidgetXyChartYAxisSlice(c *Client, i interface{}) []DashboardWidgetXyChartYAxis {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartYAxis{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartYAxis{}
	}

	items := make([]DashboardWidgetXyChartYAxis, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartYAxis(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartYAxis expands an instance of DashboardWidgetXyChartYAxis into a JSON
// request object.
func expandDashboardWidgetXyChartYAxis(c *Client, f *DashboardWidgetXyChartYAxis) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartYAxis flattens an instance of DashboardWidgetXyChartYAxis from a JSON
// response object.
func flattenDashboardWidgetXyChartYAxis(c *Client, i interface{}) *DashboardWidgetXyChartYAxis {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartYAxis{}
	r.Label = dcl.FlattenString(m["label"])
	r.Scale = flattenDashboardWidgetXyChartYAxisScaleEnum(m["scale"])

	return r
}

// expandDashboardWidgetXyChartChartOptionsMap expands the contents of DashboardWidgetXyChartChartOptions into a JSON
// request object.
func expandDashboardWidgetXyChartChartOptionsMap(c *Client, f map[string]DashboardWidgetXyChartChartOptions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetXyChartChartOptions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetXyChartChartOptionsSlice expands the contents of DashboardWidgetXyChartChartOptions into a JSON
// request object.
func expandDashboardWidgetXyChartChartOptionsSlice(c *Client, f []DashboardWidgetXyChartChartOptions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetXyChartChartOptions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetXyChartChartOptionsMap flattens the contents of DashboardWidgetXyChartChartOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartChartOptionsMap(c *Client, i interface{}) map[string]DashboardWidgetXyChartChartOptions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetXyChartChartOptions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetXyChartChartOptions{}
	}

	items := make(map[string]DashboardWidgetXyChartChartOptions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetXyChartChartOptions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetXyChartChartOptionsSlice flattens the contents of DashboardWidgetXyChartChartOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartChartOptionsSlice(c *Client, i interface{}) []DashboardWidgetXyChartChartOptions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartChartOptions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartChartOptions{}
	}

	items := make([]DashboardWidgetXyChartChartOptions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartChartOptions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetXyChartChartOptions expands an instance of DashboardWidgetXyChartChartOptions into a JSON
// request object.
func expandDashboardWidgetXyChartChartOptions(c *Client, f *DashboardWidgetXyChartChartOptions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Mode; !dcl.IsEmptyValueIndirect(v) {
		m["mode"] = v
	}
	if v := f.ShowLegend; !dcl.IsEmptyValueIndirect(v) {
		m["showLegend"] = v
	}

	return m, nil
}

// flattenDashboardWidgetXyChartChartOptions flattens an instance of DashboardWidgetXyChartChartOptions from a JSON
// response object.
func flattenDashboardWidgetXyChartChartOptions(c *Client, i interface{}) *DashboardWidgetXyChartChartOptions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetXyChartChartOptions{}
	r.Mode = flattenDashboardWidgetXyChartChartOptionsModeEnum(m["mode"])
	r.ShowLegend = dcl.FlattenBool(m["showLegend"])

	return r
}

// expandDashboardWidgetScorecardMap expands the contents of DashboardWidgetScorecard into a JSON
// request object.
func expandDashboardWidgetScorecardMap(c *Client, f map[string]DashboardWidgetScorecard) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecard(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSlice expands the contents of DashboardWidgetScorecard into a JSON
// request object.
func expandDashboardWidgetScorecardSlice(c *Client, f []DashboardWidgetScorecard) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecard(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardMap flattens the contents of DashboardWidgetScorecard from a JSON
// response object.
func flattenDashboardWidgetScorecardMap(c *Client, i interface{}) map[string]DashboardWidgetScorecard {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecard{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecard{}
	}

	items := make(map[string]DashboardWidgetScorecard)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecard(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSlice flattens the contents of DashboardWidgetScorecard from a JSON
// response object.
func flattenDashboardWidgetScorecardSlice(c *Client, i interface{}) []DashboardWidgetScorecard {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecard{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecard{}
	}

	items := make([]DashboardWidgetScorecard, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecard(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecard expands an instance of DashboardWidgetScorecard into a JSON
// request object.
func expandDashboardWidgetScorecard(c *Client, f *DashboardWidgetScorecard) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQuery(c, f.TimeSeriesQuery); err != nil {
		return nil, fmt.Errorf("error expanding TimeSeriesQuery into timeSeriesQuery: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["timeSeriesQuery"] = v
	}
	if v, err := expandDashboardWidgetScorecardSourceDrilldown(c, f.SourceDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding SourceDrilldown into sourceDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["sourceDrilldown"] = v
	}
	if v, err := expandDashboardWidgetScorecardMetricDrilldown(c, f.MetricDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding MetricDrilldown into metricDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metricDrilldown"] = v
	}
	if v, err := expandDashboardWidgetScorecardGaugeView(c, f.GaugeView); err != nil {
		return nil, fmt.Errorf("error expanding GaugeView into gaugeView: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["gaugeView"] = v
	}
	if v, err := expandDashboardWidgetScorecardSparkChartView(c, f.SparkChartView); err != nil {
		return nil, fmt.Errorf("error expanding SparkChartView into sparkChartView: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["sparkChartView"] = v
	}
	if v, err := expandDashboardWidgetScorecardThresholdsSlice(c, f.Thresholds); err != nil {
		return nil, fmt.Errorf("error expanding Thresholds into thresholds: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["thresholds"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecard flattens an instance of DashboardWidgetScorecard from a JSON
// response object.
func flattenDashboardWidgetScorecard(c *Client, i interface{}) *DashboardWidgetScorecard {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecard{}
	r.TimeSeriesQuery = flattenDashboardWidgetScorecardTimeSeriesQuery(c, m["timeSeriesQuery"])
	r.SourceDrilldown = flattenDashboardWidgetScorecardSourceDrilldown(c, m["sourceDrilldown"])
	r.MetricDrilldown = flattenDashboardWidgetScorecardMetricDrilldown(c, m["metricDrilldown"])
	r.GaugeView = flattenDashboardWidgetScorecardGaugeView(c, m["gaugeView"])
	r.SparkChartView = flattenDashboardWidgetScorecardSparkChartView(c, m["sparkChartView"])
	r.Thresholds = flattenDashboardWidgetScorecardThresholdsSlice(c, m["thresholds"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryMap expands the contents of DashboardWidgetScorecardTimeSeriesQuery into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQuery) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQuery(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQuerySlice expands the contents of DashboardWidgetScorecardTimeSeriesQuery into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQuerySlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQuery) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQuery(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryMap flattens the contents of DashboardWidgetScorecardTimeSeriesQuery from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQuery {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQuery{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQuery{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQuery)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQuery(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQuerySlice flattens the contents of DashboardWidgetScorecardTimeSeriesQuery from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQuerySlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQuery {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQuery{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQuery{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQuery, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQuery(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQuery expands an instance of DashboardWidgetScorecardTimeSeriesQuery into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQuery(c *Client, f *DashboardWidgetScorecardTimeSeriesQuery) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, f.TimeSeriesFilter); err != nil {
		return nil, fmt.Errorf("error expanding TimeSeriesFilter into timeSeriesFilter: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["timeSeriesFilter"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, f.TimeSeriesFilterRatio); err != nil {
		return nil, fmt.Errorf("error expanding TimeSeriesFilterRatio into timeSeriesFilterRatio: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["timeSeriesFilterRatio"] = v
	}
	if v := f.TimeSeriesQueryLanguage; !dcl.IsEmptyValueIndirect(v) {
		m["timeSeriesQueryLanguage"] = v
	}
	if v := f.ApiSource; !dcl.IsEmptyValueIndirect(v) {
		m["apiSource"] = v
	}
	if v := f.UnitOverride; !dcl.IsEmptyValueIndirect(v) {
		m["unitOverride"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQuery flattens an instance of DashboardWidgetScorecardTimeSeriesQuery from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQuery(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQuery {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQuery{}
	r.TimeSeriesFilter = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, m["timeSeriesFilter"])
	r.TimeSeriesFilterRatio = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, m["timeSeriesFilterRatio"])
	r.TimeSeriesQueryLanguage = dcl.FlattenString(m["timeSeriesQueryLanguage"])
	r.ApiSource = flattenDashboardWidgetScorecardTimeSeriesQueryApiSourceEnum(m["apiSource"])
	r.UnitOverride = dcl.FlattenString(m["unitOverride"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Filter; !dcl.IsEmptyValueIndirect(v) {
		m["filter"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, f.Aggregation); err != nil {
		return nil, fmt.Errorf("error expanding Aggregation into aggregation: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["aggregation"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, f.SecondaryAggregation); err != nil {
		return nil, fmt.Errorf("error expanding SecondaryAggregation into secondaryAggregation: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["secondaryAggregation"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, f.PickTimeSeriesFilter); err != nil {
		return nil, fmt.Errorf("error expanding PickTimeSeriesFilter into pickTimeSeriesFilter: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["pickTimeSeriesFilter"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilter{}
	r.Filter = dcl.FlattenString(m["filter"])
	r.Aggregation = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, m["aggregation"])
	r.SecondaryAggregation = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, m["secondaryAggregation"])
	r.PickTimeSeriesFilter = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, m["pickTimeSeriesFilter"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.AlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["alignmentPeriod"] = v
	}
	if v := f.PerSeriesAligner; !dcl.IsEmptyValueIndirect(v) {
		m["perSeriesAligner"] = v
	}
	if v := f.CrossSeriesReducer; !dcl.IsEmptyValueIndirect(v) {
		m["crossSeriesReducer"] = v
	}
	if v := f.GroupByFields; !dcl.IsEmptyValueIndirect(v) {
		m["groupByFields"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, f.ReduceFractionLessThanParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceFractionLessThanParams into reduceFractionLessThanParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceFractionLessThanParams"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, f.ReduceMakeDistributionParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceMakeDistributionParams into reduceMakeDistributionParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceMakeDistributionParams"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation{}
	r.AlignmentPeriod = dcl.FlattenString(m["alignmentPeriod"])
	r.PerSeriesAligner = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum(m["perSeriesAligner"])
	r.CrossSeriesReducer = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum(m["crossSeriesReducer"])
	r.GroupByFields = dcl.FlattenStringSlice(m["groupByFields"])
	r.ReduceFractionLessThanParams = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, m["reduceFractionLessThanParams"])
	r.ReduceMakeDistributionParams = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, m["reduceMakeDistributionParams"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParamsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Threshold; !dcl.IsEmptyValueIndirect(v) {
		m["threshold"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceFractionLessThanParams{}
	r.Threshold = dcl.FlattenDouble(m["threshold"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, f.BucketOptions); err != nil {
		return nil, fmt.Errorf("error expanding BucketOptions into bucketOptions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["bucketOptions"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, f.ExemplarSampling); err != nil {
		return nil, fmt.Errorf("error expanding ExemplarSampling into exemplarSampling: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exemplarSampling"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParams{}
	r.BucketOptions = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, m["bucketOptions"])
	r.ExemplarSampling = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, m["exemplarSampling"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, f.LinearBuckets); err != nil {
		return nil, fmt.Errorf("error expanding LinearBuckets into linearBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["linearBuckets"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, f.ExponentialBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExponentialBuckets into exponentialBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exponentialBuckets"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, f.ExplicitBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExplicitBuckets into explicitBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["explicitBuckets"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptions{}
	r.LinearBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, m["linearBuckets"])
	r.ExponentialBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, m["exponentialBuckets"])
	r.ExplicitBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, m["explicitBuckets"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Offset; !dcl.IsEmptyValueIndirect(v) {
		m["offset"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.Width = dcl.FlattenDouble(m["width"])
	r.Offset = dcl.FlattenDouble(m["offset"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.GrowthFactor; !dcl.IsEmptyValueIndirect(v) {
		m["growthFactor"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.GrowthFactor = dcl.FlattenDouble(m["growthFactor"])
	r.Scale = dcl.FlattenDouble(m["scale"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Bounds; !dcl.IsEmptyValueIndirect(v) {
		m["bounds"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	r.Bounds = dcl.FlattenFloatSlice(m["bounds"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.MinimumValue; !dcl.IsEmptyValueIndirect(v) {
		m["minimumValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationReduceMakeDistributionParamsExemplarSampling{}
	r.MinimumValue = dcl.FlattenDouble(m["minimumValue"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.AlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["alignmentPeriod"] = v
	}
	if v := f.PerSeriesAligner; !dcl.IsEmptyValueIndirect(v) {
		m["perSeriesAligner"] = v
	}
	if v := f.CrossSeriesReducer; !dcl.IsEmptyValueIndirect(v) {
		m["crossSeriesReducer"] = v
	}
	if v := f.GroupByFields; !dcl.IsEmptyValueIndirect(v) {
		m["groupByFields"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, f.ReduceFractionLessThanParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceFractionLessThanParams into reduceFractionLessThanParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceFractionLessThanParams"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, f.ReduceMakeDistributionParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceMakeDistributionParams into reduceMakeDistributionParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceMakeDistributionParams"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation{}
	r.AlignmentPeriod = dcl.FlattenString(m["alignmentPeriod"])
	r.PerSeriesAligner = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum(m["perSeriesAligner"])
	r.CrossSeriesReducer = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum(m["crossSeriesReducer"])
	r.GroupByFields = dcl.FlattenStringSlice(m["groupByFields"])
	r.ReduceFractionLessThanParams = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, m["reduceFractionLessThanParams"])
	r.ReduceMakeDistributionParams = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, m["reduceMakeDistributionParams"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Threshold; !dcl.IsEmptyValueIndirect(v) {
		m["threshold"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceFractionLessThanParams{}
	r.Threshold = dcl.FlattenDouble(m["threshold"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, f.BucketOptions); err != nil {
		return nil, fmt.Errorf("error expanding BucketOptions into bucketOptions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["bucketOptions"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, f.ExemplarSampling); err != nil {
		return nil, fmt.Errorf("error expanding ExemplarSampling into exemplarSampling: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exemplarSampling"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParams{}
	r.BucketOptions = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, m["bucketOptions"])
	r.ExemplarSampling = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, m["exemplarSampling"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, f.LinearBuckets); err != nil {
		return nil, fmt.Errorf("error expanding LinearBuckets into linearBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["linearBuckets"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, f.ExponentialBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExponentialBuckets into exponentialBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exponentialBuckets"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, f.ExplicitBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExplicitBuckets into explicitBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["explicitBuckets"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	r.LinearBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, m["linearBuckets"])
	r.ExponentialBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, m["exponentialBuckets"])
	r.ExplicitBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, m["explicitBuckets"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Offset; !dcl.IsEmptyValueIndirect(v) {
		m["offset"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.Width = dcl.FlattenDouble(m["width"])
	r.Offset = dcl.FlattenDouble(m["offset"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.GrowthFactor; !dcl.IsEmptyValueIndirect(v) {
		m["growthFactor"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.GrowthFactor = dcl.FlattenDouble(m["growthFactor"])
	r.Scale = dcl.FlattenDouble(m["scale"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Bounds; !dcl.IsEmptyValueIndirect(v) {
		m["bounds"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	r.Bounds = dcl.FlattenFloatSlice(m["bounds"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.MinimumValue; !dcl.IsEmptyValueIndirect(v) {
		m["minimumValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	r.MinimumValue = dcl.FlattenDouble(m["minimumValue"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.RankingMethod; !dcl.IsEmptyValueIndirect(v) {
		m["rankingMethod"] = v
	}
	if v := f.NumTimeSeries; !dcl.IsEmptyValueIndirect(v) {
		m["numTimeSeries"] = v
	}
	if v := f.Direction; !dcl.IsEmptyValueIndirect(v) {
		m["direction"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter{}
	r.RankingMethod = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum(m["rankingMethod"])
	r.NumTimeSeries = dcl.FlattenInteger(m["numTimeSeries"])
	r.Direction = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum(m["direction"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, f.Numerator); err != nil {
		return nil, fmt.Errorf("error expanding Numerator into numerator: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["numerator"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, f.Denominator); err != nil {
		return nil, fmt.Errorf("error expanding Denominator into denominator: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["denominator"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, f.SecondaryAggregation); err != nil {
		return nil, fmt.Errorf("error expanding SecondaryAggregation into secondaryAggregation: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["secondaryAggregation"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, f.PickTimeSeriesFilter); err != nil {
		return nil, fmt.Errorf("error expanding PickTimeSeriesFilter into pickTimeSeriesFilter: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["pickTimeSeriesFilter"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio{}
	r.Numerator = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, m["numerator"])
	r.Denominator = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, m["denominator"])
	r.SecondaryAggregation = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, m["secondaryAggregation"])
	r.PickTimeSeriesFilter = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, m["pickTimeSeriesFilter"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Filter; !dcl.IsEmptyValueIndirect(v) {
		m["filter"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, f.Aggregation); err != nil {
		return nil, fmt.Errorf("error expanding Aggregation into aggregation: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["aggregation"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator{}
	r.Filter = dcl.FlattenString(m["filter"])
	r.Aggregation = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, m["aggregation"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.AlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["alignmentPeriod"] = v
	}
	if v := f.PerSeriesAligner; !dcl.IsEmptyValueIndirect(v) {
		m["perSeriesAligner"] = v
	}
	if v := f.CrossSeriesReducer; !dcl.IsEmptyValueIndirect(v) {
		m["crossSeriesReducer"] = v
	}
	if v := f.GroupByFields; !dcl.IsEmptyValueIndirect(v) {
		m["groupByFields"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, f.ReduceFractionLessThanParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceFractionLessThanParams into reduceFractionLessThanParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceFractionLessThanParams"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, f.ReduceMakeDistributionParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceMakeDistributionParams into reduceMakeDistributionParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceMakeDistributionParams"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation{}
	r.AlignmentPeriod = dcl.FlattenString(m["alignmentPeriod"])
	r.PerSeriesAligner = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum(m["perSeriesAligner"])
	r.CrossSeriesReducer = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum(m["crossSeriesReducer"])
	r.GroupByFields = dcl.FlattenStringSlice(m["groupByFields"])
	r.ReduceFractionLessThanParams = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, m["reduceFractionLessThanParams"])
	r.ReduceMakeDistributionParams = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, m["reduceMakeDistributionParams"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParamsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Threshold; !dcl.IsEmptyValueIndirect(v) {
		m["threshold"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceFractionLessThanParams{}
	r.Threshold = dcl.FlattenDouble(m["threshold"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, f.BucketOptions); err != nil {
		return nil, fmt.Errorf("error expanding BucketOptions into bucketOptions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["bucketOptions"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, f.ExemplarSampling); err != nil {
		return nil, fmt.Errorf("error expanding ExemplarSampling into exemplarSampling: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exemplarSampling"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParams{}
	r.BucketOptions = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, m["bucketOptions"])
	r.ExemplarSampling = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, m["exemplarSampling"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, f.LinearBuckets); err != nil {
		return nil, fmt.Errorf("error expanding LinearBuckets into linearBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["linearBuckets"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, f.ExponentialBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExponentialBuckets into exponentialBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exponentialBuckets"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, f.ExplicitBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExplicitBuckets into explicitBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["explicitBuckets"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptions{}
	r.LinearBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, m["linearBuckets"])
	r.ExponentialBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, m["exponentialBuckets"])
	r.ExplicitBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, m["explicitBuckets"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Offset; !dcl.IsEmptyValueIndirect(v) {
		m["offset"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.Width = dcl.FlattenDouble(m["width"])
	r.Offset = dcl.FlattenDouble(m["offset"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.GrowthFactor; !dcl.IsEmptyValueIndirect(v) {
		m["growthFactor"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.GrowthFactor = dcl.FlattenDouble(m["growthFactor"])
	r.Scale = dcl.FlattenDouble(m["scale"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Bounds; !dcl.IsEmptyValueIndirect(v) {
		m["bounds"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	r.Bounds = dcl.FlattenFloatSlice(m["bounds"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.MinimumValue; !dcl.IsEmptyValueIndirect(v) {
		m["minimumValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationReduceMakeDistributionParamsExemplarSampling{}
	r.MinimumValue = dcl.FlattenDouble(m["minimumValue"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Filter; !dcl.IsEmptyValueIndirect(v) {
		m["filter"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, f.Aggregation); err != nil {
		return nil, fmt.Errorf("error expanding Aggregation into aggregation: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["aggregation"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator{}
	r.Filter = dcl.FlattenString(m["filter"])
	r.Aggregation = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, m["aggregation"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.AlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["alignmentPeriod"] = v
	}
	if v := f.PerSeriesAligner; !dcl.IsEmptyValueIndirect(v) {
		m["perSeriesAligner"] = v
	}
	if v := f.CrossSeriesReducer; !dcl.IsEmptyValueIndirect(v) {
		m["crossSeriesReducer"] = v
	}
	if v := f.GroupByFields; !dcl.IsEmptyValueIndirect(v) {
		m["groupByFields"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, f.ReduceFractionLessThanParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceFractionLessThanParams into reduceFractionLessThanParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceFractionLessThanParams"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, f.ReduceMakeDistributionParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceMakeDistributionParams into reduceMakeDistributionParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceMakeDistributionParams"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation{}
	r.AlignmentPeriod = dcl.FlattenString(m["alignmentPeriod"])
	r.PerSeriesAligner = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum(m["perSeriesAligner"])
	r.CrossSeriesReducer = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum(m["crossSeriesReducer"])
	r.GroupByFields = dcl.FlattenStringSlice(m["groupByFields"])
	r.ReduceFractionLessThanParams = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, m["reduceFractionLessThanParams"])
	r.ReduceMakeDistributionParams = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, m["reduceMakeDistributionParams"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParamsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Threshold; !dcl.IsEmptyValueIndirect(v) {
		m["threshold"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceFractionLessThanParams{}
	r.Threshold = dcl.FlattenDouble(m["threshold"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, f.BucketOptions); err != nil {
		return nil, fmt.Errorf("error expanding BucketOptions into bucketOptions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["bucketOptions"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, f.ExemplarSampling); err != nil {
		return nil, fmt.Errorf("error expanding ExemplarSampling into exemplarSampling: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exemplarSampling"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParams{}
	r.BucketOptions = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, m["bucketOptions"])
	r.ExemplarSampling = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, m["exemplarSampling"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, f.LinearBuckets); err != nil {
		return nil, fmt.Errorf("error expanding LinearBuckets into linearBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["linearBuckets"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, f.ExponentialBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExponentialBuckets into exponentialBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exponentialBuckets"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, f.ExplicitBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExplicitBuckets into explicitBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["explicitBuckets"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptions{}
	r.LinearBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, m["linearBuckets"])
	r.ExponentialBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, m["exponentialBuckets"])
	r.ExplicitBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, m["explicitBuckets"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Offset; !dcl.IsEmptyValueIndirect(v) {
		m["offset"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.Width = dcl.FlattenDouble(m["width"])
	r.Offset = dcl.FlattenDouble(m["offset"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.GrowthFactor; !dcl.IsEmptyValueIndirect(v) {
		m["growthFactor"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.GrowthFactor = dcl.FlattenDouble(m["growthFactor"])
	r.Scale = dcl.FlattenDouble(m["scale"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Bounds; !dcl.IsEmptyValueIndirect(v) {
		m["bounds"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	r.Bounds = dcl.FlattenFloatSlice(m["bounds"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.MinimumValue; !dcl.IsEmptyValueIndirect(v) {
		m["minimumValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationReduceMakeDistributionParamsExemplarSampling{}
	r.MinimumValue = dcl.FlattenDouble(m["minimumValue"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.AlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["alignmentPeriod"] = v
	}
	if v := f.PerSeriesAligner; !dcl.IsEmptyValueIndirect(v) {
		m["perSeriesAligner"] = v
	}
	if v := f.CrossSeriesReducer; !dcl.IsEmptyValueIndirect(v) {
		m["crossSeriesReducer"] = v
	}
	if v := f.GroupByFields; !dcl.IsEmptyValueIndirect(v) {
		m["groupByFields"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, f.ReduceFractionLessThanParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceFractionLessThanParams into reduceFractionLessThanParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceFractionLessThanParams"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, f.ReduceMakeDistributionParams); err != nil {
		return nil, fmt.Errorf("error expanding ReduceMakeDistributionParams into reduceMakeDistributionParams: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["reduceMakeDistributionParams"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation{}
	r.AlignmentPeriod = dcl.FlattenString(m["alignmentPeriod"])
	r.PerSeriesAligner = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum(m["perSeriesAligner"])
	r.CrossSeriesReducer = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum(m["crossSeriesReducer"])
	r.GroupByFields = dcl.FlattenStringSlice(m["groupByFields"])
	r.ReduceFractionLessThanParams = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, m["reduceFractionLessThanParams"])
	r.ReduceMakeDistributionParams = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, m["reduceMakeDistributionParams"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParamsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Threshold; !dcl.IsEmptyValueIndirect(v) {
		m["threshold"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceFractionLessThanParams{}
	r.Threshold = dcl.FlattenDouble(m["threshold"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, f.BucketOptions); err != nil {
		return nil, fmt.Errorf("error expanding BucketOptions into bucketOptions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["bucketOptions"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, f.ExemplarSampling); err != nil {
		return nil, fmt.Errorf("error expanding ExemplarSampling into exemplarSampling: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exemplarSampling"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParams{}
	r.BucketOptions = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, m["bucketOptions"])
	r.ExemplarSampling = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, m["exemplarSampling"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, f.LinearBuckets); err != nil {
		return nil, fmt.Errorf("error expanding LinearBuckets into linearBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["linearBuckets"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, f.ExponentialBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExponentialBuckets into exponentialBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["exponentialBuckets"] = v
	}
	if v, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, f.ExplicitBuckets); err != nil {
		return nil, fmt.Errorf("error expanding ExplicitBuckets into explicitBuckets: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["explicitBuckets"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptions{}
	r.LinearBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, m["linearBuckets"])
	r.ExponentialBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, m["exponentialBuckets"])
	r.ExplicitBuckets = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, m["explicitBuckets"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Offset; !dcl.IsEmptyValueIndirect(v) {
		m["offset"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsLinearBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.Width = dcl.FlattenDouble(m["width"])
	r.Offset = dcl.FlattenDouble(m["offset"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.NumFiniteBuckets; !dcl.IsEmptyValueIndirect(v) {
		m["numFiniteBuckets"] = v
	}
	if v := f.GrowthFactor; !dcl.IsEmptyValueIndirect(v) {
		m["growthFactor"] = v
	}
	if v := f.Scale; !dcl.IsEmptyValueIndirect(v) {
		m["scale"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExponentialBuckets{}
	r.NumFiniteBuckets = dcl.FlattenInteger(m["numFiniteBuckets"])
	r.GrowthFactor = dcl.FlattenDouble(m["growthFactor"])
	r.Scale = dcl.FlattenDouble(m["scale"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBucketsSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Bounds; !dcl.IsEmptyValueIndirect(v) {
		m["bounds"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsBucketOptionsExplicitBuckets{}
	r.Bounds = dcl.FlattenFloatSlice(m["bounds"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSamplingSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.MinimumValue; !dcl.IsEmptyValueIndirect(v) {
		m["minimumValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationReduceMakeDistributionParamsExemplarSampling{}
	r.MinimumValue = dcl.FlattenDouble(m["minimumValue"])

	return r
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterMap expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterMap(c *Client, f map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice expands the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice(c *Client, f []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterMap flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter{}
	}

	items := make(map[string]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter expands an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter into a JSON
// request object.
func expandDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c *Client, f *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.RankingMethod; !dcl.IsEmptyValueIndirect(v) {
		m["rankingMethod"] = v
	}
	if v := f.NumTimeSeries; !dcl.IsEmptyValueIndirect(v) {
		m["numTimeSeries"] = v
	}
	if v := f.Direction; !dcl.IsEmptyValueIndirect(v) {
		m["direction"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter flattens an instance of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter(c *Client, i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter{}
	r.RankingMethod = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum(m["rankingMethod"])
	r.NumTimeSeries = dcl.FlattenInteger(m["numTimeSeries"])
	r.Direction = flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum(m["direction"])

	return r
}

// expandDashboardWidgetScorecardSourceDrilldownMap expands the contents of DashboardWidgetScorecardSourceDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMap(c *Client, f map[string]DashboardWidgetScorecardSourceDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSourceDrilldownSlice expands the contents of DashboardWidgetScorecardSourceDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownSlice(c *Client, f []DashboardWidgetScorecardSourceDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownMap flattens the contents of DashboardWidgetScorecardSourceDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSourceDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSourceDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSourceDrilldown{}
	}

	items := make(map[string]DashboardWidgetScorecardSourceDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSourceDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownSlice flattens the contents of DashboardWidgetScorecardSourceDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldown{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSourceDrilldown expands an instance of DashboardWidgetScorecardSourceDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldown(c *Client, f *DashboardWidgetScorecardSourceDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, f.ResourceTypeDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding ResourceTypeDrilldown into resourceTypeDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["resourceTypeDrilldown"] = v
	}
	if v, err := expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsSlice(c, f.ResourceLabelDrilldowns); err != nil {
		return nil, fmt.Errorf("error expanding ResourceLabelDrilldowns into resourceLabelDrilldowns: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["resourceLabelDrilldowns"] = v
	}
	if v, err := expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsSlice(c, f.MetadataSystemLabelDrilldowns); err != nil {
		return nil, fmt.Errorf("error expanding MetadataSystemLabelDrilldowns into metadataSystemLabelDrilldowns: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metadataSystemLabelDrilldowns"] = v
	}
	if v, err := expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsSlice(c, f.MetadataUserLabelDrilldowns); err != nil {
		return nil, fmt.Errorf("error expanding MetadataUserLabelDrilldowns into metadataUserLabelDrilldowns: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metadataUserLabelDrilldowns"] = v
	}
	if v, err := expandDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, f.GroupNameDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding GroupNameDrilldown into groupNameDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["groupNameDrilldown"] = v
	}
	if v, err := expandDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, f.ServiceNameDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding ServiceNameDrilldown into serviceNameDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["serviceNameDrilldown"] = v
	}
	if v, err := expandDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, f.ServiceTypeDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding ServiceTypeDrilldown into serviceTypeDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["serviceTypeDrilldown"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSourceDrilldown flattens an instance of DashboardWidgetScorecardSourceDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldown(c *Client, i interface{}) *DashboardWidgetScorecardSourceDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSourceDrilldown{}
	r.ResourceTypeDrilldown = flattenDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, m["resourceTypeDrilldown"])
	r.ResourceLabelDrilldowns = flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsSlice(c, m["resourceLabelDrilldowns"])
	r.MetadataSystemLabelDrilldowns = flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsSlice(c, m["metadataSystemLabelDrilldowns"])
	r.MetadataUserLabelDrilldowns = flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsSlice(c, m["metadataUserLabelDrilldowns"])
	r.GroupNameDrilldown = flattenDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, m["groupNameDrilldown"])
	r.ServiceNameDrilldown = flattenDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, m["serviceNameDrilldown"])
	r.ServiceTypeDrilldown = flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, m["serviceTypeDrilldown"])

	return r
}

// expandDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownMap expands the contents of DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownMap(c *Client, f map[string]DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownSlice expands the contents of DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownSlice(c *Client, f []DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownMap flattens the contents of DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown{}
	}

	items := make(map[string]DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldownSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown expands an instance of DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c *Client, f *DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValues; !dcl.IsEmptyValueIndirect(v) {
		m["targetValues"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown flattens an instance of DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown(c *Client, i interface{}) *DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSourceDrilldownResourceTypeDrilldown{}
	r.TargetValues = dcl.FlattenStringSlice(m["targetValues"])

	return r
}

// expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsMap expands the contents of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsMap(c *Client, f map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsSlice expands the contents of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsSlice(c *Client, f []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsMap flattens the contents of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns{}
	}

	items := make(map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns expands an instance of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c *Client, f *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.LogicalOperator; !dcl.IsEmptyValueIndirect(v) {
		m["logicalOperator"] = v
	}
	if v, err := expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c, f.ValueRestrictions); err != nil {
		return nil, fmt.Errorf("error expanding ValueRestrictions into valueRestrictions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["valueRestrictions"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns flattens an instance of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns(c *Client, i interface{}) *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldowns{}
	r.Label = dcl.FlattenString(m["label"])
	r.LogicalOperator = flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum(m["logicalOperator"])
	r.ValueRestrictions = flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c, m["valueRestrictions"])

	return r
}

// expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsMap expands the contents of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsMap(c *Client, f map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice expands the contents of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c *Client, f []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsMap flattens the contents of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions{}
	}

	items := make(map[string]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions expands an instance of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c *Client, f *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValue; !dcl.IsEmptyValueIndirect(v) {
		m["targetValue"] = v
	}
	if v := f.Comparator; !dcl.IsEmptyValueIndirect(v) {
		m["comparator"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions flattens an instance of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions(c *Client, i interface{}) *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictions{}
	r.TargetValue = dcl.FlattenString(m["targetValue"])
	r.Comparator = flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum(m["comparator"])

	return r
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsMap expands the contents of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsMap(c *Client, f map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsSlice expands the contents of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsSlice(c *Client, f []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsMap flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns{}
	}

	items := make(map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns expands an instance of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c *Client, f *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.LogicalOperator; !dcl.IsEmptyValueIndirect(v) {
		m["logicalOperator"] = v
	}
	if v, err := expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c, f.ValueRestrictions); err != nil {
		return nil, fmt.Errorf("error expanding ValueRestrictions into valueRestrictions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["valueRestrictions"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns flattens an instance of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns(c *Client, i interface{}) *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldowns{}
	r.Label = dcl.FlattenString(m["label"])
	r.LogicalOperator = flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum(m["logicalOperator"])
	r.ValueRestrictions = flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c, m["valueRestrictions"])

	return r
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsMap expands the contents of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsMap(c *Client, f map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice expands the contents of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c *Client, f []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsMap flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions{}
	}

	items := make(map[string]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions expands an instance of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c *Client, f *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValue; !dcl.IsEmptyValueIndirect(v) {
		m["targetValue"] = v
	}
	if v := f.Comparator; !dcl.IsEmptyValueIndirect(v) {
		m["comparator"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions flattens an instance of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions(c *Client, i interface{}) *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictions{}
	r.TargetValue = dcl.FlattenString(m["targetValue"])
	r.Comparator = flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum(m["comparator"])

	return r
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsMap expands the contents of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsMap(c *Client, f map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsSlice expands the contents of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsSlice(c *Client, f []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsMap flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns{}
	}

	items := make(map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns expands an instance of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c *Client, f *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.LogicalOperator; !dcl.IsEmptyValueIndirect(v) {
		m["logicalOperator"] = v
	}
	if v, err := expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c, f.ValueRestrictions); err != nil {
		return nil, fmt.Errorf("error expanding ValueRestrictions into valueRestrictions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["valueRestrictions"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns flattens an instance of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns(c *Client, i interface{}) *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldowns{}
	r.Label = dcl.FlattenString(m["label"])
	r.LogicalOperator = flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum(m["logicalOperator"])
	r.ValueRestrictions = flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c, m["valueRestrictions"])

	return r
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsMap expands the contents of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsMap(c *Client, f map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice expands the contents of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c *Client, f []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsMap flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions{}
	}

	items := make(map[string]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions expands an instance of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c *Client, f *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValue; !dcl.IsEmptyValueIndirect(v) {
		m["targetValue"] = v
	}
	if v := f.Comparator; !dcl.IsEmptyValueIndirect(v) {
		m["comparator"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions flattens an instance of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions(c *Client, i interface{}) *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictions{}
	r.TargetValue = dcl.FlattenString(m["targetValue"])
	r.Comparator = flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum(m["comparator"])

	return r
}

// expandDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownMap expands the contents of DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownMap(c *Client, f map[string]DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownSlice expands the contents of DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownSlice(c *Client, f []DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownMap flattens the contents of DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown{}
	}

	items := make(map[string]DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownGroupNameDrilldownSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown expands an instance of DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c *Client, f *DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValues; !dcl.IsEmptyValueIndirect(v) {
		m["targetValues"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown flattens an instance of DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownGroupNameDrilldown(c *Client, i interface{}) *DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSourceDrilldownGroupNameDrilldown{}
	r.TargetValues = dcl.FlattenStringSlice(m["targetValues"])

	return r
}

// expandDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownMap expands the contents of DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownMap(c *Client, f map[string]DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownSlice expands the contents of DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownSlice(c *Client, f []DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownMap flattens the contents of DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown{}
	}

	items := make(map[string]DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownServiceNameDrilldownSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown expands an instance of DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c *Client, f *DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValues; !dcl.IsEmptyValueIndirect(v) {
		m["targetValues"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown flattens an instance of DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownServiceNameDrilldown(c *Client, i interface{}) *DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSourceDrilldownServiceNameDrilldown{}
	r.TargetValues = dcl.FlattenStringSlice(m["targetValues"])

	return r
}

// expandDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownMap expands the contents of DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownMap(c *Client, f map[string]DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownSlice expands the contents of DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownSlice(c *Client, f []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownMap flattens the contents of DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown{}
	}

	items := make(map[string]DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown expands an instance of DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c *Client, f *DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Types; !dcl.IsEmptyValueIndirect(v) {
		m["types"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown flattens an instance of DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown(c *Client, i interface{}) *DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldown{}
	r.Types = flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnumSlice(c, m["types"])

	return r
}

// expandDashboardWidgetScorecardMetricDrilldownMap expands the contents of DashboardWidgetScorecardMetricDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMap(c *Client, f map[string]DashboardWidgetScorecardMetricDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardMetricDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardMetricDrilldownSlice expands the contents of DashboardWidgetScorecardMetricDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownSlice(c *Client, f []DashboardWidgetScorecardMetricDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardMetricDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardMetricDrilldownMap flattens the contents of DashboardWidgetScorecardMetricDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardMetricDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardMetricDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardMetricDrilldown{}
	}

	items := make(map[string]DashboardWidgetScorecardMetricDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardMetricDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardMetricDrilldownSlice flattens the contents of DashboardWidgetScorecardMetricDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownSlice(c *Client, i interface{}) []DashboardWidgetScorecardMetricDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardMetricDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardMetricDrilldown{}
	}

	items := make([]DashboardWidgetScorecardMetricDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardMetricDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardMetricDrilldown expands an instance of DashboardWidgetScorecardMetricDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldown(c *Client, f *DashboardWidgetScorecardMetricDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, f.MetricTypeDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding MetricTypeDrilldown into metricTypeDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metricTypeDrilldown"] = v
	}
	if v, err := expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsSlice(c, f.MetricLabelDrilldowns); err != nil {
		return nil, fmt.Errorf("error expanding MetricLabelDrilldowns into metricLabelDrilldowns: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metricLabelDrilldowns"] = v
	}
	if v, err := expandDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, f.MetricGroupByDrilldown); err != nil {
		return nil, fmt.Errorf("error expanding MetricGroupByDrilldown into metricGroupByDrilldown: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["metricGroupByDrilldown"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardMetricDrilldown flattens an instance of DashboardWidgetScorecardMetricDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldown(c *Client, i interface{}) *DashboardWidgetScorecardMetricDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardMetricDrilldown{}
	r.MetricTypeDrilldown = flattenDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, m["metricTypeDrilldown"])
	r.MetricLabelDrilldowns = flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsSlice(c, m["metricLabelDrilldowns"])
	r.MetricGroupByDrilldown = flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, m["metricGroupByDrilldown"])

	return r
}

// expandDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownMap expands the contents of DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownMap(c *Client, f map[string]DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownSlice expands the contents of DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownSlice(c *Client, f []DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownMap flattens the contents of DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown{}
	}

	items := make(map[string]DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownSlice flattens the contents of DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldownSlice(c *Client, i interface{}) []DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown{}
	}

	items := make([]DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown expands an instance of DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c *Client, f *DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValue; !dcl.IsEmptyValueIndirect(v) {
		m["targetValue"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown flattens an instance of DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown(c *Client, i interface{}) *DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardMetricDrilldownMetricTypeDrilldown{}
	r.TargetValue = dcl.FlattenString(m["targetValue"])

	return r
}

// expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsMap expands the contents of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsMap(c *Client, f map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsSlice expands the contents of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsSlice(c *Client, f []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsMap flattens the contents of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns{}
	}

	items := make(map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsSlice flattens the contents of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsSlice(c *Client, i interface{}) []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns{}
	}

	items := make([]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns expands an instance of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c *Client, f *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.LogicalOperator; !dcl.IsEmptyValueIndirect(v) {
		m["logicalOperator"] = v
	}
	if v, err := expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c, f.ValueRestrictions); err != nil {
		return nil, fmt.Errorf("error expanding ValueRestrictions into valueRestrictions: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["valueRestrictions"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns flattens an instance of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns(c *Client, i interface{}) *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldowns{}
	r.Label = dcl.FlattenString(m["label"])
	r.LogicalOperator = flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum(m["logicalOperator"])
	r.ValueRestrictions = flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c, m["valueRestrictions"])

	return r
}

// expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsMap expands the contents of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsMap(c *Client, f map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice expands the contents of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c *Client, f []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsMap flattens the contents of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions{}
	}

	items := make(map[string]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice flattens the contents of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsSlice(c *Client, i interface{}) []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions{}
	}

	items := make([]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions expands an instance of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c *Client, f *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.TargetValue; !dcl.IsEmptyValueIndirect(v) {
		m["targetValue"] = v
	}
	if v := f.Comparator; !dcl.IsEmptyValueIndirect(v) {
		m["comparator"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions flattens an instance of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions(c *Client, i interface{}) *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictions{}
	r.TargetValue = dcl.FlattenString(m["targetValue"])
	r.Comparator = flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum(m["comparator"])

	return r
}

// expandDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownMap expands the contents of DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownMap(c *Client, f map[string]DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownSlice expands the contents of DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownSlice(c *Client, f []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownMap flattens the contents of DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown{}
	}

	items := make(map[string]DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownSlice flattens the contents of DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownSlice(c *Client, i interface{}) []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown{}
	}

	items := make([]DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown expands an instance of DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown into a JSON
// request object.
func expandDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c *Client, f *DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.ResourceLabels; !dcl.IsEmptyValueIndirect(v) {
		m["resourceLabels"] = v
	}
	if v := f.MetricLabels; !dcl.IsEmptyValueIndirect(v) {
		m["metricLabels"] = v
	}
	if v := f.MetadataSystemLabels; !dcl.IsEmptyValueIndirect(v) {
		m["metadataSystemLabels"] = v
	}
	if v := f.MetadataUserLabels; !dcl.IsEmptyValueIndirect(v) {
		m["metadataUserLabels"] = v
	}
	if v := f.Reducer; !dcl.IsEmptyValueIndirect(v) {
		m["reducer"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown flattens an instance of DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown(c *Client, i interface{}) *DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldown{}
	r.ResourceLabels = dcl.FlattenStringSlice(m["resourceLabels"])
	r.MetricLabels = dcl.FlattenStringSlice(m["metricLabels"])
	r.MetadataSystemLabels = dcl.FlattenStringSlice(m["metadataSystemLabels"])
	r.MetadataUserLabels = dcl.FlattenStringSlice(m["metadataUserLabels"])
	r.Reducer = flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum(m["reducer"])

	return r
}

// expandDashboardWidgetScorecardGaugeViewMap expands the contents of DashboardWidgetScorecardGaugeView into a JSON
// request object.
func expandDashboardWidgetScorecardGaugeViewMap(c *Client, f map[string]DashboardWidgetScorecardGaugeView) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardGaugeView(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardGaugeViewSlice expands the contents of DashboardWidgetScorecardGaugeView into a JSON
// request object.
func expandDashboardWidgetScorecardGaugeViewSlice(c *Client, f []DashboardWidgetScorecardGaugeView) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardGaugeView(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardGaugeViewMap flattens the contents of DashboardWidgetScorecardGaugeView from a JSON
// response object.
func flattenDashboardWidgetScorecardGaugeViewMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardGaugeView {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardGaugeView{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardGaugeView{}
	}

	items := make(map[string]DashboardWidgetScorecardGaugeView)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardGaugeView(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardGaugeViewSlice flattens the contents of DashboardWidgetScorecardGaugeView from a JSON
// response object.
func flattenDashboardWidgetScorecardGaugeViewSlice(c *Client, i interface{}) []DashboardWidgetScorecardGaugeView {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardGaugeView{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardGaugeView{}
	}

	items := make([]DashboardWidgetScorecardGaugeView, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardGaugeView(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardGaugeView expands an instance of DashboardWidgetScorecardGaugeView into a JSON
// request object.
func expandDashboardWidgetScorecardGaugeView(c *Client, f *DashboardWidgetScorecardGaugeView) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.LowerBound; !dcl.IsEmptyValueIndirect(v) {
		m["lowerBound"] = v
	}
	if v := f.UpperBound; !dcl.IsEmptyValueIndirect(v) {
		m["upperBound"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardGaugeView flattens an instance of DashboardWidgetScorecardGaugeView from a JSON
// response object.
func flattenDashboardWidgetScorecardGaugeView(c *Client, i interface{}) *DashboardWidgetScorecardGaugeView {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardGaugeView{}
	r.LowerBound = dcl.FlattenDouble(m["lowerBound"])
	r.UpperBound = dcl.FlattenDouble(m["upperBound"])

	return r
}

// expandDashboardWidgetScorecardSparkChartViewMap expands the contents of DashboardWidgetScorecardSparkChartView into a JSON
// request object.
func expandDashboardWidgetScorecardSparkChartViewMap(c *Client, f map[string]DashboardWidgetScorecardSparkChartView) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardSparkChartView(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardSparkChartViewSlice expands the contents of DashboardWidgetScorecardSparkChartView into a JSON
// request object.
func expandDashboardWidgetScorecardSparkChartViewSlice(c *Client, f []DashboardWidgetScorecardSparkChartView) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardSparkChartView(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardSparkChartViewMap flattens the contents of DashboardWidgetScorecardSparkChartView from a JSON
// response object.
func flattenDashboardWidgetScorecardSparkChartViewMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardSparkChartView {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardSparkChartView{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardSparkChartView{}
	}

	items := make(map[string]DashboardWidgetScorecardSparkChartView)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardSparkChartView(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardSparkChartViewSlice flattens the contents of DashboardWidgetScorecardSparkChartView from a JSON
// response object.
func flattenDashboardWidgetScorecardSparkChartViewSlice(c *Client, i interface{}) []DashboardWidgetScorecardSparkChartView {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSparkChartView{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSparkChartView{}
	}

	items := make([]DashboardWidgetScorecardSparkChartView, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSparkChartView(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardSparkChartView expands an instance of DashboardWidgetScorecardSparkChartView into a JSON
// request object.
func expandDashboardWidgetScorecardSparkChartView(c *Client, f *DashboardWidgetScorecardSparkChartView) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.SparkChartType; !dcl.IsEmptyValueIndirect(v) {
		m["sparkChartType"] = v
	}
	if v := f.MinAlignmentPeriod; !dcl.IsEmptyValueIndirect(v) {
		m["minAlignmentPeriod"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardSparkChartView flattens an instance of DashboardWidgetScorecardSparkChartView from a JSON
// response object.
func flattenDashboardWidgetScorecardSparkChartView(c *Client, i interface{}) *DashboardWidgetScorecardSparkChartView {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardSparkChartView{}
	r.SparkChartType = flattenDashboardWidgetScorecardSparkChartViewSparkChartTypeEnum(m["sparkChartType"])
	r.MinAlignmentPeriod = dcl.FlattenString(m["minAlignmentPeriod"])

	return r
}

// expandDashboardWidgetScorecardThresholdsMap expands the contents of DashboardWidgetScorecardThresholds into a JSON
// request object.
func expandDashboardWidgetScorecardThresholdsMap(c *Client, f map[string]DashboardWidgetScorecardThresholds) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetScorecardThresholds(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetScorecardThresholdsSlice expands the contents of DashboardWidgetScorecardThresholds into a JSON
// request object.
func expandDashboardWidgetScorecardThresholdsSlice(c *Client, f []DashboardWidgetScorecardThresholds) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetScorecardThresholds(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetScorecardThresholdsMap flattens the contents of DashboardWidgetScorecardThresholds from a JSON
// response object.
func flattenDashboardWidgetScorecardThresholdsMap(c *Client, i interface{}) map[string]DashboardWidgetScorecardThresholds {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetScorecardThresholds{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetScorecardThresholds{}
	}

	items := make(map[string]DashboardWidgetScorecardThresholds)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetScorecardThresholds(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetScorecardThresholdsSlice flattens the contents of DashboardWidgetScorecardThresholds from a JSON
// response object.
func flattenDashboardWidgetScorecardThresholdsSlice(c *Client, i interface{}) []DashboardWidgetScorecardThresholds {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardThresholds{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardThresholds{}
	}

	items := make([]DashboardWidgetScorecardThresholds, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardThresholds(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetScorecardThresholds expands an instance of DashboardWidgetScorecardThresholds into a JSON
// request object.
func expandDashboardWidgetScorecardThresholds(c *Client, f *DashboardWidgetScorecardThresholds) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.Value; !dcl.IsEmptyValueIndirect(v) {
		m["value"] = v
	}
	if v := f.Color; !dcl.IsEmptyValueIndirect(v) {
		m["color"] = v
	}
	if v := f.Direction; !dcl.IsEmptyValueIndirect(v) {
		m["direction"] = v
	}

	return m, nil
}

// flattenDashboardWidgetScorecardThresholds flattens an instance of DashboardWidgetScorecardThresholds from a JSON
// response object.
func flattenDashboardWidgetScorecardThresholds(c *Client, i interface{}) *DashboardWidgetScorecardThresholds {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetScorecardThresholds{}
	r.Label = dcl.FlattenString(m["label"])
	r.Value = dcl.FlattenDouble(m["value"])
	r.Color = flattenDashboardWidgetScorecardThresholdsColorEnum(m["color"])
	r.Direction = flattenDashboardWidgetScorecardThresholdsDirectionEnum(m["direction"])

	return r
}

// expandDashboardWidgetTextMap expands the contents of DashboardWidgetText into a JSON
// request object.
func expandDashboardWidgetTextMap(c *Client, f map[string]DashboardWidgetText) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetText(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetTextSlice expands the contents of DashboardWidgetText into a JSON
// request object.
func expandDashboardWidgetTextSlice(c *Client, f []DashboardWidgetText) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetText(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetTextMap flattens the contents of DashboardWidgetText from a JSON
// response object.
func flattenDashboardWidgetTextMap(c *Client, i interface{}) map[string]DashboardWidgetText {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetText{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetText{}
	}

	items := make(map[string]DashboardWidgetText)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetText(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetTextSlice flattens the contents of DashboardWidgetText from a JSON
// response object.
func flattenDashboardWidgetTextSlice(c *Client, i interface{}) []DashboardWidgetText {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetText{}
	}

	if len(a) == 0 {
		return []DashboardWidgetText{}
	}

	items := make([]DashboardWidgetText, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetText(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetText expands an instance of DashboardWidgetText into a JSON
// request object.
func expandDashboardWidgetText(c *Client, f *DashboardWidgetText) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Content; !dcl.IsEmptyValueIndirect(v) {
		m["content"] = v
	}
	if v := f.Format; !dcl.IsEmptyValueIndirect(v) {
		m["format"] = v
	}

	return m, nil
}

// flattenDashboardWidgetText flattens an instance of DashboardWidgetText from a JSON
// response object.
func flattenDashboardWidgetText(c *Client, i interface{}) *DashboardWidgetText {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardWidgetText{}
	r.Content = dcl.FlattenString(m["content"])
	r.Format = flattenDashboardWidgetTextFormatEnum(m["format"])

	return r
}

// expandDashboardWidgetBlankMap expands the contents of DashboardWidgetBlank into a JSON
// request object.
func expandDashboardWidgetBlankMap(c *Client, f map[string]DashboardWidgetBlank) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardWidgetBlank(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardWidgetBlankSlice expands the contents of DashboardWidgetBlank into a JSON
// request object.
func expandDashboardWidgetBlankSlice(c *Client, f []DashboardWidgetBlank) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardWidgetBlank(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardWidgetBlankMap flattens the contents of DashboardWidgetBlank from a JSON
// response object.
func flattenDashboardWidgetBlankMap(c *Client, i interface{}) map[string]DashboardWidgetBlank {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardWidgetBlank{}
	}

	if len(a) == 0 {
		return map[string]DashboardWidgetBlank{}
	}

	items := make(map[string]DashboardWidgetBlank)
	for k, item := range a {
		items[k] = *flattenDashboardWidgetBlank(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardWidgetBlankSlice flattens the contents of DashboardWidgetBlank from a JSON
// response object.
func flattenDashboardWidgetBlankSlice(c *Client, i interface{}) []DashboardWidgetBlank {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetBlank{}
	}

	if len(a) == 0 {
		return []DashboardWidgetBlank{}
	}

	items := make([]DashboardWidgetBlank, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetBlank(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardWidgetBlank expands an instance of DashboardWidgetBlank into a JSON
// request object.
func expandDashboardWidgetBlank(c *Client, f *DashboardWidgetBlank) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})

	return m, nil
}

// flattenDashboardWidgetBlank flattens an instance of DashboardWidgetBlank from a JSON
// response object.
func flattenDashboardWidgetBlank(c *Client, i interface{}) *DashboardWidgetBlank {

	r := &DashboardWidgetBlank{}

	return r
}

// expandDashboardGridLayoutMap expands the contents of DashboardGridLayout into a JSON
// request object.
func expandDashboardGridLayoutMap(c *Client, f map[string]DashboardGridLayout) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardGridLayout(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardGridLayoutSlice expands the contents of DashboardGridLayout into a JSON
// request object.
func expandDashboardGridLayoutSlice(c *Client, f []DashboardGridLayout) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardGridLayout(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardGridLayoutMap flattens the contents of DashboardGridLayout from a JSON
// response object.
func flattenDashboardGridLayoutMap(c *Client, i interface{}) map[string]DashboardGridLayout {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardGridLayout{}
	}

	if len(a) == 0 {
		return map[string]DashboardGridLayout{}
	}

	items := make(map[string]DashboardGridLayout)
	for k, item := range a {
		items[k] = *flattenDashboardGridLayout(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardGridLayoutSlice flattens the contents of DashboardGridLayout from a JSON
// response object.
func flattenDashboardGridLayoutSlice(c *Client, i interface{}) []DashboardGridLayout {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardGridLayout{}
	}

	if len(a) == 0 {
		return []DashboardGridLayout{}
	}

	items := make([]DashboardGridLayout, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardGridLayout(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardGridLayout expands an instance of DashboardGridLayout into a JSON
// request object.
func expandDashboardGridLayout(c *Client, f *DashboardGridLayout) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Columns; !dcl.IsEmptyValueIndirect(v) {
		m["columns"] = v
	}
	if v := f.Widgets; !dcl.IsEmptyValueIndirect(v) {
		m["widgets"] = v
	}

	return m, nil
}

// flattenDashboardGridLayout flattens an instance of DashboardGridLayout from a JSON
// response object.
func flattenDashboardGridLayout(c *Client, i interface{}) *DashboardGridLayout {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardGridLayout{}
	r.Columns = dcl.FlattenInteger(m["columns"])
	r.Widgets = flattenDashboardWidgetSlice(c, m["widgets"])

	return r
}

// expandDashboardMosaicLayoutMap expands the contents of DashboardMosaicLayout into a JSON
// request object.
func expandDashboardMosaicLayoutMap(c *Client, f map[string]DashboardMosaicLayout) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardMosaicLayout(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardMosaicLayoutSlice expands the contents of DashboardMosaicLayout into a JSON
// request object.
func expandDashboardMosaicLayoutSlice(c *Client, f []DashboardMosaicLayout) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardMosaicLayout(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardMosaicLayoutMap flattens the contents of DashboardMosaicLayout from a JSON
// response object.
func flattenDashboardMosaicLayoutMap(c *Client, i interface{}) map[string]DashboardMosaicLayout {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardMosaicLayout{}
	}

	if len(a) == 0 {
		return map[string]DashboardMosaicLayout{}
	}

	items := make(map[string]DashboardMosaicLayout)
	for k, item := range a {
		items[k] = *flattenDashboardMosaicLayout(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardMosaicLayoutSlice flattens the contents of DashboardMosaicLayout from a JSON
// response object.
func flattenDashboardMosaicLayoutSlice(c *Client, i interface{}) []DashboardMosaicLayout {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardMosaicLayout{}
	}

	if len(a) == 0 {
		return []DashboardMosaicLayout{}
	}

	items := make([]DashboardMosaicLayout, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardMosaicLayout(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardMosaicLayout expands an instance of DashboardMosaicLayout into a JSON
// request object.
func expandDashboardMosaicLayout(c *Client, f *DashboardMosaicLayout) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Columns; !dcl.IsEmptyValueIndirect(v) {
		m["columns"] = v
	}
	if v, err := expandDashboardMosaicLayoutTilesSlice(c, f.Tiles); err != nil {
		return nil, fmt.Errorf("error expanding Tiles into tiles: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["tiles"] = v
	}

	return m, nil
}

// flattenDashboardMosaicLayout flattens an instance of DashboardMosaicLayout from a JSON
// response object.
func flattenDashboardMosaicLayout(c *Client, i interface{}) *DashboardMosaicLayout {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardMosaicLayout{}
	r.Columns = dcl.FlattenInteger(m["columns"])
	r.Tiles = flattenDashboardMosaicLayoutTilesSlice(c, m["tiles"])

	return r
}

// expandDashboardMosaicLayoutTilesMap expands the contents of DashboardMosaicLayoutTiles into a JSON
// request object.
func expandDashboardMosaicLayoutTilesMap(c *Client, f map[string]DashboardMosaicLayoutTiles) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardMosaicLayoutTiles(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardMosaicLayoutTilesSlice expands the contents of DashboardMosaicLayoutTiles into a JSON
// request object.
func expandDashboardMosaicLayoutTilesSlice(c *Client, f []DashboardMosaicLayoutTiles) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardMosaicLayoutTiles(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardMosaicLayoutTilesMap flattens the contents of DashboardMosaicLayoutTiles from a JSON
// response object.
func flattenDashboardMosaicLayoutTilesMap(c *Client, i interface{}) map[string]DashboardMosaicLayoutTiles {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardMosaicLayoutTiles{}
	}

	if len(a) == 0 {
		return map[string]DashboardMosaicLayoutTiles{}
	}

	items := make(map[string]DashboardMosaicLayoutTiles)
	for k, item := range a {
		items[k] = *flattenDashboardMosaicLayoutTiles(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardMosaicLayoutTilesSlice flattens the contents of DashboardMosaicLayoutTiles from a JSON
// response object.
func flattenDashboardMosaicLayoutTilesSlice(c *Client, i interface{}) []DashboardMosaicLayoutTiles {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardMosaicLayoutTiles{}
	}

	if len(a) == 0 {
		return []DashboardMosaicLayoutTiles{}
	}

	items := make([]DashboardMosaicLayoutTiles, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardMosaicLayoutTiles(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardMosaicLayoutTiles expands an instance of DashboardMosaicLayoutTiles into a JSON
// request object.
func expandDashboardMosaicLayoutTiles(c *Client, f *DashboardMosaicLayoutTiles) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.XPos; !dcl.IsEmptyValueIndirect(v) {
		m["xPos"] = v
	}
	if v := f.YPos; !dcl.IsEmptyValueIndirect(v) {
		m["yPos"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Height; !dcl.IsEmptyValueIndirect(v) {
		m["height"] = v
	}
	if v, err := expandDashboardWidget(c, f.Widget); err != nil {
		return nil, fmt.Errorf("error expanding Widget into widget: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["widget"] = v
	}

	return m, nil
}

// flattenDashboardMosaicLayoutTiles flattens an instance of DashboardMosaicLayoutTiles from a JSON
// response object.
func flattenDashboardMosaicLayoutTiles(c *Client, i interface{}) *DashboardMosaicLayoutTiles {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardMosaicLayoutTiles{}
	r.XPos = dcl.FlattenInteger(m["xPos"])
	r.YPos = dcl.FlattenInteger(m["yPos"])
	r.Width = dcl.FlattenInteger(m["width"])
	r.Height = dcl.FlattenInteger(m["height"])
	r.Widget = flattenDashboardWidget(c, m["widget"])

	return r
}

// expandDashboardRowLayoutMap expands the contents of DashboardRowLayout into a JSON
// request object.
func expandDashboardRowLayoutMap(c *Client, f map[string]DashboardRowLayout) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardRowLayout(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardRowLayoutSlice expands the contents of DashboardRowLayout into a JSON
// request object.
func expandDashboardRowLayoutSlice(c *Client, f []DashboardRowLayout) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardRowLayout(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardRowLayoutMap flattens the contents of DashboardRowLayout from a JSON
// response object.
func flattenDashboardRowLayoutMap(c *Client, i interface{}) map[string]DashboardRowLayout {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardRowLayout{}
	}

	if len(a) == 0 {
		return map[string]DashboardRowLayout{}
	}

	items := make(map[string]DashboardRowLayout)
	for k, item := range a {
		items[k] = *flattenDashboardRowLayout(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardRowLayoutSlice flattens the contents of DashboardRowLayout from a JSON
// response object.
func flattenDashboardRowLayoutSlice(c *Client, i interface{}) []DashboardRowLayout {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardRowLayout{}
	}

	if len(a) == 0 {
		return []DashboardRowLayout{}
	}

	items := make([]DashboardRowLayout, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardRowLayout(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardRowLayout expands an instance of DashboardRowLayout into a JSON
// request object.
func expandDashboardRowLayout(c *Client, f *DashboardRowLayout) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardRowLayoutRowsSlice(c, f.Rows); err != nil {
		return nil, fmt.Errorf("error expanding Rows into rows: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["rows"] = v
	}

	return m, nil
}

// flattenDashboardRowLayout flattens an instance of DashboardRowLayout from a JSON
// response object.
func flattenDashboardRowLayout(c *Client, i interface{}) *DashboardRowLayout {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardRowLayout{}
	r.Rows = flattenDashboardRowLayoutRowsSlice(c, m["rows"])

	return r
}

// expandDashboardRowLayoutRowsMap expands the contents of DashboardRowLayoutRows into a JSON
// request object.
func expandDashboardRowLayoutRowsMap(c *Client, f map[string]DashboardRowLayoutRows) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardRowLayoutRows(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardRowLayoutRowsSlice expands the contents of DashboardRowLayoutRows into a JSON
// request object.
func expandDashboardRowLayoutRowsSlice(c *Client, f []DashboardRowLayoutRows) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardRowLayoutRows(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardRowLayoutRowsMap flattens the contents of DashboardRowLayoutRows from a JSON
// response object.
func flattenDashboardRowLayoutRowsMap(c *Client, i interface{}) map[string]DashboardRowLayoutRows {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardRowLayoutRows{}
	}

	if len(a) == 0 {
		return map[string]DashboardRowLayoutRows{}
	}

	items := make(map[string]DashboardRowLayoutRows)
	for k, item := range a {
		items[k] = *flattenDashboardRowLayoutRows(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardRowLayoutRowsSlice flattens the contents of DashboardRowLayoutRows from a JSON
// response object.
func flattenDashboardRowLayoutRowsSlice(c *Client, i interface{}) []DashboardRowLayoutRows {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardRowLayoutRows{}
	}

	if len(a) == 0 {
		return []DashboardRowLayoutRows{}
	}

	items := make([]DashboardRowLayoutRows, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardRowLayoutRows(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardRowLayoutRows expands an instance of DashboardRowLayoutRows into a JSON
// request object.
func expandDashboardRowLayoutRows(c *Client, f *DashboardRowLayoutRows) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Weight; !dcl.IsEmptyValueIndirect(v) {
		m["weight"] = v
	}
	if v := f.Widgets; !dcl.IsEmptyValueIndirect(v) {
		m["widgets"] = v
	}

	return m, nil
}

// flattenDashboardRowLayoutRows flattens an instance of DashboardRowLayoutRows from a JSON
// response object.
func flattenDashboardRowLayoutRows(c *Client, i interface{}) *DashboardRowLayoutRows {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardRowLayoutRows{}
	r.Weight = dcl.FlattenInteger(m["weight"])
	r.Widgets = flattenDashboardWidgetSlice(c, m["widgets"])

	return r
}

// expandDashboardTabbedLayoutMap expands the contents of DashboardTabbedLayout into a JSON
// request object.
func expandDashboardTabbedLayoutMap(c *Client, f map[string]DashboardTabbedLayout) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardTabbedLayout(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardTabbedLayoutSlice expands the contents of DashboardTabbedLayout into a JSON
// request object.
func expandDashboardTabbedLayoutSlice(c *Client, f []DashboardTabbedLayout) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardTabbedLayout(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardTabbedLayoutMap flattens the contents of DashboardTabbedLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutMap(c *Client, i interface{}) map[string]DashboardTabbedLayout {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardTabbedLayout{}
	}

	if len(a) == 0 {
		return map[string]DashboardTabbedLayout{}
	}

	items := make(map[string]DashboardTabbedLayout)
	for k, item := range a {
		items[k] = *flattenDashboardTabbedLayout(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardTabbedLayoutSlice flattens the contents of DashboardTabbedLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutSlice(c *Client, i interface{}) []DashboardTabbedLayout {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardTabbedLayout{}
	}

	if len(a) == 0 {
		return []DashboardTabbedLayout{}
	}

	items := make([]DashboardTabbedLayout, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardTabbedLayout(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardTabbedLayout expands an instance of DashboardTabbedLayout into a JSON
// request object.
func expandDashboardTabbedLayout(c *Client, f *DashboardTabbedLayout) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardTabbedLayoutTabsSlice(c, f.Tabs); err != nil {
		return nil, fmt.Errorf("error expanding Tabs into tabs: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["tabs"] = v
	}
	if v, err := expandDashboardTabbedLayoutFeaturedMosaicLayout(c, f.FeaturedMosaicLayout); err != nil {
		return nil, fmt.Errorf("error expanding FeaturedMosaicLayout into featuredMosaicLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["featuredMosaicLayout"] = v
	}

	return m, nil
}

// flattenDashboardTabbedLayout flattens an instance of DashboardTabbedLayout from a JSON
// response object.
func flattenDashboardTabbedLayout(c *Client, i interface{}) *DashboardTabbedLayout {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardTabbedLayout{}
	r.Tabs = flattenDashboardTabbedLayoutTabsSlice(c, m["tabs"])
	r.FeaturedMosaicLayout = flattenDashboardTabbedLayoutFeaturedMosaicLayout(c, m["featuredMosaicLayout"])

	return r
}

// expandDashboardTabbedLayoutTabsMap expands the contents of DashboardTabbedLayoutTabs into a JSON
// request object.
func expandDashboardTabbedLayoutTabsMap(c *Client, f map[string]DashboardTabbedLayoutTabs) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardTabbedLayoutTabs(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardTabbedLayoutTabsSlice expands the contents of DashboardTabbedLayoutTabs into a JSON
// request object.
func expandDashboardTabbedLayoutTabsSlice(c *Client, f []DashboardTabbedLayoutTabs) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardTabbedLayoutTabs(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardTabbedLayoutTabsMap flattens the contents of DashboardTabbedLayoutTabs from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsMap(c *Client, i interface{}) map[string]DashboardTabbedLayoutTabs {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardTabbedLayoutTabs{}
	}

	if len(a) == 0 {
		return map[string]DashboardTabbedLayoutTabs{}
	}

	items := make(map[string]DashboardTabbedLayoutTabs)
	for k, item := range a {
		items[k] = *flattenDashboardTabbedLayoutTabs(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardTabbedLayoutTabsSlice flattens the contents of DashboardTabbedLayoutTabs from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsSlice(c *Client, i interface{}) []DashboardTabbedLayoutTabs {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardTabbedLayoutTabs{}
	}

	if len(a) == 0 {
		return []DashboardTabbedLayoutTabs{}
	}

	items := make([]DashboardTabbedLayoutTabs, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardTabbedLayoutTabs(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardTabbedLayoutTabs expands an instance of DashboardTabbedLayoutTabs into a JSON
// request object.
func expandDashboardTabbedLayoutTabs(c *Client, f *DashboardTabbedLayoutTabs) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Label; !dcl.IsEmptyValueIndirect(v) {
		m["label"] = v
	}
	if v := f.HintText; !dcl.IsEmptyValueIndirect(v) {
		m["hintText"] = v
	}
	if v, err := expandDashboardTabbedLayoutTabsGridLayout(c, f.GridLayout); err != nil {
		return nil, fmt.Errorf("error expanding GridLayout into gridLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["gridLayout"] = v
	}
	if v, err := expandDashboardTabbedLayoutTabsMosaicLayout(c, f.MosaicLayout); err != nil {
		return nil, fmt.Errorf("error expanding MosaicLayout into mosaicLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["mosaicLayout"] = v
	}
	if v, err := expandDashboardTabbedLayoutTabsRowLayout(c, f.RowLayout); err != nil {
		return nil, fmt.Errorf("error expanding RowLayout into rowLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["rowLayout"] = v
	}
	if v, err := expandDashboardTabbedLayoutTabsColumnLayout(c, f.ColumnLayout); err != nil {
		return nil, fmt.Errorf("error expanding ColumnLayout into columnLayout: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["columnLayout"] = v
	}

	return m, nil
}

// flattenDashboardTabbedLayoutTabs flattens an instance of DashboardTabbedLayoutTabs from a JSON
// response object.
func flattenDashboardTabbedLayoutTabs(c *Client, i interface{}) *DashboardTabbedLayoutTabs {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardTabbedLayoutTabs{}
	r.Label = dcl.FlattenString(m["label"])
	r.HintText = dcl.FlattenString(m["hintText"])
	r.GridLayout = flattenDashboardTabbedLayoutTabsGridLayout(c, m["gridLayout"])
	r.MosaicLayout = flattenDashboardTabbedLayoutTabsMosaicLayout(c, m["mosaicLayout"])
	r.RowLayout = flattenDashboardTabbedLayoutTabsRowLayout(c, m["rowLayout"])
	r.ColumnLayout = flattenDashboardTabbedLayoutTabsColumnLayout(c, m["columnLayout"])

	return r
}

// expandDashboardTabbedLayoutTabsGridLayoutMap expands the contents of DashboardTabbedLayoutTabsGridLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsGridLayoutMap(c *Client, f map[string]DashboardTabbedLayoutTabsGridLayout) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardTabbedLayoutTabsGridLayout(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardTabbedLayoutTabsGridLayoutSlice expands the contents of DashboardTabbedLayoutTabsGridLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsGridLayoutSlice(c *Client, f []DashboardTabbedLayoutTabsGridLayout) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardTabbedLayoutTabsGridLayout(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardTabbedLayoutTabsGridLayoutMap flattens the contents of DashboardTabbedLayoutTabsGridLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsGridLayoutMap(c *Client, i interface{}) map[string]DashboardTabbedLayoutTabsGridLayout {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardTabbedLayoutTabsGridLayout{}
	}

	if len(a) == 0 {
		return map[string]DashboardTabbedLayoutTabsGridLayout{}
	}

	items := make(map[string]DashboardTabbedLayoutTabsGridLayout)
	for k, item := range a {
		items[k] = *flattenDashboardTabbedLayoutTabsGridLayout(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardTabbedLayoutTabsGridLayoutSlice flattens the contents of DashboardTabbedLayoutTabsGridLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsGridLayoutSlice(c *Client, i interface{}) []DashboardTabbedLayoutTabsGridLayout {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardTabbedLayoutTabsGridLayout{}
	}

	if len(a) == 0 {
		return []DashboardTabbedLayoutTabsGridLayout{}
	}

	items := make([]DashboardTabbedLayoutTabsGridLayout, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardTabbedLayoutTabsGridLayout(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardTabbedLayoutTabsGridLayout expands an instance of DashboardTabbedLayoutTabsGridLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsGridLayout(c *Client, f *DashboardTabbedLayoutTabsGridLayout) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Columns; !dcl.IsEmptyValueIndirect(v) {
		m["columns"] = v
	}
	if v := f.Widgets; !dcl.IsEmptyValueIndirect(v) {
		m["widgets"] = v
	}

	return m, nil
}

// flattenDashboardTabbedLayoutTabsGridLayout flattens an instance of DashboardTabbedLayoutTabsGridLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsGridLayout(c *Client, i interface{}) *DashboardTabbedLayoutTabsGridLayout {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardTabbedLayoutTabsGridLayout{}
	r.Columns = dcl.FlattenInteger(m["columns"])
	r.Widgets = flattenDashboardWidgetSlice(c, m["widgets"])

	return r
}

// expandDashboardTabbedLayoutTabsMosaicLayoutMap expands the contents of DashboardTabbedLayoutTabsMosaicLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsMosaicLayoutMap(c *Client, f map[string]DashboardTabbedLayoutTabsMosaicLayout) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardTabbedLayoutTabsMosaicLayout(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardTabbedLayoutTabsMosaicLayoutSlice expands the contents of DashboardTabbedLayoutTabsMosaicLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsMosaicLayoutSlice(c *Client, f []DashboardTabbedLayoutTabsMosaicLayout) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardTabbedLayoutTabsMosaicLayout(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardTabbedLayoutTabsMosaicLayoutMap flattens the contents of DashboardTabbedLayoutTabsMosaicLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsMosaicLayoutMap(c *Client, i interface{}) map[string]DashboardTabbedLayoutTabsMosaicLayout {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardTabbedLayoutTabsMosaicLayout{}
	}

	if len(a) == 0 {
		return map[string]DashboardTabbedLayoutTabsMosaicLayout{}
	}

	items := make(map[string]DashboardTabbedLayoutTabsMosaicLayout)
	for k, item := range a {
		items[k] = *flattenDashboardTabbedLayoutTabsMosaicLayout(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardTabbedLayoutTabsMosaicLayoutSlice flattens the contents of DashboardTabbedLayoutTabsMosaicLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsMosaicLayoutSlice(c *Client, i interface{}) []DashboardTabbedLayoutTabsMosaicLayout {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardTabbedLayoutTabsMosaicLayout{}
	}

	if len(a) == 0 {
		return []DashboardTabbedLayoutTabsMosaicLayout{}
	}

	items := make([]DashboardTabbedLayoutTabsMosaicLayout, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardTabbedLayoutTabsMosaicLayout(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardTabbedLayoutTabsMosaicLayout expands an instance of DashboardTabbedLayoutTabsMosaicLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsMosaicLayout(c *Client, f *DashboardTabbedLayoutTabsMosaicLayout) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Columns; !dcl.IsEmptyValueIndirect(v) {
		m["columns"] = v
	}
	if v, err := expandDashboardTabbedLayoutTabsMosaicLayoutTilesSlice(c, f.Tiles); err != nil {
		return nil, fmt.Errorf("error expanding Tiles into tiles: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["tiles"] = v
	}

	return m, nil
}

// flattenDashboardTabbedLayoutTabsMosaicLayout flattens an instance of DashboardTabbedLayoutTabsMosaicLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsMosaicLayout(c *Client, i interface{}) *DashboardTabbedLayoutTabsMosaicLayout {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardTabbedLayoutTabsMosaicLayout{}
	r.Columns = dcl.FlattenInteger(m["columns"])
	r.Tiles = flattenDashboardTabbedLayoutTabsMosaicLayoutTilesSlice(c, m["tiles"])

	return r
}

// expandDashboardTabbedLayoutTabsMosaicLayoutTilesMap expands the contents of DashboardTabbedLayoutTabsMosaicLayoutTiles into a JSON
// request object.
func expandDashboardTabbedLayoutTabsMosaicLayoutTilesMap(c *Client, f map[string]DashboardTabbedLayoutTabsMosaicLayoutTiles) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardTabbedLayoutTabsMosaicLayoutTiles(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardTabbedLayoutTabsMosaicLayoutTilesSlice expands the contents of DashboardTabbedLayoutTabsMosaicLayoutTiles into a JSON
// request object.
func expandDashboardTabbedLayoutTabsMosaicLayoutTilesSlice(c *Client, f []DashboardTabbedLayoutTabsMosaicLayoutTiles) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardTabbedLayoutTabsMosaicLayoutTiles(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardTabbedLayoutTabsMosaicLayoutTilesMap flattens the contents of DashboardTabbedLayoutTabsMosaicLayoutTiles from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsMosaicLayoutTilesMap(c *Client, i interface{}) map[string]DashboardTabbedLayoutTabsMosaicLayoutTiles {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardTabbedLayoutTabsMosaicLayoutTiles{}
	}

	if len(a) == 0 {
		return map[string]DashboardTabbedLayoutTabsMosaicLayoutTiles{}
	}

	items := make(map[string]DashboardTabbedLayoutTabsMosaicLayoutTiles)
	for k, item := range a {
		items[k] = *flattenDashboardTabbedLayoutTabsMosaicLayoutTiles(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardTabbedLayoutTabsMosaicLayoutTilesSlice flattens the contents of DashboardTabbedLayoutTabsMosaicLayoutTiles from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsMosaicLayoutTilesSlice(c *Client, i interface{}) []DashboardTabbedLayoutTabsMosaicLayoutTiles {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardTabbedLayoutTabsMosaicLayoutTiles{}
	}

	if len(a) == 0 {
		return []DashboardTabbedLayoutTabsMosaicLayoutTiles{}
	}

	items := make([]DashboardTabbedLayoutTabsMosaicLayoutTiles, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardTabbedLayoutTabsMosaicLayoutTiles(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardTabbedLayoutTabsMosaicLayoutTiles expands an instance of DashboardTabbedLayoutTabsMosaicLayoutTiles into a JSON
// request object.
func expandDashboardTabbedLayoutTabsMosaicLayoutTiles(c *Client, f *DashboardTabbedLayoutTabsMosaicLayoutTiles) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.XPos; !dcl.IsEmptyValueIndirect(v) {
		m["xPos"] = v
	}
	if v := f.YPos; !dcl.IsEmptyValueIndirect(v) {
		m["yPos"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Height; !dcl.IsEmptyValueIndirect(v) {
		m["height"] = v
	}
	if v, err := expandDashboardWidget(c, f.Widget); err != nil {
		return nil, fmt.Errorf("error expanding Widget into widget: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["widget"] = v
	}

	return m, nil
}

// flattenDashboardTabbedLayoutTabsMosaicLayoutTiles flattens an instance of DashboardTabbedLayoutTabsMosaicLayoutTiles from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsMosaicLayoutTiles(c *Client, i interface{}) *DashboardTabbedLayoutTabsMosaicLayoutTiles {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardTabbedLayoutTabsMosaicLayoutTiles{}
	r.XPos = dcl.FlattenInteger(m["xPos"])
	r.YPos = dcl.FlattenInteger(m["yPos"])
	r.Width = dcl.FlattenInteger(m["width"])
	r.Height = dcl.FlattenInteger(m["height"])
	r.Widget = flattenDashboardWidget(c, m["widget"])

	return r
}

// expandDashboardTabbedLayoutTabsRowLayoutMap expands the contents of DashboardTabbedLayoutTabsRowLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsRowLayoutMap(c *Client, f map[string]DashboardTabbedLayoutTabsRowLayout) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardTabbedLayoutTabsRowLayout(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardTabbedLayoutTabsRowLayoutSlice expands the contents of DashboardTabbedLayoutTabsRowLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsRowLayoutSlice(c *Client, f []DashboardTabbedLayoutTabsRowLayout) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardTabbedLayoutTabsRowLayout(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardTabbedLayoutTabsRowLayoutMap flattens the contents of DashboardTabbedLayoutTabsRowLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsRowLayoutMap(c *Client, i interface{}) map[string]DashboardTabbedLayoutTabsRowLayout {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardTabbedLayoutTabsRowLayout{}
	}

	if len(a) == 0 {
		return map[string]DashboardTabbedLayoutTabsRowLayout{}
	}

	items := make(map[string]DashboardTabbedLayoutTabsRowLayout)
	for k, item := range a {
		items[k] = *flattenDashboardTabbedLayoutTabsRowLayout(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardTabbedLayoutTabsRowLayoutSlice flattens the contents of DashboardTabbedLayoutTabsRowLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsRowLayoutSlice(c *Client, i interface{}) []DashboardTabbedLayoutTabsRowLayout {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardTabbedLayoutTabsRowLayout{}
	}

	if len(a) == 0 {
		return []DashboardTabbedLayoutTabsRowLayout{}
	}

	items := make([]DashboardTabbedLayoutTabsRowLayout, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardTabbedLayoutTabsRowLayout(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardTabbedLayoutTabsRowLayout expands an instance of DashboardTabbedLayoutTabsRowLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsRowLayout(c *Client, f *DashboardTabbedLayoutTabsRowLayout) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardTabbedLayoutTabsRowLayoutRowsSlice(c, f.Rows); err != nil {
		return nil, fmt.Errorf("error expanding Rows into rows: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["rows"] = v
	}

	return m, nil
}

// flattenDashboardTabbedLayoutTabsRowLayout flattens an instance of DashboardTabbedLayoutTabsRowLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsRowLayout(c *Client, i interface{}) *DashboardTabbedLayoutTabsRowLayout {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardTabbedLayoutTabsRowLayout{}
	r.Rows = flattenDashboardTabbedLayoutTabsRowLayoutRowsSlice(c, m["rows"])

	return r
}

// expandDashboardTabbedLayoutTabsRowLayoutRowsMap expands the contents of DashboardTabbedLayoutTabsRowLayoutRows into a JSON
// request object.
func expandDashboardTabbedLayoutTabsRowLayoutRowsMap(c *Client, f map[string]DashboardTabbedLayoutTabsRowLayoutRows) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardTabbedLayoutTabsRowLayoutRows(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardTabbedLayoutTabsRowLayoutRowsSlice expands the contents of DashboardTabbedLayoutTabsRowLayoutRows into a JSON
// request object.
func expandDashboardTabbedLayoutTabsRowLayoutRowsSlice(c *Client, f []DashboardTabbedLayoutTabsRowLayoutRows) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardTabbedLayoutTabsRowLayoutRows(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardTabbedLayoutTabsRowLayoutRowsMap flattens the contents of DashboardTabbedLayoutTabsRowLayoutRows from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsRowLayoutRowsMap(c *Client, i interface{}) map[string]DashboardTabbedLayoutTabsRowLayoutRows {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardTabbedLayoutTabsRowLayoutRows{}
	}

	if len(a) == 0 {
		return map[string]DashboardTabbedLayoutTabsRowLayoutRows{}
	}

	items := make(map[string]DashboardTabbedLayoutTabsRowLayoutRows)
	for k, item := range a {
		items[k] = *flattenDashboardTabbedLayoutTabsRowLayoutRows(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardTabbedLayoutTabsRowLayoutRowsSlice flattens the contents of DashboardTabbedLayoutTabsRowLayoutRows from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsRowLayoutRowsSlice(c *Client, i interface{}) []DashboardTabbedLayoutTabsRowLayoutRows {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardTabbedLayoutTabsRowLayoutRows{}
	}

	if len(a) == 0 {
		return []DashboardTabbedLayoutTabsRowLayoutRows{}
	}

	items := make([]DashboardTabbedLayoutTabsRowLayoutRows, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardTabbedLayoutTabsRowLayoutRows(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardTabbedLayoutTabsRowLayoutRows expands an instance of DashboardTabbedLayoutTabsRowLayoutRows into a JSON
// request object.
func expandDashboardTabbedLayoutTabsRowLayoutRows(c *Client, f *DashboardTabbedLayoutTabsRowLayoutRows) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Weight; !dcl.IsEmptyValueIndirect(v) {
		m["weight"] = v
	}
	if v := f.Widgets; !dcl.IsEmptyValueIndirect(v) {
		m["widgets"] = v
	}

	return m, nil
}

// flattenDashboardTabbedLayoutTabsRowLayoutRows flattens an instance of DashboardTabbedLayoutTabsRowLayoutRows from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsRowLayoutRows(c *Client, i interface{}) *DashboardTabbedLayoutTabsRowLayoutRows {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardTabbedLayoutTabsRowLayoutRows{}
	r.Weight = dcl.FlattenInteger(m["weight"])
	r.Widgets = flattenDashboardWidgetSlice(c, m["widgets"])

	return r
}

// expandDashboardTabbedLayoutTabsColumnLayoutMap expands the contents of DashboardTabbedLayoutTabsColumnLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsColumnLayoutMap(c *Client, f map[string]DashboardTabbedLayoutTabsColumnLayout) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardTabbedLayoutTabsColumnLayout(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardTabbedLayoutTabsColumnLayoutSlice expands the contents of DashboardTabbedLayoutTabsColumnLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsColumnLayoutSlice(c *Client, f []DashboardTabbedLayoutTabsColumnLayout) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardTabbedLayoutTabsColumnLayout(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardTabbedLayoutTabsColumnLayoutMap flattens the contents of DashboardTabbedLayoutTabsColumnLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsColumnLayoutMap(c *Client, i interface{}) map[string]DashboardTabbedLayoutTabsColumnLayout {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardTabbedLayoutTabsColumnLayout{}
	}

	if len(a) == 0 {
		return map[string]DashboardTabbedLayoutTabsColumnLayout{}
	}

	items := make(map[string]DashboardTabbedLayoutTabsColumnLayout)
	for k, item := range a {
		items[k] = *flattenDashboardTabbedLayoutTabsColumnLayout(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardTabbedLayoutTabsColumnLayoutSlice flattens the contents of DashboardTabbedLayoutTabsColumnLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsColumnLayoutSlice(c *Client, i interface{}) []DashboardTabbedLayoutTabsColumnLayout {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardTabbedLayoutTabsColumnLayout{}
	}

	if len(a) == 0 {
		return []DashboardTabbedLayoutTabsColumnLayout{}
	}

	items := make([]DashboardTabbedLayoutTabsColumnLayout, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardTabbedLayoutTabsColumnLayout(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardTabbedLayoutTabsColumnLayout expands an instance of DashboardTabbedLayoutTabsColumnLayout into a JSON
// request object.
func expandDashboardTabbedLayoutTabsColumnLayout(c *Client, f *DashboardTabbedLayoutTabsColumnLayout) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v, err := expandDashboardTabbedLayoutTabsColumnLayoutColumnsSlice(c, f.Columns); err != nil {
		return nil, fmt.Errorf("error expanding Columns into columns: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["columns"] = v
	}

	return m, nil
}

// flattenDashboardTabbedLayoutTabsColumnLayout flattens an instance of DashboardTabbedLayoutTabsColumnLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsColumnLayout(c *Client, i interface{}) *DashboardTabbedLayoutTabsColumnLayout {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardTabbedLayoutTabsColumnLayout{}
	r.Columns = flattenDashboardTabbedLayoutTabsColumnLayoutColumnsSlice(c, m["columns"])

	return r
}

// expandDashboardTabbedLayoutTabsColumnLayoutColumnsMap expands the contents of DashboardTabbedLayoutTabsColumnLayoutColumns into a JSON
// request object.
func expandDashboardTabbedLayoutTabsColumnLayoutColumnsMap(c *Client, f map[string]DashboardTabbedLayoutTabsColumnLayoutColumns) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardTabbedLayoutTabsColumnLayoutColumns(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardTabbedLayoutTabsColumnLayoutColumnsSlice expands the contents of DashboardTabbedLayoutTabsColumnLayoutColumns into a JSON
// request object.
func expandDashboardTabbedLayoutTabsColumnLayoutColumnsSlice(c *Client, f []DashboardTabbedLayoutTabsColumnLayoutColumns) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardTabbedLayoutTabsColumnLayoutColumns(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardTabbedLayoutTabsColumnLayoutColumnsMap flattens the contents of DashboardTabbedLayoutTabsColumnLayoutColumns from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsColumnLayoutColumnsMap(c *Client, i interface{}) map[string]DashboardTabbedLayoutTabsColumnLayoutColumns {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardTabbedLayoutTabsColumnLayoutColumns{}
	}

	if len(a) == 0 {
		return map[string]DashboardTabbedLayoutTabsColumnLayoutColumns{}
	}

	items := make(map[string]DashboardTabbedLayoutTabsColumnLayoutColumns)
	for k, item := range a {
		items[k] = *flattenDashboardTabbedLayoutTabsColumnLayoutColumns(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardTabbedLayoutTabsColumnLayoutColumnsSlice flattens the contents of DashboardTabbedLayoutTabsColumnLayoutColumns from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsColumnLayoutColumnsSlice(c *Client, i interface{}) []DashboardTabbedLayoutTabsColumnLayoutColumns {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardTabbedLayoutTabsColumnLayoutColumns{}
	}

	if len(a) == 0 {
		return []DashboardTabbedLayoutTabsColumnLayoutColumns{}
	}

	items := make([]DashboardTabbedLayoutTabsColumnLayoutColumns, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardTabbedLayoutTabsColumnLayoutColumns(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardTabbedLayoutTabsColumnLayoutColumns expands an instance of DashboardTabbedLayoutTabsColumnLayoutColumns into a JSON
// request object.
func expandDashboardTabbedLayoutTabsColumnLayoutColumns(c *Client, f *DashboardTabbedLayoutTabsColumnLayoutColumns) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Weight; !dcl.IsEmptyValueIndirect(v) {
		m["weight"] = v
	}
	if v := f.Widgets; !dcl.IsEmptyValueIndirect(v) {
		m["widgets"] = v
	}

	return m, nil
}

// flattenDashboardTabbedLayoutTabsColumnLayoutColumns flattens an instance of DashboardTabbedLayoutTabsColumnLayoutColumns from a JSON
// response object.
func flattenDashboardTabbedLayoutTabsColumnLayoutColumns(c *Client, i interface{}) *DashboardTabbedLayoutTabsColumnLayoutColumns {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardTabbedLayoutTabsColumnLayoutColumns{}
	r.Weight = dcl.FlattenInteger(m["weight"])
	r.Widgets = flattenDashboardWidgetSlice(c, m["widgets"])

	return r
}

// expandDashboardTabbedLayoutFeaturedMosaicLayoutMap expands the contents of DashboardTabbedLayoutFeaturedMosaicLayout into a JSON
// request object.
func expandDashboardTabbedLayoutFeaturedMosaicLayoutMap(c *Client, f map[string]DashboardTabbedLayoutFeaturedMosaicLayout) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardTabbedLayoutFeaturedMosaicLayout(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardTabbedLayoutFeaturedMosaicLayoutSlice expands the contents of DashboardTabbedLayoutFeaturedMosaicLayout into a JSON
// request object.
func expandDashboardTabbedLayoutFeaturedMosaicLayoutSlice(c *Client, f []DashboardTabbedLayoutFeaturedMosaicLayout) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardTabbedLayoutFeaturedMosaicLayout(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardTabbedLayoutFeaturedMosaicLayoutMap flattens the contents of DashboardTabbedLayoutFeaturedMosaicLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutFeaturedMosaicLayoutMap(c *Client, i interface{}) map[string]DashboardTabbedLayoutFeaturedMosaicLayout {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardTabbedLayoutFeaturedMosaicLayout{}
	}

	if len(a) == 0 {
		return map[string]DashboardTabbedLayoutFeaturedMosaicLayout{}
	}

	items := make(map[string]DashboardTabbedLayoutFeaturedMosaicLayout)
	for k, item := range a {
		items[k] = *flattenDashboardTabbedLayoutFeaturedMosaicLayout(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardTabbedLayoutFeaturedMosaicLayoutSlice flattens the contents of DashboardTabbedLayoutFeaturedMosaicLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutFeaturedMosaicLayoutSlice(c *Client, i interface{}) []DashboardTabbedLayoutFeaturedMosaicLayout {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardTabbedLayoutFeaturedMosaicLayout{}
	}

	if len(a) == 0 {
		return []DashboardTabbedLayoutFeaturedMosaicLayout{}
	}

	items := make([]DashboardTabbedLayoutFeaturedMosaicLayout, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardTabbedLayoutFeaturedMosaicLayout(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardTabbedLayoutFeaturedMosaicLayout expands an instance of DashboardTabbedLayoutFeaturedMosaicLayout into a JSON
// request object.
func expandDashboardTabbedLayoutFeaturedMosaicLayout(c *Client, f *DashboardTabbedLayoutFeaturedMosaicLayout) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.Columns; !dcl.IsEmptyValueIndirect(v) {
		m["columns"] = v
	}
	if v, err := expandDashboardTabbedLayoutFeaturedMosaicLayoutTilesSlice(c, f.Tiles); err != nil {
		return nil, fmt.Errorf("error expanding Tiles into tiles: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["tiles"] = v
	}

	return m, nil
}

// flattenDashboardTabbedLayoutFeaturedMosaicLayout flattens an instance of DashboardTabbedLayoutFeaturedMosaicLayout from a JSON
// response object.
func flattenDashboardTabbedLayoutFeaturedMosaicLayout(c *Client, i interface{}) *DashboardTabbedLayoutFeaturedMosaicLayout {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardTabbedLayoutFeaturedMosaicLayout{}
	r.Columns = dcl.FlattenInteger(m["columns"])
	r.Tiles = flattenDashboardTabbedLayoutFeaturedMosaicLayoutTilesSlice(c, m["tiles"])

	return r
}

// expandDashboardTabbedLayoutFeaturedMosaicLayoutTilesMap expands the contents of DashboardTabbedLayoutFeaturedMosaicLayoutTiles into a JSON
// request object.
func expandDashboardTabbedLayoutFeaturedMosaicLayoutTilesMap(c *Client, f map[string]DashboardTabbedLayoutFeaturedMosaicLayoutTiles) (map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := make(map[string]interface{})
	for k, item := range f {
		i, err := expandDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c, &item)
		if err != nil {
			return nil, err
		}
		if i != nil {
			items[k] = i
		}
	}

	return items, nil
}

// expandDashboardTabbedLayoutFeaturedMosaicLayoutTilesSlice expands the contents of DashboardTabbedLayoutFeaturedMosaicLayoutTiles into a JSON
// request object.
func expandDashboardTabbedLayoutFeaturedMosaicLayoutTilesSlice(c *Client, f []DashboardTabbedLayoutFeaturedMosaicLayoutTiles) ([]map[string]interface{}, error) {
	if f == nil {
		return nil, nil
	}

	items := []map[string]interface{}{}
	for _, item := range f {
		i, err := expandDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c, &item)
		if err != nil {
			return nil, err
		}

		items = append(items, i)
	}

	return items, nil
}

// flattenDashboardTabbedLayoutFeaturedMosaicLayoutTilesMap flattens the contents of DashboardTabbedLayoutFeaturedMosaicLayoutTiles from a JSON
// response object.
func flattenDashboardTabbedLayoutFeaturedMosaicLayoutTilesMap(c *Client, i interface{}) map[string]DashboardTabbedLayoutFeaturedMosaicLayoutTiles {
	a, ok := i.(map[string]interface{})
	if !ok {
		return map[string]DashboardTabbedLayoutFeaturedMosaicLayoutTiles{}
	}

	if len(a) == 0 {
		return map[string]DashboardTabbedLayoutFeaturedMosaicLayoutTiles{}
	}

	items := make(map[string]DashboardTabbedLayoutFeaturedMosaicLayoutTiles)
	for k, item := range a {
		items[k] = *flattenDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c, item.(map[string]interface{}))
	}

	return items
}

// flattenDashboardTabbedLayoutFeaturedMosaicLayoutTilesSlice flattens the contents of DashboardTabbedLayoutFeaturedMosaicLayoutTiles from a JSON
// response object.
func flattenDashboardTabbedLayoutFeaturedMosaicLayoutTilesSlice(c *Client, i interface{}) []DashboardTabbedLayoutFeaturedMosaicLayoutTiles {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardTabbedLayoutFeaturedMosaicLayoutTiles{}
	}

	if len(a) == 0 {
		return []DashboardTabbedLayoutFeaturedMosaicLayoutTiles{}
	}

	items := make([]DashboardTabbedLayoutFeaturedMosaicLayoutTiles, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c, item.(map[string]interface{})))
	}

	return items
}

// expandDashboardTabbedLayoutFeaturedMosaicLayoutTiles expands an instance of DashboardTabbedLayoutFeaturedMosaicLayoutTiles into a JSON
// request object.
func expandDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c *Client, f *DashboardTabbedLayoutFeaturedMosaicLayoutTiles) (map[string]interface{}, error) {
	if dcl.IsEmptyValueIndirect(f) {
		return nil, nil
	}

	m := make(map[string]interface{})
	if v := f.XPos; !dcl.IsEmptyValueIndirect(v) {
		m["xPos"] = v
	}
	if v := f.YPos; !dcl.IsEmptyValueIndirect(v) {
		m["yPos"] = v
	}
	if v := f.Width; !dcl.IsEmptyValueIndirect(v) {
		m["width"] = v
	}
	if v := f.Height; !dcl.IsEmptyValueIndirect(v) {
		m["height"] = v
	}
	if v, err := expandDashboardWidget(c, f.Widget); err != nil {
		return nil, fmt.Errorf("error expanding Widget into widget: %w", err)
	} else if !dcl.IsEmptyValueIndirect(v) {
		m["widget"] = v
	}

	return m, nil
}

// flattenDashboardTabbedLayoutFeaturedMosaicLayoutTiles flattens an instance of DashboardTabbedLayoutFeaturedMosaicLayoutTiles from a JSON
// response object.
func flattenDashboardTabbedLayoutFeaturedMosaicLayoutTiles(c *Client, i interface{}) *DashboardTabbedLayoutFeaturedMosaicLayoutTiles {
	m, ok := i.(map[string]interface{})
	if !ok {
		return nil
	}

	r := &DashboardTabbedLayoutFeaturedMosaicLayoutTiles{}
	r.XPos = dcl.FlattenInteger(m["xPos"])
	r.YPos = dcl.FlattenInteger(m["yPos"])
	r.Width = dcl.FlattenInteger(m["width"])
	r.Height = dcl.FlattenInteger(m["height"])
	r.Widget = flattenDashboardWidget(c, m["widget"])

	return r
}

// flattenDashboardCategoryEnumSlice flattens the contents of DashboardCategoryEnum from a JSON
// response object.
func flattenDashboardCategoryEnumSlice(c *Client, i interface{}) []DashboardCategoryEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardCategoryEnum{}
	}

	if len(a) == 0 {
		return []DashboardCategoryEnum{}
	}

	items := make([]DashboardCategoryEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardCategoryEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardCategoryEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardCategoryEnum with the same value as that string.
func flattenDashboardCategoryEnum(i interface{}) *DashboardCategoryEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardCategoryEnumRef("")
	}

	return DashboardCategoryEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum(i interface{}) *DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsTimeSeriesQueryApiSourceEnumRef(s)
}

// flattenDashboardWidgetXyChartDataSetsPlotTypeEnumSlice flattens the contents of DashboardWidgetXyChartDataSetsPlotTypeEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartDataSetsPlotTypeEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartDataSetsPlotTypeEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartDataSetsPlotTypeEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartDataSetsPlotTypeEnum{}
	}

	items := make([]DashboardWidgetXyChartDataSetsPlotTypeEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartDataSetsPlotTypeEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartDataSetsPlotTypeEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartDataSetsPlotTypeEnum with the same value as that string.
func flattenDashboardWidgetXyChartDataSetsPlotTypeEnum(i interface{}) *DashboardWidgetXyChartDataSetsPlotTypeEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartDataSetsPlotTypeEnumRef("")
	}

	return DashboardWidgetXyChartDataSetsPlotTypeEnumRef(s)
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnumSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum with the same value as that string.
func flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum(i interface{}) *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnumRef("")
	}

	return DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnumRef(s)
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnumSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum with the same value as that string.
func flattenDashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum(i interface{}) *DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnumRef("")
	}

	return DashboardWidgetXyChartSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnumRef(s)
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnumSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum with the same value as that string.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum(i interface{}) *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnumRef("")
	}

	return DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnumRef(s)
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnumSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum with the same value as that string.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum(i interface{}) *DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnumRef("")
	}

	return DashboardWidgetXyChartSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnumRef(s)
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnumSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum with the same value as that string.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum(i interface{}) *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnumRef("")
	}

	return DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnumRef(s)
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnumSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum with the same value as that string.
func flattenDashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum(i interface{}) *DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnumRef("")
	}

	return DashboardWidgetXyChartSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnumRef(s)
}

// flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnumSlice flattens the contents of DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum{}
	}

	items := make([]DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum with the same value as that string.
func flattenDashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum(i interface{}) *DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnumRef("")
	}

	return DashboardWidgetXyChartSourceDrilldownServiceTypeDrilldownTypesEnumRef(s)
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnumSlice flattens the contents of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum{}
	}

	items := make([]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum with the same value as that string.
func flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum(i interface{}) *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnumRef("")
	}

	return DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnumRef(s)
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnumSlice flattens the contents of DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	items := make([]DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum with the same value as that string.
func flattenDashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum(i interface{}) *DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnumRef("")
	}

	return DashboardWidgetXyChartMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnumRef(s)
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnumSlice flattens the contents of DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum{}
	}

	items := make([]DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum with the same value as that string.
func flattenDashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum(i interface{}) *DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnumRef("")
	}

	return DashboardWidgetXyChartMetricDrilldownMetricGroupByDrilldownReducerEnumRef(s)
}

// flattenDashboardWidgetXyChartThresholdsColorEnumSlice flattens the contents of DashboardWidgetXyChartThresholdsColorEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartThresholdsColorEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartThresholdsColorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartThresholdsColorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartThresholdsColorEnum{}
	}

	items := make([]DashboardWidgetXyChartThresholdsColorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartThresholdsColorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartThresholdsColorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartThresholdsColorEnum with the same value as that string.
func flattenDashboardWidgetXyChartThresholdsColorEnum(i interface{}) *DashboardWidgetXyChartThresholdsColorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartThresholdsColorEnumRef("")
	}

	return DashboardWidgetXyChartThresholdsColorEnumRef(s)
}

// flattenDashboardWidgetXyChartThresholdsDirectionEnumSlice flattens the contents of DashboardWidgetXyChartThresholdsDirectionEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartThresholdsDirectionEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartThresholdsDirectionEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartThresholdsDirectionEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartThresholdsDirectionEnum{}
	}

	items := make([]DashboardWidgetXyChartThresholdsDirectionEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartThresholdsDirectionEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartThresholdsDirectionEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartThresholdsDirectionEnum with the same value as that string.
func flattenDashboardWidgetXyChartThresholdsDirectionEnum(i interface{}) *DashboardWidgetXyChartThresholdsDirectionEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartThresholdsDirectionEnumRef("")
	}

	return DashboardWidgetXyChartThresholdsDirectionEnumRef(s)
}

// flattenDashboardWidgetXyChartXAxisScaleEnumSlice flattens the contents of DashboardWidgetXyChartXAxisScaleEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartXAxisScaleEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartXAxisScaleEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartXAxisScaleEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartXAxisScaleEnum{}
	}

	items := make([]DashboardWidgetXyChartXAxisScaleEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartXAxisScaleEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartXAxisScaleEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartXAxisScaleEnum with the same value as that string.
func flattenDashboardWidgetXyChartXAxisScaleEnum(i interface{}) *DashboardWidgetXyChartXAxisScaleEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartXAxisScaleEnumRef("")
	}

	return DashboardWidgetXyChartXAxisScaleEnumRef(s)
}

// flattenDashboardWidgetXyChartYAxisScaleEnumSlice flattens the contents of DashboardWidgetXyChartYAxisScaleEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartYAxisScaleEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartYAxisScaleEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartYAxisScaleEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartYAxisScaleEnum{}
	}

	items := make([]DashboardWidgetXyChartYAxisScaleEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartYAxisScaleEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartYAxisScaleEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartYAxisScaleEnum with the same value as that string.
func flattenDashboardWidgetXyChartYAxisScaleEnum(i interface{}) *DashboardWidgetXyChartYAxisScaleEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartYAxisScaleEnumRef("")
	}

	return DashboardWidgetXyChartYAxisScaleEnumRef(s)
}

// flattenDashboardWidgetXyChartChartOptionsModeEnumSlice flattens the contents of DashboardWidgetXyChartChartOptionsModeEnum from a JSON
// response object.
func flattenDashboardWidgetXyChartChartOptionsModeEnumSlice(c *Client, i interface{}) []DashboardWidgetXyChartChartOptionsModeEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetXyChartChartOptionsModeEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetXyChartChartOptionsModeEnum{}
	}

	items := make([]DashboardWidgetXyChartChartOptionsModeEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetXyChartChartOptionsModeEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetXyChartChartOptionsModeEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetXyChartChartOptionsModeEnum with the same value as that string.
func flattenDashboardWidgetXyChartChartOptionsModeEnum(i interface{}) *DashboardWidgetXyChartChartOptionsModeEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetXyChartChartOptionsModeEnumRef("")
	}

	return DashboardWidgetXyChartChartOptionsModeEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationPerSeriesAlignerEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregationCrossSeriesReducerEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationPerSeriesAlignerEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregationCrossSeriesReducerEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterRankingMethodEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilterDirectionEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationPerSeriesAlignerEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregationCrossSeriesReducerEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationPerSeriesAlignerEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregationCrossSeriesReducerEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationPerSeriesAlignerEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregationCrossSeriesReducerEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterRankingMethodEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilterDirectionEnumRef(s)
}

// flattenDashboardWidgetScorecardTimeSeriesQueryApiSourceEnumSlice flattens the contents of DashboardWidgetScorecardTimeSeriesQueryApiSourceEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardTimeSeriesQueryApiSourceEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardTimeSeriesQueryApiSourceEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardTimeSeriesQueryApiSourceEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardTimeSeriesQueryApiSourceEnum{}
	}

	items := make([]DashboardWidgetScorecardTimeSeriesQueryApiSourceEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardTimeSeriesQueryApiSourceEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardTimeSeriesQueryApiSourceEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardTimeSeriesQueryApiSourceEnum with the same value as that string.
func flattenDashboardWidgetScorecardTimeSeriesQueryApiSourceEnum(i interface{}) *DashboardWidgetScorecardTimeSeriesQueryApiSourceEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardTimeSeriesQueryApiSourceEnumRef("")
	}

	return DashboardWidgetScorecardTimeSeriesQueryApiSourceEnumRef(s)
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnumSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum with the same value as that string.
func flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum(i interface{}) *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnumRef("")
	}

	return DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsLogicalOperatorEnumRef(s)
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnumSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum with the same value as that string.
func flattenDashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum(i interface{}) *DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnumRef("")
	}

	return DashboardWidgetScorecardSourceDrilldownResourceLabelDrilldownsValueRestrictionsComparatorEnumRef(s)
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnumSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum with the same value as that string.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum(i interface{}) *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnumRef("")
	}

	return DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsLogicalOperatorEnumRef(s)
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnumSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum with the same value as that string.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum(i interface{}) *DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnumRef("")
	}

	return DashboardWidgetScorecardSourceDrilldownMetadataSystemLabelDrilldownsValueRestrictionsComparatorEnumRef(s)
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnumSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum with the same value as that string.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum(i interface{}) *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnumRef("")
	}

	return DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsLogicalOperatorEnumRef(s)
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnumSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum with the same value as that string.
func flattenDashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum(i interface{}) *DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnumRef("")
	}

	return DashboardWidgetScorecardSourceDrilldownMetadataUserLabelDrilldownsValueRestrictionsComparatorEnumRef(s)
}

// flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnumSlice flattens the contents of DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum{}
	}

	items := make([]DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum with the same value as that string.
func flattenDashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum(i interface{}) *DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnumRef("")
	}

	return DashboardWidgetScorecardSourceDrilldownServiceTypeDrilldownTypesEnumRef(s)
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnumSlice flattens the contents of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum{}
	}

	items := make([]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum with the same value as that string.
func flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum(i interface{}) *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnumRef("")
	}

	return DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsLogicalOperatorEnumRef(s)
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnumSlice flattens the contents of DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum{}
	}

	items := make([]DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum with the same value as that string.
func flattenDashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum(i interface{}) *DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnumRef("")
	}

	return DashboardWidgetScorecardMetricDrilldownMetricLabelDrilldownsValueRestrictionsComparatorEnumRef(s)
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnumSlice flattens the contents of DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum{}
	}

	items := make([]DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum with the same value as that string.
func flattenDashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum(i interface{}) *DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnumRef("")
	}

	return DashboardWidgetScorecardMetricDrilldownMetricGroupByDrilldownReducerEnumRef(s)
}

// flattenDashboardWidgetScorecardSparkChartViewSparkChartTypeEnumSlice flattens the contents of DashboardWidgetScorecardSparkChartViewSparkChartTypeEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardSparkChartViewSparkChartTypeEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardSparkChartViewSparkChartTypeEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardSparkChartViewSparkChartTypeEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardSparkChartViewSparkChartTypeEnum{}
	}

	items := make([]DashboardWidgetScorecardSparkChartViewSparkChartTypeEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardSparkChartViewSparkChartTypeEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardSparkChartViewSparkChartTypeEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardSparkChartViewSparkChartTypeEnum with the same value as that string.
func flattenDashboardWidgetScorecardSparkChartViewSparkChartTypeEnum(i interface{}) *DashboardWidgetScorecardSparkChartViewSparkChartTypeEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardSparkChartViewSparkChartTypeEnumRef("")
	}

	return DashboardWidgetScorecardSparkChartViewSparkChartTypeEnumRef(s)
}

// flattenDashboardWidgetScorecardThresholdsColorEnumSlice flattens the contents of DashboardWidgetScorecardThresholdsColorEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardThresholdsColorEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardThresholdsColorEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardThresholdsColorEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardThresholdsColorEnum{}
	}

	items := make([]DashboardWidgetScorecardThresholdsColorEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardThresholdsColorEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardThresholdsColorEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardThresholdsColorEnum with the same value as that string.
func flattenDashboardWidgetScorecardThresholdsColorEnum(i interface{}) *DashboardWidgetScorecardThresholdsColorEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardThresholdsColorEnumRef("")
	}

	return DashboardWidgetScorecardThresholdsColorEnumRef(s)
}

// flattenDashboardWidgetScorecardThresholdsDirectionEnumSlice flattens the contents of DashboardWidgetScorecardThresholdsDirectionEnum from a JSON
// response object.
func flattenDashboardWidgetScorecardThresholdsDirectionEnumSlice(c *Client, i interface{}) []DashboardWidgetScorecardThresholdsDirectionEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetScorecardThresholdsDirectionEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetScorecardThresholdsDirectionEnum{}
	}

	items := make([]DashboardWidgetScorecardThresholdsDirectionEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetScorecardThresholdsDirectionEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetScorecardThresholdsDirectionEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetScorecardThresholdsDirectionEnum with the same value as that string.
func flattenDashboardWidgetScorecardThresholdsDirectionEnum(i interface{}) *DashboardWidgetScorecardThresholdsDirectionEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetScorecardThresholdsDirectionEnumRef("")
	}

	return DashboardWidgetScorecardThresholdsDirectionEnumRef(s)
}

// flattenDashboardWidgetTextFormatEnumSlice flattens the contents of DashboardWidgetTextFormatEnum from a JSON
// response object.
func flattenDashboardWidgetTextFormatEnumSlice(c *Client, i interface{}) []DashboardWidgetTextFormatEnum {
	a, ok := i.([]interface{})
	if !ok {
		return []DashboardWidgetTextFormatEnum{}
	}

	if len(a) == 0 {
		return []DashboardWidgetTextFormatEnum{}
	}

	items := make([]DashboardWidgetTextFormatEnum, 0, len(a))
	for _, item := range a {
		items = append(items, *flattenDashboardWidgetTextFormatEnum(item.(interface{})))
	}

	return items
}

// flattenDashboardWidgetTextFormatEnum asserts that an interface is a string, and returns a
// pointer to a *DashboardWidgetTextFormatEnum with the same value as that string.
func flattenDashboardWidgetTextFormatEnum(i interface{}) *DashboardWidgetTextFormatEnum {
	s, ok := i.(string)
	if !ok {
		return DashboardWidgetTextFormatEnumRef("")
	}

	return DashboardWidgetTextFormatEnumRef(s)
}

// This function returns a matcher that checks whether a serialized resource matches this resource
// in its parameters (as defined by the fields in a Get, which definitionally define resource
// identity).  This is useful in extracting the element from a List call.
func (r *Dashboard) matcher(c *Client) func([]byte) bool {
	return func(b []byte) bool {
		cr, err := unmarshalDashboard(b, c)
		if err != nil {
			c.Config.Logger.Warning("failed to unmarshal provided resource in matcher.")
			return false
		}
		nr := r.urlNormalized()
		ncr := cr.urlNormalized()
		c.Config.Logger.Infof("looking for %v\nin %v", nr, ncr)

		if nr.Project == nil && ncr.Project == nil {
			c.Config.Logger.Info("Both Project fields null - considering equal.")
		} else if nr.Project == nil || ncr.Project == nil {
			c.Config.Logger.Info("Only one Project field is null - considering unequal.")
			return false
		} else if *nr.Project != *ncr.Project {
			return false
		}
		if nr.Name == nil && ncr.Name == nil {
			c.Config.Logger.Info("Both Name fields null - considering equal.")
		} else if nr.Name == nil || ncr.Name == nil {
			c.Config.Logger.Info("Only one Name field is null - considering unequal.")
			return false
		} else if *nr.Name != *ncr.Name {
			return false
		}
		return true
	}
}
