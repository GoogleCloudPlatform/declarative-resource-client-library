// Copyright 2021 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package dcl;

import "proto/connector/sdk.proto";
import "proto/empty.proto";

enum ComputeForwardingRuleIPProtocolEnum {
  ComputeForwardingRuleIPProtocolEnumNO_VALUE_DO_NOT_USE = 0;
  ComputeForwardingRuleIPProtocolEnumTCP = 1;
  ComputeForwardingRuleIPProtocolEnumUDP = 2;
  ComputeForwardingRuleIPProtocolEnumESP = 3;
  ComputeForwardingRuleIPProtocolEnumAH = 4;
  ComputeForwardingRuleIPProtocolEnumSCTP = 5;
  ComputeForwardingRuleIPProtocolEnumICMP = 6;
}

enum ComputeForwardingRuleIPVersionEnum {
  ComputeForwardingRuleIPVersionEnumNO_VALUE_DO_NOT_USE = 0;
  ComputeForwardingRuleIPVersionEnumUNSPECIFIED_VERSION = 1;
  ComputeForwardingRuleIPVersionEnumIPV4 = 2;
  ComputeForwardingRuleIPVersionEnumIPV6 = 3;
}

enum ComputeForwardingRuleLoadBalancingSchemeEnum {
  ComputeForwardingRuleLoadBalancingSchemeEnumNO_VALUE_DO_NOT_USE = 0;
  ComputeForwardingRuleLoadBalancingSchemeEnumINVALID = 1;
  ComputeForwardingRuleLoadBalancingSchemeEnumINTERNAL = 2;
  ComputeForwardingRuleLoadBalancingSchemeEnumINTERNAL_MANAGED = 3;
  ComputeForwardingRuleLoadBalancingSchemeEnumINTERNAL_SELF_MANAGED = 4;
  ComputeForwardingRuleLoadBalancingSchemeEnumEXTERNAL = 5;
}

enum ComputeForwardingRuleMetadataFilterFilterMatchCriteriaEnum {
  ComputeForwardingRuleMetadataFilterFilterMatchCriteriaEnumNO_VALUE_DO_NOT_USE = 0;
  ComputeForwardingRuleMetadataFilterFilterMatchCriteriaEnumNOT_SET = 1;
  ComputeForwardingRuleMetadataFilterFilterMatchCriteriaEnumMATCH_ALL = 2;
  ComputeForwardingRuleMetadataFilterFilterMatchCriteriaEnumMATCH_ANY = 3;
}

enum ComputeForwardingRuleNetworkTierEnum {
  ComputeForwardingRuleNetworkTierEnumNO_VALUE_DO_NOT_USE = 0;
  ComputeForwardingRuleNetworkTierEnumPREMIUM = 1;
  ComputeForwardingRuleNetworkTierEnumSTANDARD = 2;
}

message ComputeForwardingRule {
  bool all_ports = 1;
  bool allow_global_access = 2;
  string backend_service = 3;
  string creation_timestamp = 4;
  string description = 5;
  string ip_address = 6;
  ComputeForwardingRuleIPProtocolEnum ip_protocol = 7;
  ComputeForwardingRuleIPVersionEnum ip_version = 8;
  bool is_mirroring_collector = 9;
  ComputeForwardingRuleLoadBalancingSchemeEnum load_balancing_scheme = 10;
  repeated ComputeForwardingRuleMetadataFilter metadata_filter = 11;
  string name = 12;
  string network = 13;
  ComputeForwardingRuleNetworkTierEnum network_tier = 14;
  string port_range = 15;
  repeated string ports = 16;
  string region = 17;
  string self_link = 18;
  string service_label = 19;
  string service_name = 20;
  string subnetwork = 21;
  string target = 22;
  string project = 23;
  string location = 24;
}

message ComputeForwardingRuleMetadataFilter {
  ComputeForwardingRuleMetadataFilterFilterMatchCriteriaEnum filter_match_criteria = 1;
  repeated ComputeForwardingRuleMetadataFilterFilterLabel filter_label = 2;
}

message ComputeForwardingRuleMetadataFilterFilterLabel {
  string name = 1;
  string value = 2;
}

message ApplyComputeForwardingRuleRequest {
  ComputeForwardingRule resource = 1;
  repeated LifecycleDirective lifecycle_directives = 2;
  string service_account_file = 3;
}

message DeleteComputeForwardingRuleRequest {
  string service_account_file = 1;
  ComputeForwardingRule resource = 2;
}

message ListComputeForwardingRuleRequest {
  string service_account_file = 1;
	ComputeForwardingRule resource = 2;
}

message ListComputeForwardingRuleResponse {
  repeated ComputeForwardingRule items = 1;
}

service ComputeForwardingRuleService {
  rpc ApplyComputeForwardingRule(ApplyComputeForwardingRuleRequest) returns (ComputeForwardingRule);
  rpc DeleteComputeForwardingRule(DeleteComputeForwardingRuleRequest) returns (google.protobuf.Empty);
  rpc ListComputeForwardingRule(ListComputeForwardingRuleRequest) returns (ListComputeForwardingRuleResponse);
}
