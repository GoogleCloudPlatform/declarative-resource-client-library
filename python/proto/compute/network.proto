// Copyright 2021 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package dcl;

import "proto/connector/sdk.proto";
import "proto/empty.proto";

enum ComputeNetworkRoutingConfigRoutingModeEnum {
  ComputeNetworkRoutingConfigRoutingModeEnumNO_VALUE_DO_NOT_USE = 0;
  ComputeNetworkRoutingConfigRoutingModeEnumREGIONAL = 1;
  ComputeNetworkRoutingConfigRoutingModeEnumGLOBAL = 2;
}

message ComputeNetwork {
  string description = 1;
  string gateway_ipv4 = 2;
  string ipv4_range = 3;
  string name = 4;
  bool auto_create_subnetworks = 5;
  ComputeNetworkRoutingConfig routing_config = 6;
  string project = 7;
  string self_link = 8;
}

message ComputeNetworkRoutingConfig {
  ComputeNetworkRoutingConfigRoutingModeEnum routing_mode = 1;
}

message ApplyComputeNetworkRequest {
  ComputeNetwork resource = 1;
  repeated LifecycleDirective lifecycle_directives = 2;
  string service_account_file = 3;
}

message DeleteComputeNetworkRequest {
  string service_account_file = 1;
  ComputeNetwork resource = 2;
}

message ListComputeNetworkRequest {
  string service_account_file = 1;
  string Project = 2;
}

message ListComputeNetworkResponse {
  repeated ComputeNetwork items = 1;
}
message ComputeNetworkAsHclRequest {
  ComputeNetwork resource = 1;
}
message ComputeNetworkAsHclResponse {
  string hcl = 1;
}
service ComputeNetworkService {
  rpc ApplyComputeNetwork(ApplyComputeNetworkRequest) returns (ComputeNetwork);
  rpc DeleteComputeNetwork(DeleteComputeNetworkRequest) returns (google.protobuf.Empty);
  rpc ListComputeNetwork(ListComputeNetworkRequest) returns (ListComputeNetworkResponse);
  rpc ComputeNetworkAsHcl(ComputeNetworkAsHclRequest) returns (ComputeNetworkAsHclResponse);

}
