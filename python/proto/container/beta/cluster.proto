// Copyright 2021 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package dcl;

import "proto/connector/sdk.proto";
import "proto/empty.proto";

enum ContainerBetaClusterNetworkPolicyProviderEnum {
  ContainerBetaClusterNetworkPolicyProviderEnumNO_VALUE_DO_NOT_USE = 0;
  ContainerBetaClusterNetworkPolicyProviderEnumPROVIDER_UNSPECIFIED = 1;
  ContainerBetaClusterNetworkPolicyProviderEnumCALICO = 2;
}

enum ContainerBetaClusterDatabaseEncryptionStateEnum {
  ContainerBetaClusterDatabaseEncryptionStateEnumNO_VALUE_DO_NOT_USE = 0;
  ContainerBetaClusterDatabaseEncryptionStateEnumUNKNOWN = 1;
  ContainerBetaClusterDatabaseEncryptionStateEnumENCRYPTED = 2;
  ContainerBetaClusterDatabaseEncryptionStateEnumDECRYPTED = 3;
}

message ContainerBetaCluster {
  string name = 1;
  string description = 2;
  int64 initial_node_count = 3;
  ContainerBetaClusterMasterAuth master_auth = 4;
  string logging_service = 5;
  string monitoring_service = 6;
  string network = 7;
  string cluster_ipv4_cidr = 8;
  ContainerBetaClusterAddonsConfig addons_config = 9;
  string subnetwork = 10;
  repeated ContainerBetaClusterNodePools node_pools = 11;
  repeated string locations = 12;
  bool enable_kubernetes_alpha = 13;
  map<string, string> resource_labels = 14;
  string label_fingerprint = 15;
  ContainerBetaClusterLegacyAbac legacy_abac = 16;
  ContainerBetaClusterNetworkPolicy network_policy = 17;
  ContainerBetaClusterIPAllocationPolicy ip_allocation_policy = 18;
  ContainerBetaClusterMasterAuthorizedNetworksConfig master_authorized_networks_config = 19;
  ContainerBetaClusterBinaryAuthorization binary_authorization = 20;
  ContainerBetaClusterAutoscaling autoscaling = 21;
  ContainerBetaClusterNetworkConfig network_config = 22;
  ContainerBetaClusterMaintenancePolicy maintenance_policy = 23;
  ContainerBetaClusterDefaultMaxPodsConstraint default_max_pods_constraint = 24;
  ContainerBetaClusterResourceUsageExportConfig resource_usage_export_config = 25;
  ContainerBetaClusterAuthenticatorGroupsConfig authenticator_groups_config = 26;
  ContainerBetaClusterPrivateClusterConfig private_cluster_config = 27;
  ContainerBetaClusterDatabaseEncryption database_encryption = 28;
  ContainerBetaClusterVerticalPodAutoscaling vertical_pod_autoscaling = 29;
  ContainerBetaClusterShieldedNodes shielded_nodes = 30;
  string endpoint = 31;
  string master_version = 32;
  string create_time = 33;
  string status = 34;
  string status_message = 35;
  int64 node_ipv4_cidr_size = 36;
  string services_ipv4_cidr = 37;
  string expire_time = 38;
  string location = 39;
  bool enable_tpu = 40;
  string tpu_ipv4_cidr_block = 41;
  repeated ContainerBetaClusterConditions conditions = 42;
  string project = 43;
}

message ContainerBetaClusterMasterAuth {
  string username = 1;
  string password = 2;
  ContainerBetaClusterMasterAuthClientCertificateConfig client_certificate_config = 3;
  string cluster_ca_certificate = 4;
  string client_certificate = 5;
  string client_key = 6;
}

message ContainerBetaClusterMasterAuthClientCertificateConfig {
  bool issue_client_certificate = 1;
}

message ContainerBetaClusterAddonsConfig {
  ContainerBetaClusterAddonsConfigHttpLoadBalancing http_load_balancing = 1;
  ContainerBetaClusterAddonsConfigHorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
  ContainerBetaClusterAddonsConfigKubernetesDashboard kubernetes_dashboard = 3;
  ContainerBetaClusterAddonsConfigNetworkPolicyConfig network_policy_config = 4;
  ContainerBetaClusterAddonsConfigCloudRunConfig cloud_run_config = 5;
}

message ContainerBetaClusterAddonsConfigHttpLoadBalancing {
  bool disabled = 1;
}

message ContainerBetaClusterAddonsConfigHorizontalPodAutoscaling {
  bool disabled = 1;
}

message ContainerBetaClusterAddonsConfigKubernetesDashboard {
  bool disabled = 1;
}

message ContainerBetaClusterAddonsConfigNetworkPolicyConfig {
  bool disabled = 1;
}

message ContainerBetaClusterAddonsConfigCloudRunConfig {
  bool disabled = 1;
}

message ContainerBetaClusterNodePools {
  string name = 1;
}

message ContainerBetaClusterLegacyAbac {
  bool enabled = 1;
}

message ContainerBetaClusterNetworkPolicy {
  ContainerBetaClusterNetworkPolicyProviderEnum provider = 1;
  bool enabled = 2;
}

message ContainerBetaClusterIPAllocationPolicy {
  bool use_ip_aliases = 1;
  bool create_subnetwork = 2;
  string subnetwork_name = 3;
  string cluster_secondary_range_name = 4;
  string services_secondary_range_name = 5;
  string cluster_ipv4_cidr_block = 6;
  string node_ipv4_cidr_block = 7;
  string services_ipv4_cidr_block = 8;
  string tpu_ipv4_cidr_block = 9;
}

message ContainerBetaClusterMasterAuthorizedNetworksConfig {
  bool enabled = 1;
  repeated ContainerBetaClusterMasterAuthorizedNetworksConfigCidrBlocks cidr_blocks = 2;
}

message ContainerBetaClusterMasterAuthorizedNetworksConfigCidrBlocks {
  string display_name = 1;
  string cidr_block = 2;
}

message ContainerBetaClusterBinaryAuthorization {
  bool enabled = 1;
}

message ContainerBetaClusterAutoscaling {
  bool enable_node_autoprovisioning = 1;
  repeated ContainerBetaClusterAutoscalingResourceLimits resource_limits = 2;
  ContainerBetaClusterAutoscalingAutoprovisioningNodePoolDefaults autoprovisioning_node_pool_defaults = 3;
}

message ContainerBetaClusterAutoscalingResourceLimits {
  string resource_type = 1;
  int64 minimum = 2;
  int64 maximum = 3;
}

message ContainerBetaClusterAutoscalingAutoprovisioningNodePoolDefaults {
  repeated string oauth_scopes = 1;
  string service_account = 2;
  ContainerBetaClusterAutoscalingAutoprovisioningNodePoolDefaultsUpgradeSettings upgrade_settings = 3;
  ContainerBetaClusterAutoscalingAutoprovisioningNodePoolDefaultsManagement management = 4;
}

message ContainerBetaClusterAutoscalingAutoprovisioningNodePoolDefaultsUpgradeSettings {
  int64 max_surge = 1;
  int64 max_unavailable = 2;
}

message ContainerBetaClusterAutoscalingAutoprovisioningNodePoolDefaultsManagement {
  bool auto_upgrade = 1;
  bool auto_repair = 2;
}

message ContainerBetaClusterNetworkConfig {
  string network = 1;
  string subnetwork = 2;
  bool enable_intra_node_visibility = 3;
}

message ContainerBetaClusterMaintenancePolicy {
  ContainerBetaClusterMaintenancePolicyWindow window = 1;
  string resource_version = 2;
}

message ContainerBetaClusterMaintenancePolicyWindow {
  ContainerBetaClusterMaintenancePolicyWindowDailyMaintenanceWindow daily_maintenance_window = 1;
  ContainerBetaClusterMaintenancePolicyWindowRecurringWindow recurring_window = 2;
}

message ContainerBetaClusterMaintenancePolicyWindowDailyMaintenanceWindow {
  string start_time = 1;
  string duration = 2;
}

message ContainerBetaClusterMaintenancePolicyWindowRecurringWindow {
  ContainerBetaClusterMaintenancePolicyWindowRecurringWindowWindow window = 1;
  string recurrence = 2;
}

message ContainerBetaClusterMaintenancePolicyWindowRecurringWindowWindow {
  string start_time = 1;
  string end_time = 2;
}

message ContainerBetaClusterDefaultMaxPodsConstraint {
  string max_pods_per_node = 1;
}

message ContainerBetaClusterResourceUsageExportConfig {
  ContainerBetaClusterResourceUsageExportConfigBigqueryDestination bigquery_destination = 1;
  bool enable_network_egress_monitoring = 2;
  ContainerBetaClusterResourceUsageExportConfigConsumptionMeteringConfig consumption_metering_config = 3;
}

message ContainerBetaClusterResourceUsageExportConfigBigqueryDestination {
  string dataset_id = 1;
}

message ContainerBetaClusterResourceUsageExportConfigConsumptionMeteringConfig {
  bool enabled = 1;
}

message ContainerBetaClusterAuthenticatorGroupsConfig {
  bool enabled = 1;
  string security_group = 2;
}

message ContainerBetaClusterPrivateClusterConfig {
  bool enable_private_nodes = 1;
  bool enable_private_endpoint = 2;
  string master_ipv4_cidr_block = 3;
  string private_endpoint = 4;
  string public_endpoint = 5;
  string peering_name = 6;
}

message ContainerBetaClusterDatabaseEncryption {
  ContainerBetaClusterDatabaseEncryptionStateEnum state = 1;
  string key_name = 2;
}

message ContainerBetaClusterVerticalPodAutoscaling {
  bool enabled = 1;
}

message ContainerBetaClusterShieldedNodes {
  bool enabled = 1;
}

message ContainerBetaClusterConditions {
  string code = 1;
  string message = 2;
}

message ApplyContainerBetaClusterRequest {
  ContainerBetaCluster resource = 1;
  repeated LifecycleDirective lifecycle_directives = 2;
  string service_account_file = 3;
}

message DeleteContainerBetaClusterRequest {
  string service_account_file = 1;
  ContainerBetaCluster resource = 2;
}

message ListContainerBetaClusterRequest {
  string service_account_file = 1;
  string Project = 2;
  string Location = 3;
}

message ListContainerBetaClusterResponse {
  repeated ContainerBetaCluster items = 1;
}
service ContainerBetaClusterService {
  rpc ApplyContainerBetaCluster(ApplyContainerBetaClusterRequest) returns (ContainerBetaCluster);
  rpc DeleteContainerBetaCluster(DeleteContainerBetaClusterRequest) returns (google.protobuf.Empty);
  rpc ListContainerBetaCluster(ListContainerBetaClusterRequest) returns (ListContainerBetaClusterResponse);
}
